
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bef8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800c0c8  0800c0c8  0001c0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c684  0800c684  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c684  0800c684  0001c684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c68c  0800c68c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c68c  0800c68c  0001c68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c690  0800c690  0001c690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800c694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005310  2000008c  0800c720  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000539c  0800c720  0002539c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5a4  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003687  00000000  00000000  0003b660  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016c8  00000000  00000000  0003ece8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001520  00000000  00000000  000403b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025daf  00000000  00000000  000418d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013a3b  00000000  00000000  0006767f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0a02  00000000  00000000  0007b0ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015babc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006564  00000000  00000000  0015bb38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c0b0 	.word	0x0800c0b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	0800c0b0 	.word	0x0800c0b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2104      	movs	r1, #4
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <SELECT+0x14>)
 8000da6:	f004 f8b5 	bl	8004f14 <HAL_GPIO_WritePin>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021800 	.word	0x40021800

08000db4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2104      	movs	r1, #4
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <DESELECT+0x14>)
 8000dbe:	f004 f8a9 	bl	8004f14 <HAL_GPIO_WritePin>
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40021800 	.word	0x40021800

08000dcc <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000dd6:	bf00      	nop
 8000dd8:	4808      	ldr	r0, [pc, #32]	; (8000dfc <SPI_TxByte+0x30>)
 8000dda:	f005 ff43 	bl	8006c64 <HAL_SPI_GetState>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d1f9      	bne.n	8000dd8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000de4:	1df9      	adds	r1, r7, #7
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	2201      	movs	r2, #1
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <SPI_TxByte+0x30>)
 8000dee:	f005 fc63 	bl	80066b8 <HAL_SPI_Transmit>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200019b4 	.word	0x200019b4

08000e00 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000e06:	23ff      	movs	r3, #255	; 0xff
 8000e08:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000e0e:	bf00      	nop
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <SPI_RxByte+0x38>)
 8000e12:	f005 ff27 	bl	8006c64 <HAL_SPI_GetState>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d1f9      	bne.n	8000e10 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000e1c:	1dba      	adds	r2, r7, #6
 8000e1e:	1df9      	adds	r1, r7, #7
 8000e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2301      	movs	r3, #1
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <SPI_RxByte+0x38>)
 8000e2a:	f005 fd79 	bl	8006920 <HAL_SPI_TransmitReceive>
  
  return data;
 8000e2e:	79bb      	ldrb	r3, [r7, #6]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200019b4 	.word	0x200019b4

08000e3c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000e44:	f7ff ffdc 	bl	8000e00 <SPI_RxByte>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	701a      	strb	r2, [r3, #0]
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <SD_ReadyWait+0x34>)
 8000e60:	2232      	movs	r2, #50	; 0x32
 8000e62:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000e64:	f7ff ffcc 	bl	8000e00 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000e68:	f7ff ffca 	bl	8000e00 <SPI_RxByte>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2bff      	cmp	r3, #255	; 0xff
 8000e74:	d004      	beq.n	8000e80 <SD_ReadyWait+0x28>
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SD_ReadyWait+0x34>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f3      	bne.n	8000e68 <SD_ReadyWait+0x10>
  
  return res;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20003320 	.word	0x20003320

08000e90 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000e96:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e9a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000e9c:	f7ff ff8a 	bl	8000db4 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	e005      	b.n	8000eb2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000ea6:	20ff      	movs	r0, #255	; 0xff
 8000ea8:	f7ff ff90 	bl	8000dcc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	2b09      	cmp	r3, #9
 8000eb6:	ddf6      	ble.n	8000ea6 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000eb8:	f7ff ff70 	bl	8000d9c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000ebc:	2340      	movs	r3, #64	; 0x40
 8000ebe:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000ed0:	2395      	movs	r3, #149	; 0x95
 8000ed2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	e009      	b.n	8000eee <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000eda:	1d3a      	adds	r2, r7, #4
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff72 	bl	8000dcc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	ddf2      	ble.n	8000eda <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000ef4:	e002      	b.n	8000efc <SD_PowerOn+0x6c>
  {
    Count--;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000efc:	f7ff ff80 	bl	8000e00 <SPI_RxByte>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d002      	beq.n	8000f0c <SD_PowerOn+0x7c>
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1f4      	bne.n	8000ef6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000f0c:	f7ff ff52 	bl	8000db4 <DESELECT>
  SPI_TxByte(0XFF);
 8000f10:	20ff      	movs	r0, #255	; 0xff
 8000f12:	f7ff ff5b 	bl	8000dcc <SPI_TxByte>
  
  PowerFlag = 1;
 8000f16:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <SD_PowerOn+0x94>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200000a9 	.word	0x200000a9

08000f28 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <SD_PowerOff+0x14>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	200000a9 	.word	0x200000a9

08000f40 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <SD_CheckPower+0x14>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200000a9 	.word	0x200000a9

08000f58 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <SD_RxDataBlock+0x68>)
 8000f64:	220a      	movs	r2, #10
 8000f66:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000f68:	f7ff ff4a 	bl	8000e00 <SPI_RxByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2bff      	cmp	r3, #255	; 0xff
 8000f74:	d104      	bne.n	8000f80 <SD_RxDataBlock+0x28>
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <SD_RxDataBlock+0x68>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f3      	bne.n	8000f68 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2bfe      	cmp	r3, #254	; 0xfe
 8000f84:	d001      	beq.n	8000f8a <SD_RxDataBlock+0x32>
    return FALSE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e016      	b.n	8000fb8 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff53 	bl	8000e3c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff4d 	bl	8000e3c <SPI_RxBytePtr>
  } while(btr -= 2);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1ed      	bne.n	8000f8a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000fae:	f7ff ff27 	bl	8000e00 <SPI_RxByte>
  SPI_RxByte();
 8000fb2:	f7ff ff25 	bl	8000e00 <SPI_RxByte>
  
  return TRUE;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20003321 	.word	0x20003321

08000fc4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000fd4:	f7ff ff40 	bl	8000e58 <SD_ReadyWait>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2bff      	cmp	r3, #255	; 0xff
 8000fdc:	d001      	beq.n	8000fe2 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e040      	b.n	8001064 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fef1 	bl	8000dcc <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	2bfd      	cmp	r3, #253	; 0xfd
 8000fee:	d031      	beq.n	8001054 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fee5 	bl	8000dcc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fede 	bl	8000dcc <SPI_TxByte>
    } while (--wc);
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	3b01      	subs	r3, #1
 8001014:	73bb      	strb	r3, [r7, #14]
 8001016:	7bbb      	ldrb	r3, [r7, #14]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1eb      	bne.n	8000ff4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 800101c:	f7ff fef0 	bl	8000e00 <SPI_RxByte>
    SPI_RxByte();
 8001020:	f7ff feee 	bl	8000e00 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001024:	e00b      	b.n	800103e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001026:	f7ff feeb 	bl	8000e00 <SPI_RxByte>
 800102a:	4603      	mov	r3, r0
 800102c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	2b05      	cmp	r3, #5
 8001036:	d006      	beq.n	8001046 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	3301      	adds	r3, #1
 800103c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	2b40      	cmp	r3, #64	; 0x40
 8001042:	d9f0      	bls.n	8001026 <SD_TxDataBlock+0x62>
 8001044:	e000      	b.n	8001048 <SD_TxDataBlock+0x84>
        break;
 8001046:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001048:	bf00      	nop
 800104a:	f7ff fed9 	bl	8000e00 <SPI_RxByte>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0fa      	beq.n	800104a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	2b05      	cmp	r3, #5
 800105c:	d101      	bne.n	8001062 <SD_TxDataBlock+0x9e>
    return TRUE;
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001078:	f7ff feee 	bl	8000e58 <SD_ReadyWait>
 800107c:	4603      	mov	r3, r0
 800107e:	2bff      	cmp	r3, #255	; 0xff
 8001080:	d001      	beq.n	8001086 <SD_SendCmd+0x1a>
    return 0xFF;
 8001082:	23ff      	movs	r3, #255	; 0xff
 8001084:	e040      	b.n	8001108 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fe9f 	bl	8000dcc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	0e1b      	lsrs	r3, r3, #24
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe99 	bl	8000dcc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	0c1b      	lsrs	r3, r3, #16
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fe93 	bl	8000dcc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fe8d 	bl	8000dcc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fe88 	bl	8000dcc <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b40      	cmp	r3, #64	; 0x40
 80010c4:	d101      	bne.n	80010ca <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80010c6:	2395      	movs	r3, #149	; 0x95
 80010c8:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b48      	cmp	r3, #72	; 0x48
 80010ce:	d101      	bne.n	80010d4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80010d0:	2387      	movs	r3, #135	; 0x87
 80010d2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fe78 	bl	8000dcc <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b4c      	cmp	r3, #76	; 0x4c
 80010e0:	d101      	bne.n	80010e6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80010e2:	f7ff fe8d 	bl	8000e00 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80010e6:	230a      	movs	r3, #10
 80010e8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80010ea:	f7ff fe89 	bl	8000e00 <SPI_RxByte>
 80010ee:	4603      	mov	r3, r0
 80010f0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80010f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da05      	bge.n	8001106 <SD_SendCmd+0x9a>
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	73bb      	strb	r3, [r7, #14]
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f1      	bne.n	80010ea <SD_SendCmd+0x7e>
  
  return res;
 8001106:	7b7b      	ldrb	r3, [r7, #13]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001120:	2301      	movs	r3, #1
 8001122:	e0d5      	b.n	80012d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001124:	4b6c      	ldr	r3, [pc, #432]	; (80012d8 <SD_disk_initialize+0x1c8>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <SD_disk_initialize+0x2a>
    return Stat;        
 8001132:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <SD_disk_initialize+0x1c8>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	e0ca      	b.n	80012d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800113a:	f7ff fea9 	bl	8000e90 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800113e:	f7ff fe2d 	bl	8000d9c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001146:	2100      	movs	r1, #0
 8001148:	2040      	movs	r0, #64	; 0x40
 800114a:	f7ff ff8f 	bl	800106c <SD_SendCmd>
 800114e:	4603      	mov	r3, r0
 8001150:	2b01      	cmp	r3, #1
 8001152:	f040 80a5 	bne.w	80012a0 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001156:	4b61      	ldr	r3, [pc, #388]	; (80012dc <SD_disk_initialize+0x1cc>)
 8001158:	2264      	movs	r2, #100	; 0x64
 800115a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800115c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001160:	2048      	movs	r0, #72	; 0x48
 8001162:	f7ff ff83 	bl	800106c <SD_SendCmd>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d158      	bne.n	800121e <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e00c      	b.n	800118c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001172:	7bfc      	ldrb	r4, [r7, #15]
 8001174:	f7ff fe44 	bl	8000e00 <SPI_RxByte>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4423      	add	r3, r4
 8001182:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	3301      	adds	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2b03      	cmp	r3, #3
 8001190:	d9ef      	bls.n	8001172 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001192:	7abb      	ldrb	r3, [r7, #10]
 8001194:	2b01      	cmp	r3, #1
 8001196:	f040 8083 	bne.w	80012a0 <SD_disk_initialize+0x190>
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	2baa      	cmp	r3, #170	; 0xaa
 800119e:	d17f      	bne.n	80012a0 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80011a0:	2100      	movs	r1, #0
 80011a2:	2077      	movs	r0, #119	; 0x77
 80011a4:	f7ff ff62 	bl	800106c <SD_SendCmd>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d807      	bhi.n	80011be <SD_disk_initialize+0xae>
 80011ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011b2:	2069      	movs	r0, #105	; 0x69
 80011b4:	f7ff ff5a 	bl	800106c <SD_SendCmd>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <SD_disk_initialize+0x1cc>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1eb      	bne.n	80011a0 <SD_disk_initialize+0x90>
 80011c8:	e000      	b.n	80011cc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80011ca:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <SD_disk_initialize+0x1cc>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d064      	beq.n	80012a0 <SD_disk_initialize+0x190>
 80011d6:	2100      	movs	r1, #0
 80011d8:	207a      	movs	r0, #122	; 0x7a
 80011da:	f7ff ff47 	bl	800106c <SD_SendCmd>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d15d      	bne.n	80012a0 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e00c      	b.n	8001204 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80011ea:	7bfc      	ldrb	r4, [r7, #15]
 80011ec:	f7ff fe08 	bl	8000e00 <SPI_RxByte>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4423      	add	r3, r4
 80011fa:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	3301      	adds	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d9ef      	bls.n	80011ea <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800120a:	7a3b      	ldrb	r3, [r7, #8]
 800120c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SD_disk_initialize+0x108>
 8001214:	2306      	movs	r3, #6
 8001216:	e000      	b.n	800121a <SD_disk_initialize+0x10a>
 8001218:	2302      	movs	r3, #2
 800121a:	73bb      	strb	r3, [r7, #14]
 800121c:	e040      	b.n	80012a0 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800121e:	2100      	movs	r1, #0
 8001220:	2077      	movs	r0, #119	; 0x77
 8001222:	f7ff ff23 	bl	800106c <SD_SendCmd>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d808      	bhi.n	800123e <SD_disk_initialize+0x12e>
 800122c:	2100      	movs	r1, #0
 800122e:	2069      	movs	r0, #105	; 0x69
 8001230:	f7ff ff1c 	bl	800106c <SD_SendCmd>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d801      	bhi.n	800123e <SD_disk_initialize+0x12e>
 800123a:	2302      	movs	r3, #2
 800123c:	e000      	b.n	8001240 <SD_disk_initialize+0x130>
 800123e:	2301      	movs	r3, #1
 8001240:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001242:	7bbb      	ldrb	r3, [r7, #14]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d10e      	bne.n	8001266 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001248:	2100      	movs	r1, #0
 800124a:	2077      	movs	r0, #119	; 0x77
 800124c:	f7ff ff0e 	bl	800106c <SD_SendCmd>
 8001250:	4603      	mov	r3, r0
 8001252:	2b01      	cmp	r3, #1
 8001254:	d80e      	bhi.n	8001274 <SD_disk_initialize+0x164>
 8001256:	2100      	movs	r1, #0
 8001258:	2069      	movs	r0, #105	; 0x69
 800125a:	f7ff ff07 	bl	800106c <SD_SendCmd>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d107      	bne.n	8001274 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001264:	e00d      	b.n	8001282 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001266:	2100      	movs	r1, #0
 8001268:	2041      	movs	r0, #65	; 0x41
 800126a:	f7ff feff 	bl	800106c <SD_SendCmd>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <SD_disk_initialize+0x1cc>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1e1      	bne.n	8001242 <SD_disk_initialize+0x132>
 800127e:	e000      	b.n	8001282 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001280:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <SD_disk_initialize+0x1cc>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d007      	beq.n	800129c <SD_disk_initialize+0x18c>
 800128c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001290:	2050      	movs	r0, #80	; 0x50
 8001292:	f7ff feeb 	bl	800106c <SD_SendCmd>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80012a0:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <SD_disk_initialize+0x1d0>)
 80012a2:	7bbb      	ldrb	r3, [r7, #14]
 80012a4:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80012a6:	f7ff fd85 	bl	8000db4 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80012aa:	f7ff fda9 	bl	8000e00 <SPI_RxByte>
  
  if (type) 
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d008      	beq.n	80012c6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <SD_disk_initialize+0x1c8>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SD_disk_initialize+0x1c8>)
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e001      	b.n	80012ca <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80012c6:	f7ff fe2f 	bl	8000f28 <SD_PowerOff>
  }
  
  return Stat;
 80012ca:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <SD_disk_initialize+0x1c8>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2db      	uxtb	r3, r3
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20003321 	.word	0x20003321
 80012e0:	200000a8 	.word	0x200000a8

080012e4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80012f4:	2301      	movs	r3, #1
 80012f6:	e002      	b.n	80012fe <SD_disk_status+0x1a>
  
  return Stat;
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <SD_disk_status+0x28>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000000 	.word	0x20000000

08001310 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <SD_disk_read+0x1c>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <SD_disk_read+0x20>
    return RES_PARERR;
 800132c:	2304      	movs	r3, #4
 800132e:	e051      	b.n	80013d4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <SD_disk_read+0xcc>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800133e:	2303      	movs	r3, #3
 8001340:	e048      	b.n	80013d4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001342:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <SD_disk_read+0xd0>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	025b      	lsls	r3, r3, #9
 8001352:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001354:	f7ff fd22 	bl	8000d9c <SELECT>
  
  if (count == 1) 
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d111      	bne.n	8001382 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	2051      	movs	r0, #81	; 0x51
 8001362:	f7ff fe83 	bl	800106c <SD_SendCmd>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d129      	bne.n	80013c0 <SD_disk_read+0xb0>
 800136c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001370:	68b8      	ldr	r0, [r7, #8]
 8001372:	f7ff fdf1 	bl	8000f58 <SD_RxDataBlock>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d021      	beq.n	80013c0 <SD_disk_read+0xb0>
      count = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	e01e      	b.n	80013c0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	2052      	movs	r0, #82	; 0x52
 8001386:	f7ff fe71 	bl	800106c <SD_SendCmd>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d117      	bne.n	80013c0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f7ff fddf 	bl	8000f58 <SD_RxDataBlock>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00a      	beq.n	80013b6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013a6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1ed      	bne.n	8001390 <SD_disk_read+0x80>
 80013b4:	e000      	b.n	80013b8 <SD_disk_read+0xa8>
          break;
 80013b6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80013b8:	2100      	movs	r1, #0
 80013ba:	204c      	movs	r0, #76	; 0x4c
 80013bc:	f7ff fe56 	bl	800106c <SD_SendCmd>
    }
  }
  
  DESELECT();
 80013c0:	f7ff fcf8 	bl	8000db4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80013c4:	f7ff fd1c 	bl	8000e00 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	bf14      	ite	ne
 80013ce:	2301      	movne	r3, #1
 80013d0:	2300      	moveq	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000000 	.word	0x20000000
 80013e0:	200000a8 	.word	0x200000a8

080013e4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <SD_disk_write+0x1c>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <SD_disk_write+0x20>
    return RES_PARERR;
 8001400:	2304      	movs	r3, #4
 8001402:	e06b      	b.n	80014dc <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001404:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <SD_disk_write+0x100>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001412:	2303      	movs	r3, #3
 8001414:	e062      	b.n	80014dc <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001416:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <SD_disk_write+0x100>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001424:	2302      	movs	r3, #2
 8001426:	e059      	b.n	80014dc <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <SD_disk_write+0x104>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	025b      	lsls	r3, r3, #9
 8001438:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800143a:	f7ff fcaf 	bl	8000d9c <SELECT>
  
  if (count == 1) 
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d110      	bne.n	8001466 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	2058      	movs	r0, #88	; 0x58
 8001448:	f7ff fe10 	bl	800106c <SD_SendCmd>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d13a      	bne.n	80014c8 <SD_disk_write+0xe4>
 8001452:	21fe      	movs	r1, #254	; 0xfe
 8001454:	68b8      	ldr	r0, [r7, #8]
 8001456:	f7ff fdb5 	bl	8000fc4 <SD_TxDataBlock>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d033      	beq.n	80014c8 <SD_disk_write+0xe4>
      count = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	e030      	b.n	80014c8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <SD_disk_write+0x104>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001472:	2100      	movs	r1, #0
 8001474:	2077      	movs	r0, #119	; 0x77
 8001476:	f7ff fdf9 	bl	800106c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	2057      	movs	r0, #87	; 0x57
 800147e:	f7ff fdf5 	bl	800106c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	2059      	movs	r0, #89	; 0x59
 8001486:	f7ff fdf1 	bl	800106c <SD_SendCmd>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d11b      	bne.n	80014c8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001490:	21fc      	movs	r1, #252	; 0xfc
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	f7ff fd96 	bl	8000fc4 <SD_TxDataBlock>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00a      	beq.n	80014b4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014a4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1ee      	bne.n	8001490 <SD_disk_write+0xac>
 80014b2:	e000      	b.n	80014b6 <SD_disk_write+0xd2>
          break;
 80014b4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80014b6:	21fd      	movs	r1, #253	; 0xfd
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff fd83 	bl	8000fc4 <SD_TxDataBlock>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80014c8:	f7ff fc74 	bl	8000db4 <DESELECT>
  SPI_RxByte();
 80014cc:	f7ff fc98 	bl	8000e00 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bf14      	ite	ne
 80014d6:	2301      	movne	r3, #1
 80014d8:	2300      	moveq	r3, #0
 80014da:	b2db      	uxtb	r3, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000000 	.word	0x20000000
 80014e8:	200000a8 	.word	0x200000a8

080014ec <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b08b      	sub	sp, #44	; 0x2c
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	603a      	str	r2, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	460b      	mov	r3, r1
 80014fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001506:	2304      	movs	r3, #4
 8001508:	e117      	b.n	800173a <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001510:	79bb      	ldrb	r3, [r7, #6]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d126      	bne.n	8001564 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d00e      	beq.n	800153c <SD_disk_ioctl+0x50>
 800151e:	2b02      	cmp	r3, #2
 8001520:	d012      	beq.n	8001548 <SD_disk_ioctl+0x5c>
 8001522:	2b00      	cmp	r3, #0
 8001524:	d11a      	bne.n	800155c <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8001526:	f7ff fd0b 	bl	8000f40 <SD_CheckPower>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8001530:	f7ff fcfa 	bl	8000f28 <SD_PowerOff>
      res = RES_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800153a:	e0fc      	b.n	8001736 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 800153c:	f7ff fca8 	bl	8000e90 <SD_PowerOn>
      res = RES_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001546:	e0f6      	b.n	8001736 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	1c5c      	adds	r4, r3, #1
 800154c:	f7ff fcf8 	bl	8000f40 <SD_CheckPower>
 8001550:	4603      	mov	r3, r0
 8001552:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001554:	2300      	movs	r3, #0
 8001556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800155a:	e0ec      	b.n	8001736 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 800155c:	2304      	movs	r3, #4
 800155e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001562:	e0e8      	b.n	8001736 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001564:	4b77      	ldr	r3, [pc, #476]	; (8001744 <SD_disk_ioctl+0x258>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8001572:	2303      	movs	r3, #3
 8001574:	e0e1      	b.n	800173a <SD_disk_ioctl+0x24e>
    
    SELECT();
 8001576:	f7ff fc11 	bl	8000d9c <SELECT>
    
    switch (ctrl) 
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	2b0d      	cmp	r3, #13
 800157e:	f200 80cb 	bhi.w	8001718 <SD_disk_ioctl+0x22c>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <SD_disk_ioctl+0x9c>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001683 	.word	0x08001683
 800158c:	080015c1 	.word	0x080015c1
 8001590:	08001673 	.word	0x08001673
 8001594:	08001719 	.word	0x08001719
 8001598:	08001719 	.word	0x08001719
 800159c:	08001719 	.word	0x08001719
 80015a0:	08001719 	.word	0x08001719
 80015a4:	08001719 	.word	0x08001719
 80015a8:	08001719 	.word	0x08001719
 80015ac:	08001719 	.word	0x08001719
 80015b0:	08001719 	.word	0x08001719
 80015b4:	08001695 	.word	0x08001695
 80015b8:	080016b9 	.word	0x080016b9
 80015bc:	080016dd 	.word	0x080016dd
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80015c0:	2100      	movs	r1, #0
 80015c2:	2049      	movs	r0, #73	; 0x49
 80015c4:	f7ff fd52 	bl	800106c <SD_SendCmd>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 80a8 	bne.w	8001720 <SD_disk_ioctl+0x234>
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2110      	movs	r1, #16
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fcbe 	bl	8000f58 <SD_RxDataBlock>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 809e 	beq.w	8001720 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	099b      	lsrs	r3, r3, #6
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d10e      	bne.n	800160c <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80015ee:	7d7b      	ldrb	r3, [r7, #21]
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	7d3b      	ldrb	r3, [r7, #20]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001602:	8bfb      	ldrh	r3, [r7, #30]
 8001604:	029a      	lsls	r2, r3, #10
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e02e      	b.n	800166a <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800160c:	7c7b      	ldrb	r3, [r7, #17]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	b2da      	uxtb	r2, r3
 8001614:	7dbb      	ldrb	r3, [r7, #22]
 8001616:	09db      	lsrs	r3, r3, #7
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4413      	add	r3, r2
 800161c:	b2da      	uxtb	r2, r3
 800161e:	7d7b      	ldrb	r3, [r7, #21]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f003 0306 	and.w	r3, r3, #6
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b2db      	uxtb	r3, r3
 800162e:	3302      	adds	r3, #2
 8001630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001634:	7d3b      	ldrb	r3, [r7, #20]
 8001636:	099b      	lsrs	r3, r3, #6
 8001638:	b2db      	uxtb	r3, r3
 800163a:	b29a      	uxth	r2, r3
 800163c:	7cfb      	ldrb	r3, [r7, #19]
 800163e:	b29b      	uxth	r3, r3
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	b29b      	uxth	r3, r3
 8001644:	4413      	add	r3, r2
 8001646:	b29a      	uxth	r2, r3
 8001648:	7cbb      	ldrb	r3, [r7, #18]
 800164a:	029b      	lsls	r3, r3, #10
 800164c:	b29b      	uxth	r3, r3
 800164e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001652:	b29b      	uxth	r3, r3
 8001654:	4413      	add	r3, r2
 8001656:	b29b      	uxth	r3, r3
 8001658:	3301      	adds	r3, #1
 800165a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800165c:	8bfa      	ldrh	r2, [r7, #30]
 800165e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001662:	3b09      	subs	r3, #9
 8001664:	409a      	lsls	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001670:	e056      	b.n	8001720 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001678:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001680:	e055      	b.n	800172e <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001682:	f7ff fbe9 	bl	8000e58 <SD_ReadyWait>
 8001686:	4603      	mov	r3, r0
 8001688:	2bff      	cmp	r3, #255	; 0xff
 800168a:	d14b      	bne.n	8001724 <SD_disk_ioctl+0x238>
        res = RES_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001692:	e047      	b.n	8001724 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001694:	2100      	movs	r1, #0
 8001696:	2049      	movs	r0, #73	; 0x49
 8001698:	f7ff fce8 	bl	800106c <SD_SendCmd>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d142      	bne.n	8001728 <SD_disk_ioctl+0x23c>
 80016a2:	2110      	movs	r1, #16
 80016a4:	6a38      	ldr	r0, [r7, #32]
 80016a6:	f7ff fc57 	bl	8000f58 <SD_RxDataBlock>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d03b      	beq.n	8001728 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016b6:	e037      	b.n	8001728 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80016b8:	2100      	movs	r1, #0
 80016ba:	204a      	movs	r0, #74	; 0x4a
 80016bc:	f7ff fcd6 	bl	800106c <SD_SendCmd>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d132      	bne.n	800172c <SD_disk_ioctl+0x240>
 80016c6:	2110      	movs	r1, #16
 80016c8:	6a38      	ldr	r0, [r7, #32]
 80016ca:	f7ff fc45 	bl	8000f58 <SD_RxDataBlock>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d02b      	beq.n	800172c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016da:	e027      	b.n	800172c <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80016dc:	2100      	movs	r1, #0
 80016de:	207a      	movs	r0, #122	; 0x7a
 80016e0:	f7ff fcc4 	bl	800106c <SD_SendCmd>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d116      	bne.n	8001718 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016f0:	e00b      	b.n	800170a <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 80016f2:	6a3c      	ldr	r4, [r7, #32]
 80016f4:	1c63      	adds	r3, r4, #1
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	f7ff fb82 	bl	8000e00 <SPI_RxByte>
 80016fc:	4603      	mov	r3, r0
 80016fe:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001700:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001704:	3301      	adds	r3, #1
 8001706:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800170a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800170e:	2b03      	cmp	r3, #3
 8001710:	d9ef      	bls.n	80016f2 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001718:	2304      	movs	r3, #4
 800171a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800171e:	e006      	b.n	800172e <SD_disk_ioctl+0x242>
      break;
 8001720:	bf00      	nop
 8001722:	e004      	b.n	800172e <SD_disk_ioctl+0x242>
      break;
 8001724:	bf00      	nop
 8001726:	e002      	b.n	800172e <SD_disk_ioctl+0x242>
      break;
 8001728:	bf00      	nop
 800172a:	e000      	b.n	800172e <SD_disk_ioctl+0x242>
      break;
 800172c:	bf00      	nop
    }
    
    DESELECT();
 800172e:	f7ff fb41 	bl	8000db4 <DESELECT>
    SPI_RxByte();
 8001732:	f7ff fb65 	bl	8000e00 <SPI_RxByte>
  }
  
  return res;
 8001736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800173a:	4618      	mov	r0, r3
 800173c:	372c      	adds	r7, #44	; 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}
 8001742:	bf00      	nop
 8001744:	20000000 	.word	0x20000000

08001748 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Value2_4 = 0;
uint32_t difference_4 = 0;
uint32_t frequency_4 = 0;
uint8_t is_first_4 = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { //input capture callback
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	if (initialized) {
 8001750:	4b94      	ldr	r3, [pc, #592]	; (80019a4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 8120 	beq.w	800199a <HAL_TIM_IC_CaptureCallback+0x252>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7f1b      	ldrb	r3, [r3, #28]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d143      	bne.n	80017ea <HAL_TIM_IC_CaptureCallback+0xa2>
			if (is_first_1 == 0) {
 8001762:	4b91      	ldr	r3, [pc, #580]	; (80019a8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10a      	bne.n	8001780 <HAL_TIM_IC_CaptureCallback+0x38>
				IC_Value1_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800176a:	2100      	movs	r1, #0
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f005 fdb9 	bl	80072e4 <HAL_TIM_ReadCapturedValue>
 8001772:	4602      	mov	r2, r0
 8001774:	4b8d      	ldr	r3, [pc, #564]	; (80019ac <HAL_TIM_IC_CaptureCallback+0x264>)
 8001776:	601a      	str	r2, [r3, #0]
				is_first_1 = 1;
 8001778:	4b8b      	ldr	r3, [pc, #556]	; (80019a8 <HAL_TIM_IC_CaptureCallback+0x260>)
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	e034      	b.n	80017ea <HAL_TIM_IC_CaptureCallback+0xa2>
			} else if (is_first_1 == 1) {
 8001780:	4b89      	ldr	r3, [pc, #548]	; (80019a8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d130      	bne.n	80017ea <HAL_TIM_IC_CaptureCallback+0xa2>
				IC_Value2_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001788:	2100      	movs	r1, #0
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f005 fdaa 	bl	80072e4 <HAL_TIM_ReadCapturedValue>
 8001790:	4602      	mov	r2, r0
 8001792:	4b87      	ldr	r3, [pc, #540]	; (80019b0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001794:	601a      	str	r2, [r3, #0]
				if (IC_Value2_1 > IC_Value1_1) {
 8001796:	4b86      	ldr	r3, [pc, #536]	; (80019b0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b84      	ldr	r3, [pc, #528]	; (80019ac <HAL_TIM_IC_CaptureCallback+0x264>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d907      	bls.n	80017b2 <HAL_TIM_IC_CaptureCallback+0x6a>
					difference_1 = IC_Value2_1 - IC_Value1_1;
 80017a2:	4b83      	ldr	r3, [pc, #524]	; (80019b0 <HAL_TIM_IC_CaptureCallback+0x268>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b81      	ldr	r3, [pc, #516]	; (80019ac <HAL_TIM_IC_CaptureCallback+0x264>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	4a81      	ldr	r2, [pc, #516]	; (80019b4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	e011      	b.n	80017d6 <HAL_TIM_IC_CaptureCallback+0x8e>
				} else if (IC_Value2_1 < IC_Value1_1) {
 80017b2:	4b7f      	ldr	r3, [pc, #508]	; (80019b0 <HAL_TIM_IC_CaptureCallback+0x268>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b7d      	ldr	r3, [pc, #500]	; (80019ac <HAL_TIM_IC_CaptureCallback+0x264>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d209      	bcs.n	80017d2 <HAL_TIM_IC_CaptureCallback+0x8a>
					difference_1 = ((0xffff - IC_Value1_1) + IC_Value2_1) + 1;
 80017be:	4b7c      	ldr	r3, [pc, #496]	; (80019b0 <HAL_TIM_IC_CaptureCallback+0x268>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b7a      	ldr	r3, [pc, #488]	; (80019ac <HAL_TIM_IC_CaptureCallback+0x264>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80017cc:	4a79      	ldr	r2, [pc, #484]	; (80019b4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	e001      	b.n	80017d6 <HAL_TIM_IC_CaptureCallback+0x8e>
				} else {
					Error_Handler();
 80017d2:	f000 ffd1 	bl	8002778 <Error_Handler>
				}
				//frequency = apb2 tim clock/difference
				frequency_1 = 72000000 / difference_1 / 1000;
 80017d6:	4b77      	ldr	r3, [pc, #476]	; (80019b4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a77      	ldr	r2, [pc, #476]	; (80019b8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	4a76      	ldr	r2, [pc, #472]	; (80019bc <HAL_TIM_IC_CaptureCallback+0x274>)
 80017e2:	6013      	str	r3, [r2, #0]
				is_first_1 = 0;
 80017e4:	4b70      	ldr	r3, [pc, #448]	; (80019a8 <HAL_TIM_IC_CaptureCallback+0x260>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7f1b      	ldrb	r3, [r3, #28]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d143      	bne.n	800187a <HAL_TIM_IC_CaptureCallback+0x132>
			if (is_first_2 == 0) {
 80017f2:	4b73      	ldr	r3, [pc, #460]	; (80019c0 <HAL_TIM_IC_CaptureCallback+0x278>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10a      	bne.n	8001810 <HAL_TIM_IC_CaptureCallback+0xc8>
				IC_Value1_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80017fa:	2104      	movs	r1, #4
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f005 fd71 	bl	80072e4 <HAL_TIM_ReadCapturedValue>
 8001802:	4602      	mov	r2, r0
 8001804:	4b6f      	ldr	r3, [pc, #444]	; (80019c4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001806:	601a      	str	r2, [r3, #0]
				is_first_2 = 1;
 8001808:	4b6d      	ldr	r3, [pc, #436]	; (80019c0 <HAL_TIM_IC_CaptureCallback+0x278>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e034      	b.n	800187a <HAL_TIM_IC_CaptureCallback+0x132>
			} else if (is_first_2 == 1) {
 8001810:	4b6b      	ldr	r3, [pc, #428]	; (80019c0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d130      	bne.n	800187a <HAL_TIM_IC_CaptureCallback+0x132>
				IC_Value2_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001818:	2104      	movs	r1, #4
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f005 fd62 	bl	80072e4 <HAL_TIM_ReadCapturedValue>
 8001820:	4602      	mov	r2, r0
 8001822:	4b69      	ldr	r3, [pc, #420]	; (80019c8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001824:	601a      	str	r2, [r3, #0]
				if (IC_Value2_2 > IC_Value1_2) {
 8001826:	4b68      	ldr	r3, [pc, #416]	; (80019c8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b66      	ldr	r3, [pc, #408]	; (80019c4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d907      	bls.n	8001842 <HAL_TIM_IC_CaptureCallback+0xfa>
					difference_2 = IC_Value2_2 - IC_Value1_2;
 8001832:	4b65      	ldr	r3, [pc, #404]	; (80019c8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	4a63      	ldr	r2, [pc, #396]	; (80019cc <HAL_TIM_IC_CaptureCallback+0x284>)
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	e011      	b.n	8001866 <HAL_TIM_IC_CaptureCallback+0x11e>
				} else if (IC_Value2_2 < IC_Value1_2) {
 8001842:	4b61      	ldr	r3, [pc, #388]	; (80019c8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b5f      	ldr	r3, [pc, #380]	; (80019c4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d209      	bcs.n	8001862 <HAL_TIM_IC_CaptureCallback+0x11a>
					difference_2 = ((0xffff - IC_Value1_2) + IC_Value2_2) + 1;
 800184e:	4b5e      	ldr	r3, [pc, #376]	; (80019c8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b5c      	ldr	r3, [pc, #368]	; (80019c4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800185c:	4a5b      	ldr	r2, [pc, #364]	; (80019cc <HAL_TIM_IC_CaptureCallback+0x284>)
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e001      	b.n	8001866 <HAL_TIM_IC_CaptureCallback+0x11e>
				} else {
					Error_Handler();
 8001862:	f000 ff89 	bl	8002778 <Error_Handler>
				}
				//frequency = apb2 tim clock/difference
				frequency_2 = 72000000 / difference_2 / 1000;
 8001866:	4b59      	ldr	r3, [pc, #356]	; (80019cc <HAL_TIM_IC_CaptureCallback+0x284>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a53      	ldr	r2, [pc, #332]	; (80019b8 <HAL_TIM_IC_CaptureCallback+0x270>)
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	4a57      	ldr	r2, [pc, #348]	; (80019d0 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001872:	6013      	str	r3, [r2, #0]
				is_first_2 = 0;
 8001874:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7f1b      	ldrb	r3, [r3, #28]
 800187e:	2b04      	cmp	r3, #4
 8001880:	d143      	bne.n	800190a <HAL_TIM_IC_CaptureCallback+0x1c2>
			if (is_first_3 == 0) {
 8001882:	4b54      	ldr	r3, [pc, #336]	; (80019d4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10a      	bne.n	80018a0 <HAL_TIM_IC_CaptureCallback+0x158>
				IC_Value1_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800188a:	2108      	movs	r1, #8
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f005 fd29 	bl	80072e4 <HAL_TIM_ReadCapturedValue>
 8001892:	4602      	mov	r2, r0
 8001894:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001896:	601a      	str	r2, [r3, #0]
				is_first_3 = 1;
 8001898:	4b4e      	ldr	r3, [pc, #312]	; (80019d4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	e034      	b.n	800190a <HAL_TIM_IC_CaptureCallback+0x1c2>
			} else if (is_first_3 == 1) {
 80018a0:	4b4c      	ldr	r3, [pc, #304]	; (80019d4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d130      	bne.n	800190a <HAL_TIM_IC_CaptureCallback+0x1c2>
				IC_Value2_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80018a8:	2108      	movs	r1, #8
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f005 fd1a 	bl	80072e4 <HAL_TIM_ReadCapturedValue>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <HAL_TIM_IC_CaptureCallback+0x294>)
 80018b4:	601a      	str	r2, [r3, #0]
				if (IC_Value2_3 > IC_Value1_3) {
 80018b6:	4b49      	ldr	r3, [pc, #292]	; (80019dc <HAL_TIM_IC_CaptureCallback+0x294>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d907      	bls.n	80018d2 <HAL_TIM_IC_CaptureCallback+0x18a>
					difference_3 = IC_Value2_3 - IC_Value1_3;
 80018c2:	4b46      	ldr	r3, [pc, #280]	; (80019dc <HAL_TIM_IC_CaptureCallback+0x294>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	4a44      	ldr	r2, [pc, #272]	; (80019e0 <HAL_TIM_IC_CaptureCallback+0x298>)
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	e011      	b.n	80018f6 <HAL_TIM_IC_CaptureCallback+0x1ae>
				} else if (IC_Value2_3 < IC_Value1_3) {
 80018d2:	4b42      	ldr	r3, [pc, #264]	; (80019dc <HAL_TIM_IC_CaptureCallback+0x294>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d209      	bcs.n	80018f2 <HAL_TIM_IC_CaptureCallback+0x1aa>
					difference_3 = ((0xffff - IC_Value1_3) + IC_Value2_3) + 1;
 80018de:	4b3f      	ldr	r3, [pc, #252]	; (80019dc <HAL_TIM_IC_CaptureCallback+0x294>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018ec:	4a3c      	ldr	r2, [pc, #240]	; (80019e0 <HAL_TIM_IC_CaptureCallback+0x298>)
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e001      	b.n	80018f6 <HAL_TIM_IC_CaptureCallback+0x1ae>
				} else {
					Error_Handler();
 80018f2:	f000 ff41 	bl	8002778 <Error_Handler>
				}
				//frequency = apb2 tim clock/difference
				frequency_3 = 72000000 / difference_3 / 1000;
 80018f6:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <HAL_TIM_IC_CaptureCallback+0x298>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80018fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001900:	4a38      	ldr	r2, [pc, #224]	; (80019e4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001902:	6013      	str	r3, [r2, #0]
				is_first_3 = 0;
 8001904:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
			}
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7f1b      	ldrb	r3, [r3, #28]
 800190e:	2b08      	cmp	r3, #8
 8001910:	d143      	bne.n	800199a <HAL_TIM_IC_CaptureCallback+0x252>
			if (is_first_4 == 0) {
 8001912:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10a      	bne.n	8001930 <HAL_TIM_IC_CaptureCallback+0x1e8>
				IC_Value1_4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800191a:	210c      	movs	r1, #12
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f005 fce1 	bl	80072e4 <HAL_TIM_ReadCapturedValue>
 8001922:	4602      	mov	r2, r0
 8001924:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001926:	601a      	str	r2, [r3, #0]
				is_first_4 = 1;
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
				frequency_4 = 72000000 / difference_4 / 1000;
				is_first_4 = 0;
			}
		}
	}
}
 800192e:	e034      	b.n	800199a <HAL_TIM_IC_CaptureCallback+0x252>
			} else if (is_first_4 == 1) {
 8001930:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d130      	bne.n	800199a <HAL_TIM_IC_CaptureCallback+0x252>
				IC_Value2_4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001938:	210c      	movs	r1, #12
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f005 fcd2 	bl	80072e4 <HAL_TIM_ReadCapturedValue>
 8001940:	4602      	mov	r2, r0
 8001942:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001944:	601a      	str	r2, [r3, #0]
				if (IC_Value2_4 > IC_Value1_4) {
 8001946:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b28      	ldr	r3, [pc, #160]	; (80019ec <HAL_TIM_IC_CaptureCallback+0x2a4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d907      	bls.n	8001962 <HAL_TIM_IC_CaptureCallback+0x21a>
					difference_4 = IC_Value2_4 - IC_Value1_4;
 8001952:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b25      	ldr	r3, [pc, #148]	; (80019ec <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e011      	b.n	8001986 <HAL_TIM_IC_CaptureCallback+0x23e>
				} else if (IC_Value2_4 < IC_Value1_4) {
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d209      	bcs.n	8001982 <HAL_TIM_IC_CaptureCallback+0x23a>
					difference_4 = ((0xffff - IC_Value1_4) + IC_Value2_4) + 1;
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800197c:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e001      	b.n	8001986 <HAL_TIM_IC_CaptureCallback+0x23e>
					Error_Handler();
 8001982:	f000 fef9 	bl	8002778 <Error_Handler>
				frequency_4 = 72000000 / difference_4 / 1000;
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HAL_TIM_IC_CaptureCallback+0x270>)
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	4a19      	ldr	r2, [pc, #100]	; (80019f8 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8001992:	6013      	str	r3, [r2, #0]
				is_first_4 = 0;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200000b0 	.word	0x200000b0
 80019a8:	200000c4 	.word	0x200000c4
 80019ac:	200000b4 	.word	0x200000b4
 80019b0:	200000b8 	.word	0x200000b8
 80019b4:	200000bc 	.word	0x200000bc
 80019b8:	00011940 	.word	0x00011940
 80019bc:	200000c0 	.word	0x200000c0
 80019c0:	200000d8 	.word	0x200000d8
 80019c4:	200000c8 	.word	0x200000c8
 80019c8:	200000cc 	.word	0x200000cc
 80019cc:	200000d0 	.word	0x200000d0
 80019d0:	200000d4 	.word	0x200000d4
 80019d4:	200000ec 	.word	0x200000ec
 80019d8:	200000dc 	.word	0x200000dc
 80019dc:	200000e0 	.word	0x200000e0
 80019e0:	200000e4 	.word	0x200000e4
 80019e4:	200000e8 	.word	0x200000e8
 80019e8:	20000100 	.word	0x20000100
 80019ec:	200000f0 	.word	0x200000f0
 80019f0:	200000f4 	.word	0x200000f4
 80019f4:	200000f8 	.word	0x200000f8
 80019f8:	200000fc 	.word	0x200000fc

080019fc <send_uart>:

void send_uart(char *string) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7fe fc03 	bl	8000210 <strlen>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 100);
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	2364      	movs	r3, #100	; 0x64
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4803      	ldr	r0, [pc, #12]	; (8001a24 <send_uart+0x28>)
 8001a18:	f005 ff93 	bl	8007942 <HAL_UART_Transmit>
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000224c 	.word	0x2000224c

08001a28 <read_uart>:

void read_uart(char *response) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	6018      	str	r0, [r3, #0]
	uint8_t buffer[1024];
	HAL_StatusTypeDef uart_response = HAL_UART_Receive(&huart2, buffer,
 8001a34:	f107 0108 	add.w	r1, r7, #8
 8001a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a40:	4814      	ldr	r0, [pc, #80]	; (8001a94 <read_uart+0x6c>)
 8001a42:	f006 f817 	bl	8007a74 <HAL_UART_Receive>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
			sizeof(buffer), 1000);
	if (uart_response == HAL_OK) {
 8001a4c:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d119      	bne.n	8001a88 <read_uart+0x60>
		for (int i = 0; i < sizeof(buffer); ++i)
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001a5a:	e010      	b.n	8001a7e <read_uart+0x56>
			response[i] = buffer[i];
 8001a5c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001a60:	1d3a      	adds	r2, r7, #4
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	4413      	add	r3, r2
 8001a66:	f107 0108 	add.w	r1, r7, #8
 8001a6a:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8001a6e:	440a      	add	r2, r1
 8001a70:	7812      	ldrb	r2, [r2, #0]
 8001a72:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(buffer); ++i)
 8001a74:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001a7e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d3e9      	bcc.n	8001a5c <read_uart+0x34>
		;
	}
}
 8001a88:	bf00      	nop
 8001a8a:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000224c 	.word	0x2000224c

08001a98 <HAL_TIM_PeriodElapsedCallback>:

//Function called by 50Hz timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af06      	add	r7, sp, #24
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	6018      	str	r0, [r3, #0]
	if (initialized) {
 8001aaa:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d045      	beq.n	8001b3e <HAL_TIM_PeriodElapsedCallback+0xa6>
		A0 = raw_A0;
 8001ab2:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a27      	ldr	r2, [pc, #156]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ab8:	6013      	str	r3, [r2, #0]
		A1 = raw_A1;
 8001aba:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a27      	ldr	r2, [pc, #156]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ac0:	6013      	str	r3, [r2, #0]

		char *msg[2048];
		get_time();
 8001ac2:	f000 f863 	bl	8001b8c <get_time>
		sprintf(msg, "%s,%s,%s,%s,%d,%d,%d\n", timestamp, latitude, longitude,
 8001ac6:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001acc:	6812      	ldr	r2, [r2, #0]
				altitude, A0, A1, CANresponse[0]);
 8001ace:	4924      	ldr	r1, [pc, #144]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ad0:	7809      	ldrb	r1, [r1, #0]
		sprintf(msg, "%s,%s,%s,%s,%d,%d,%d\n", timestamp, latitude, longitude,
 8001ad2:	f107 0008 	add.w	r0, r7, #8
 8001ad6:	9104      	str	r1, [sp, #16]
 8001ad8:	9203      	str	r2, [sp, #12]
 8001ada:	9302      	str	r3, [sp, #8]
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ae6:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001ae8:	4922      	ldr	r1, [pc, #136]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001aea:	f009 fe69 	bl	800b7c0 <siprintf>
		fresult = f_write(&fil, msg, strlen(msg), &bw);
 8001aee:	f107 0308 	add.w	r3, r7, #8
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fb8c 	bl	8000210 <strlen>
 8001af8:	4602      	mov	r2, r0
 8001afa:	f107 0108 	add.w	r1, r7, #8
 8001afe:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b00:	481e      	ldr	r0, [pc, #120]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b02:	f009 f9da 	bl	800aeba <f_write>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b0c:	701a      	strb	r2, [r3, #0]
		counter--;
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b16:	6013      	str	r3, [r2, #0]
		if (counter == 0) { //10hz function
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10e      	bne.n	8001b3e <HAL_TIM_PeriodElapsedCallback+0xa6>
			f_close(&fil);
 8001b20:	4816      	ldr	r0, [pc, #88]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b22:	f009 fbdc 	bl	800b2de <f_close>
			fresult = f_open(&fil, datalogName,
 8001b26:	2233      	movs	r2, #51	; 0x33
 8001b28:	4917      	ldr	r1, [pc, #92]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b2a:	4814      	ldr	r0, [pc, #80]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b2c:	f008 fe9a 	bl	800a864 <f_open>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b36:	701a      	strb	r2, [r3, #0]
			FA_OPEN_APPEND | FA_READ | FA_WRITE);
			counter = 5;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b3a:	2205      	movs	r2, #5
 8001b3c:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001b3e:	bf00      	nop
 8001b40:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200000b0 	.word	0x200000b0
 8001b50:	200017b4 	.word	0x200017b4
 8001b54:	200017b8 	.word	0x200017b8
 8001b58:	20000348 	.word	0x20000348
 8001b5c:	2000331c 	.word	0x2000331c
 8001b60:	200022b8 	.word	0x200022b8
 8001b64:	20001980 	.word	0x20001980
 8001b68:	2000192c 	.word	0x2000192c
 8001b6c:	20001998 	.word	0x20001998
 8001b70:	2000074c 	.word	0x2000074c
 8001b74:	0800c0c8 	.word	0x0800c0c8
 8001b78:	20001994 	.word	0x20001994
 8001b7c:	200022ec 	.word	0x200022ec
 8001b80:	200019b0 	.word	0x200019b0
 8001b84:	20000004 	.word	0x20000004
 8001b88:	20001800 	.word	0x20001800

08001b8c <get_time>:

//Function to get time from RTC
void get_time(void) {
 8001b8c:	b5b0      	push	{r4, r5, r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af04      	add	r7, sp, #16
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001b92:	463b      	mov	r3, r7
 8001b94:	2200      	movs	r2, #0
 8001b96:	4619      	mov	r1, r3
 8001b98:	4812      	ldr	r0, [pc, #72]	; (8001be4 <get_time+0x58>)
 8001b9a:	f004 fb13 	bl	80061c4 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480f      	ldr	r0, [pc, #60]	; (8001be4 <get_time+0x58>)
 8001ba8:	f004 fc11 	bl	80063ce <HAL_RTC_GetDate>
	/* Display time Format: hh:mm:ss */
	sprintf((char*) timestamp, "%02d-%02d-%02d_%02d-%02d-%2d", gTime.Hours,
 8001bac:	783b      	ldrb	r3, [r7, #0]
 8001bae:	461c      	mov	r4, r3
			gTime.Minutes, gTime.Seconds, gDate.Date, gDate.Month,
 8001bb0:	787b      	ldrb	r3, [r7, #1]
	sprintf((char*) timestamp, "%02d-%02d-%02d_%02d-%02d-%2d", gTime.Hours,
 8001bb2:	461d      	mov	r5, r3
			gTime.Minutes, gTime.Seconds, gDate.Date, gDate.Month,
 8001bb4:	78bb      	ldrb	r3, [r7, #2]
	sprintf((char*) timestamp, "%02d-%02d-%02d_%02d-%02d-%2d", gTime.Hours,
 8001bb6:	461a      	mov	r2, r3
			gTime.Minutes, gTime.Seconds, gDate.Date, gDate.Month,
 8001bb8:	7dbb      	ldrb	r3, [r7, #22]
	sprintf((char*) timestamp, "%02d-%02d-%02d_%02d-%02d-%2d", gTime.Hours,
 8001bba:	4619      	mov	r1, r3
			gTime.Minutes, gTime.Seconds, gDate.Date, gDate.Month,
 8001bbc:	7d7b      	ldrb	r3, [r7, #21]
	sprintf((char*) timestamp, "%02d-%02d-%02d_%02d-%02d-%2d", gTime.Hours,
 8001bbe:	4618      	mov	r0, r3
			2000 + gDate.Year);
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
	sprintf((char*) timestamp, "%02d-%02d-%02d_%02d-%02d-%2d", gTime.Hours,
 8001bc2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001bc6:	9303      	str	r3, [sp, #12]
 8001bc8:	9002      	str	r0, [sp, #8]
 8001bca:	9101      	str	r1, [sp, #4]
 8001bcc:	9200      	str	r2, [sp, #0]
 8001bce:	462b      	mov	r3, r5
 8001bd0:	4622      	mov	r2, r4
 8001bd2:	4905      	ldr	r1, [pc, #20]	; (8001be8 <get_time+0x5c>)
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <get_time+0x60>)
 8001bd6:	f009 fdf3 	bl	800b7c0 <siprintf>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bdb0      	pop	{r4, r5, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000190c 	.word	0x2000190c
 8001be8:	0800c0e0 	.word	0x0800c0e0
 8001bec:	2000074c 	.word	0x2000074c

08001bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf8:	f001 f98c 	bl	8002f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bfc:	f000 f988 	bl	8001f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c00:	f000 fcb0 	bl	8002564 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c04:	f000 fc8e 	bl	8002524 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c08:	f000 fa10 	bl	800202c <MX_ADC1_Init>
  MX_SPI1_Init();
 8001c0c:	f000 fb0c 	bl	8002228 <MX_SPI1_Init>
  MX_TIM6_Init();
 8001c10:	f000 fbfe 	bl	8002410 <MX_TIM6_Init>
  MX_FATFS_Init();
 8001c14:	f006 fb9a 	bl	800834c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8001c18:	f000 fc30 	bl	800247c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001c1c:	f000 fa9c 	bl	8002158 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001c20:	f000 fc56 	bl	80024d0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001c24:	f000 fa62 	bl	80020ec <MX_CAN1_Init>
  MX_TIM2_Init();
 8001c28:	f000 fb34 	bl	8002294 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c2c:	f000 fb90 	bl	8002350 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	CAN_FilterTypeDef filterConfig;

	filterConfig.FilterBank = 14;
 8001c30:	230e      	movs	r3, #14
 8001c32:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	filterConfig.FilterActivation = ENABLE;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
	filterConfig.FilterFIFOAssignment = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	filterConfig.FilterMaskIdLow = 0x0000;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	filterConfig.FilterMaskIdHigh = 0x0000;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	filterConfig.FilterIdHigh = 0x0000;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
	filterConfig.FilterIdLow = 0x0000;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8001c66:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	488b      	ldr	r0, [pc, #556]	; (8001e9c <main+0x2ac>)
 8001c6e:	f001 feaf 	bl	80039d0 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan1);
 8001c72:	488a      	ldr	r0, [pc, #552]	; (8001e9c <main+0x2ac>)
 8001c74:	f001 ff8c 	bl	8003b90 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001c78:	2102      	movs	r1, #2
 8001c7a:	4888      	ldr	r0, [pc, #544]	; (8001e9c <main+0x2ac>)
 8001c7c:	f002 f8de 	bl	8003e3c <HAL_CAN_ActivateNotification>

	//Enable timer interrupts
	HAL_TIM_Base_Start_IT(&htim6);
 8001c80:	4887      	ldr	r0, [pc, #540]	; (8001ea0 <main+0x2b0>)
 8001c82:	f005 f8d4 	bl	8006e2e <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c8a:	4986      	ldr	r1, [pc, #536]	; (8001ea4 <main+0x2b4>)
 8001c8c:	4886      	ldr	r0, [pc, #536]	; (8001ea8 <main+0x2b8>)
 8001c8e:	f001 f9f7 	bl	8003080 <HAL_ADC_Start_DMA>

	//ENable PWM Interrupt
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001c92:	210c      	movs	r1, #12
 8001c94:	4885      	ldr	r0, [pc, #532]	; (8001eac <main+0x2bc>)
 8001c96:	f005 f919 	bl	8006ecc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001c9a:	2108      	movs	r1, #8
 8001c9c:	4883      	ldr	r0, [pc, #524]	; (8001eac <main+0x2bc>)
 8001c9e:	f005 f915 	bl	8006ecc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4882      	ldr	r0, [pc, #520]	; (8001eb0 <main+0x2c0>)
 8001ca6:	f005 f911 	bl	8006ecc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001caa:	2104      	movs	r1, #4
 8001cac:	4880      	ldr	r0, [pc, #512]	; (8001eb0 <main+0x2c0>)
 8001cae:	f005 f90d 	bl	8006ecc <HAL_TIM_IC_Start_IT>

	get_time();
 8001cb2:	f7ff ff6b 	bl	8001b8c <get_time>
	sprintf(datalogName, "datalog_%s.csv", timestamp);
 8001cb6:	4a7f      	ldr	r2, [pc, #508]	; (8001eb4 <main+0x2c4>)
 8001cb8:	497f      	ldr	r1, [pc, #508]	; (8001eb8 <main+0x2c8>)
 8001cba:	4880      	ldr	r0, [pc, #512]	; (8001ebc <main+0x2cc>)
 8001cbc:	f009 fd80 	bl	800b7c0 <siprintf>

	//Mount SD Card
	fresult = f_mount(&fs, "", 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	497f      	ldr	r1, [pc, #508]	; (8001ec0 <main+0x2d0>)
 8001cc4:	487f      	ldr	r0, [pc, #508]	; (8001ec4 <main+0x2d4>)
 8001cc6:	f008 fd87 	bl	800a7d8 <f_mount>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b7e      	ldr	r3, [pc, #504]	; (8001ec8 <main+0x2d8>)
 8001cd0:	701a      	strb	r2, [r3, #0]
//		send_uart("SD CARD mounted....\n");

	//gps stuff can go here

	//Get total and free space
	f_getfree("", &fre_clust, &pfs);
 8001cd2:	4a7e      	ldr	r2, [pc, #504]	; (8001ecc <main+0x2dc>)
 8001cd4:	497e      	ldr	r1, [pc, #504]	; (8001ed0 <main+0x2e0>)
 8001cd6:	487a      	ldr	r0, [pc, #488]	; (8001ec0 <main+0x2d0>)
 8001cd8:	f009 fb2b 	bl	800b332 <f_getfree>
	total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001cdc:	4b7b      	ldr	r3, [pc, #492]	; (8001ecc <main+0x2dc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	3b02      	subs	r3, #2
 8001ce4:	4a79      	ldr	r2, [pc, #484]	; (8001ecc <main+0x2dc>)
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	8952      	ldrh	r2, [r2, #10]
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fc28 	bl	8000544 <__aeabi_ui2d>
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b76      	ldr	r3, [pc, #472]	; (8001ed4 <main+0x2e4>)
 8001cfa:	f7fe fc9d 	bl	8000638 <__aeabi_dmul>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	460c      	mov	r4, r1
 8001d02:	4618      	mov	r0, r3
 8001d04:	4621      	mov	r1, r4
 8001d06:	f7fe fea9 	bl	8000a5c <__aeabi_d2uiz>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4b72      	ldr	r3, [pc, #456]	; (8001ed8 <main+0x2e8>)
 8001d0e:	601a      	str	r2, [r3, #0]
	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001d10:	4b6e      	ldr	r3, [pc, #440]	; (8001ecc <main+0x2dc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	895b      	ldrh	r3, [r3, #10]
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b6d      	ldr	r3, [pc, #436]	; (8001ed0 <main+0x2e0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	fb03 f302 	mul.w	r3, r3, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fc0f 	bl	8000544 <__aeabi_ui2d>
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <main+0x2e4>)
 8001d2c:	f7fe fc84 	bl	8000638 <__aeabi_dmul>
 8001d30:	4603      	mov	r3, r0
 8001d32:	460c      	mov	r4, r1
 8001d34:	4618      	mov	r0, r3
 8001d36:	4621      	mov	r1, r4
 8001d38:	f7fe fe90 	bl	8000a5c <__aeabi_d2uiz>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b67      	ldr	r3, [pc, #412]	; (8001edc <main+0x2ec>)
 8001d40:	601a      	str	r2, [r3, #0]

	//Open and read the config file from the SD card
	fresult = f_open(&fil, "config_DO_NOT_DELETE_YOU_MONKEYS.txt",
 8001d42:	2201      	movs	r2, #1
 8001d44:	4966      	ldr	r1, [pc, #408]	; (8001ee0 <main+0x2f0>)
 8001d46:	4867      	ldr	r0, [pc, #412]	; (8001ee4 <main+0x2f4>)
 8001d48:	f008 fd8c 	bl	800a864 <f_open>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b5d      	ldr	r3, [pc, #372]	; (8001ec8 <main+0x2d8>)
 8001d52:	701a      	strb	r2, [r3, #0]
	FA_OPEN_EXISTING | FA_READ);
	if (fresult == FR_OK) {
 8001d54:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <main+0x2d8>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d122      	bne.n	8001da2 <main+0x1b2>
		f_gets(headers, 1024, &fil);
 8001d5c:	4a61      	ldr	r2, [pc, #388]	; (8001ee4 <main+0x2f4>)
 8001d5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d62:	4861      	ldr	r0, [pc, #388]	; (8001ee8 <main+0x2f8>)
 8001d64:	f009 fb9a 	bl	800b49c <f_gets>
		f_close(&fil);
 8001d68:	485e      	ldr	r0, [pc, #376]	; (8001ee4 <main+0x2f4>)
 8001d6a:	f009 fab8 	bl	800b2de <f_close>
		//Write the headers into the file
		fresult = f_open(&fil, datalogName,
 8001d6e:	2233      	movs	r2, #51	; 0x33
 8001d70:	4952      	ldr	r1, [pc, #328]	; (8001ebc <main+0x2cc>)
 8001d72:	485c      	ldr	r0, [pc, #368]	; (8001ee4 <main+0x2f4>)
 8001d74:	f008 fd76 	bl	800a864 <f_open>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b52      	ldr	r3, [pc, #328]	; (8001ec8 <main+0x2d8>)
 8001d7e:	701a      	strb	r2, [r3, #0]
		FA_OPEN_APPEND | FA_READ | FA_WRITE);
		fresult = f_write(&fil, headers, strlen(headers), &bw);
 8001d80:	4859      	ldr	r0, [pc, #356]	; (8001ee8 <main+0x2f8>)
 8001d82:	f7fe fa45 	bl	8000210 <strlen>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b58      	ldr	r3, [pc, #352]	; (8001eec <main+0x2fc>)
 8001d8a:	4957      	ldr	r1, [pc, #348]	; (8001ee8 <main+0x2f8>)
 8001d8c:	4855      	ldr	r0, [pc, #340]	; (8001ee4 <main+0x2f4>)
 8001d8e:	f009 f894 	bl	800aeba <f_write>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <main+0x2d8>)
 8001d98:	701a      	strb	r2, [r3, #0]
		f_close(&fil);
 8001d9a:	4852      	ldr	r0, [pc, #328]	; (8001ee4 <main+0x2f4>)
 8001d9c:	f009 fa9f 	bl	800b2de <f_close>
 8001da0:	e015      	b.n	8001dce <main+0x1de>
	} else {
		fresult = f_open(&fil, datalogName,
 8001da2:	2233      	movs	r2, #51	; 0x33
 8001da4:	4945      	ldr	r1, [pc, #276]	; (8001ebc <main+0x2cc>)
 8001da6:	484f      	ldr	r0, [pc, #316]	; (8001ee4 <main+0x2f4>)
 8001da8:	f008 fd5c 	bl	800a864 <f_open>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b45      	ldr	r3, [pc, #276]	; (8001ec8 <main+0x2d8>)
 8001db2:	701a      	strb	r2, [r3, #0]
		FA_OPEN_APPEND | FA_READ | FA_WRITE);
		fresult =
				f_write(&fil,
 8001db4:	4b4d      	ldr	r3, [pc, #308]	; (8001eec <main+0x2fc>)
 8001db6:	224d      	movs	r2, #77	; 0x4d
 8001db8:	494d      	ldr	r1, [pc, #308]	; (8001ef0 <main+0x300>)
 8001dba:	484a      	ldr	r0, [pc, #296]	; (8001ee4 <main+0x2f4>)
 8001dbc:	f009 f87d 	bl	800aeba <f_write>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
		fresult =
 8001dc4:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <main+0x2d8>)
 8001dc6:	701a      	strb	r2, [r3, #0]
						"config_DO_NOT_DELETE_YOU_MONKEYS.txt not found did you delete it you monkey?\n",
						77, &bw);
		f_close(&fil);
 8001dc8:	4846      	ldr	r0, [pc, #280]	; (8001ee4 <main+0x2f4>)
 8001dca:	f009 fa88 	bl	800b2de <f_close>
	}
	char response[1024] = { 0 };
 8001dce:	463b      	mov	r3, r7
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2100      	movs	r1, #0
 8001dda:	f009 fce9 	bl	800b7b0 <memset>

	sprintf(latitude, "0.00");
 8001dde:	4b45      	ldr	r3, [pc, #276]	; (8001ef4 <main+0x304>)
 8001de0:	4a45      	ldr	r2, [pc, #276]	; (8001ef8 <main+0x308>)
 8001de2:	6810      	ldr	r0, [r2, #0]
 8001de4:	6018      	str	r0, [r3, #0]
 8001de6:	7912      	ldrb	r2, [r2, #4]
 8001de8:	711a      	strb	r2, [r3, #4]
	sprintf(longitude, "0.00");
 8001dea:	4b44      	ldr	r3, [pc, #272]	; (8001efc <main+0x30c>)
 8001dec:	4a42      	ldr	r2, [pc, #264]	; (8001ef8 <main+0x308>)
 8001dee:	6810      	ldr	r0, [r2, #0]
 8001df0:	6018      	str	r0, [r3, #0]
 8001df2:	7912      	ldrb	r2, [r2, #4]
 8001df4:	711a      	strb	r2, [r3, #4]
	sprintf(altitude, "0.00");
 8001df6:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <main+0x310>)
 8001df8:	4a3f      	ldr	r2, [pc, #252]	; (8001ef8 <main+0x308>)
 8001dfa:	6810      	ldr	r0, [r2, #0]
 8001dfc:	6018      	str	r0, [r3, #0]
 8001dfe:	7912      	ldrb	r2, [r2, #4]
 8001e00:	711a      	strb	r2, [r3, #4]

	fresult = f_open(&fil, datalogName,
 8001e02:	2233      	movs	r2, #51	; 0x33
 8001e04:	492d      	ldr	r1, [pc, #180]	; (8001ebc <main+0x2cc>)
 8001e06:	4837      	ldr	r0, [pc, #220]	; (8001ee4 <main+0x2f4>)
 8001e08:	f008 fd2c 	bl	800a864 <f_open>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <main+0x2d8>)
 8001e12:	701a      	strb	r2, [r3, #0]
	FA_OPEN_APPEND | FA_READ | FA_WRITE);
	initialized = 1;
 8001e14:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <main+0x314>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//Get position from GPS
		send_uart("log bestposa\n");
 8001e1a:	483b      	ldr	r0, [pc, #236]	; (8001f08 <main+0x318>)
 8001e1c:	f7ff fdee 	bl	80019fc <send_uart>
		read_uart(response);
 8001e20:	463b      	mov	r3, r7
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fe00 	bl	8001a28 <read_uart>
		char *token = strtok(response, ",");
 8001e28:	463b      	mov	r3, r7
 8001e2a:	4938      	ldr	r1, [pc, #224]	; (8001f0c <main+0x31c>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f009 fcfd 	bl	800b82c <strtok>
 8001e32:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
		// loop through the string to extract all other tokens
		int index = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
		while (token != NULL) {
 8001e3c:	e029      	b.n	8001e92 <main+0x2a2>
			token = strtok(NULL, ",");
 8001e3e:	4933      	ldr	r1, [pc, #204]	; (8001f0c <main+0x31c>)
 8001e40:	2000      	movs	r0, #0
 8001e42:	f009 fcf3 	bl	800b82c <strtok>
 8001e46:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
			if (index == 10)
 8001e4a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001e4e:	2b0a      	cmp	r3, #10
 8001e50:	d105      	bne.n	8001e5e <main+0x26e>
				strncpy(latitude, token, 20);
 8001e52:	2214      	movs	r2, #20
 8001e54:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 8001e58:	4826      	ldr	r0, [pc, #152]	; (8001ef4 <main+0x304>)
 8001e5a:	f009 fcd1 	bl	800b800 <strncpy>
			if (index == 11)
 8001e5e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001e62:	2b0b      	cmp	r3, #11
 8001e64:	d105      	bne.n	8001e72 <main+0x282>
				strncpy(longitude, token, 20);
 8001e66:	2214      	movs	r2, #20
 8001e68:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 8001e6c:	4823      	ldr	r0, [pc, #140]	; (8001efc <main+0x30c>)
 8001e6e:	f009 fcc7 	bl	800b800 <strncpy>
			if (index == 12) {
 8001e72:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d106      	bne.n	8001e88 <main+0x298>
				strncpy(altitude, token, 20);
 8001e7a:	2214      	movs	r2, #20
 8001e7c:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 8001e80:	481f      	ldr	r0, [pc, #124]	; (8001f00 <main+0x310>)
 8001e82:	f009 fcbd 	bl	800b800 <strncpy>
				break;
 8001e86:	e008      	b.n	8001e9a <main+0x2aa>
			}
			index++;
 8001e88:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
		while (token != NULL) {
 8001e92:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1d1      	bne.n	8001e3e <main+0x24e>
	while (1) {
 8001e9a:	e7be      	b.n	8001e1a <main+0x22a>
 8001e9c:	2000228c 	.word	0x2000228c
 8001ea0:	20001940 	.word	0x20001940
 8001ea4:	20001a0c 	.word	0x20001a0c
 8001ea8:	20001820 	.word	0x20001820
 8001eac:	2000220c 	.word	0x2000220c
 8001eb0:	200017c0 	.word	0x200017c0
 8001eb4:	2000074c 	.word	0x2000074c
 8001eb8:	0800c100 	.word	0x0800c100
 8001ebc:	20001800 	.word	0x20001800
 8001ec0:	0800c110 	.word	0x0800c110
 8001ec4:	20000760 	.word	0x20000760
 8001ec8:	200019b0 	.word	0x200019b0
 8001ecc:	200019ac 	.word	0x200019ac
 8001ed0:	20000344 	.word	0x20000344
 8001ed4:	3fe00000 	.word	0x3fe00000
 8001ed8:	200022b4 	.word	0x200022b4
 8001edc:	20001868 	.word	0x20001868
 8001ee0:	0800c114 	.word	0x0800c114
 8001ee4:	200022ec 	.word	0x200022ec
 8001ee8:	2000034c 	.word	0x2000034c
 8001eec:	20001994 	.word	0x20001994
 8001ef0:	0800c13c 	.word	0x0800c13c
 8001ef4:	20001998 	.word	0x20001998
 8001ef8:	0800c18c 	.word	0x0800c18c
 8001efc:	2000192c 	.word	0x2000192c
 8001f00:	20001980 	.word	0x20001980
 8001f04:	200000b0 	.word	0x200000b0
 8001f08:	0800c194 	.word	0x0800c194
 8001f0c:	0800c1a4 	.word	0x0800c1a4

08001f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b0ac      	sub	sp, #176	; 0xb0
 8001f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f1a:	2234      	movs	r2, #52	; 0x34
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f009 fc46 	bl	800b7b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	225c      	movs	r2, #92	; 0x5c
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f009 fc37 	bl	800b7b0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b37      	ldr	r3, [pc, #220]	; (8002024 <SystemClock_Config+0x114>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a36      	ldr	r2, [pc, #216]	; (8002024 <SystemClock_Config+0x114>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b34      	ldr	r3, [pc, #208]	; (8002024 <SystemClock_Config+0x114>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <SystemClock_Config+0x118>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f6a:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <SystemClock_Config+0x118>)
 8001f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <SystemClock_Config+0x118>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001f7e:	2306      	movs	r3, #6
 8001f80:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f82:	2301      	movs	r3, #1
 8001f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f8e:	2310      	movs	r3, #16
 8001f90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001fa6:	2348      	movs	r3, #72	; 0x48
 8001fa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fac:	2302      	movs	r3, #2
 8001fae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fbe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 fd56 	bl	8005a74 <HAL_RCC_OscConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fce:	f000 fbd3 	bl	8002778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fe8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fec:	2102      	movs	r1, #2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 ffaa 	bl	8004f48 <HAL_RCC_ClockConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001ffa:	f000 fbbd 	bl	8002778 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ffe:	2320      	movs	r3, #32
 8002000:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002006:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	4618      	mov	r0, r3
 800200e:	f003 f8b5 	bl	800517c <HAL_RCCEx_PeriphCLKConfig>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8002018:	f000 fbae 	bl	8002778 <Error_Handler>
  }
}
 800201c:	bf00      	nop
 800201e:	37b0      	adds	r7, #176	; 0xb0
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	40007000 	.word	0x40007000

0800202c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002032:	463b      	mov	r3, r7
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800203e:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <MX_ADC1_Init+0xb4>)
 8002040:	4a28      	ldr	r2, [pc, #160]	; (80020e4 <MX_ADC1_Init+0xb8>)
 8002042:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002044:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <MX_ADC1_Init+0xb4>)
 8002046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800204a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <MX_ADC1_Init+0xb4>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002052:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <MX_ADC1_Init+0xb4>)
 8002054:	2201      	movs	r2, #1
 8002056:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <MX_ADC1_Init+0xb4>)
 800205a:	2201      	movs	r2, #1
 800205c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <MX_ADC1_Init+0xb4>)
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <MX_ADC1_Init+0xb4>)
 8002068:	2200      	movs	r2, #0
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <MX_ADC1_Init+0xb4>)
 800206e:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <MX_ADC1_Init+0xbc>)
 8002070:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002072:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <MX_ADC1_Init+0xb4>)
 8002074:	2200      	movs	r2, #0
 8002076:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <MX_ADC1_Init+0xb4>)
 800207a:	2202      	movs	r2, #2
 800207c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <MX_ADC1_Init+0xb4>)
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002086:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <MX_ADC1_Init+0xb4>)
 8002088:	2201      	movs	r2, #1
 800208a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800208c:	4814      	ldr	r0, [pc, #80]	; (80020e0 <MX_ADC1_Init+0xb4>)
 800208e:	f000 ffb3 	bl	8002ff8 <HAL_ADC_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002098:	f000 fb6e 	bl	8002778 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800209c:	2303      	movs	r3, #3
 800209e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020a0:	2301      	movs	r3, #1
 80020a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80020a4:	2306      	movs	r3, #6
 80020a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a8:	463b      	mov	r3, r7
 80020aa:	4619      	mov	r1, r3
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <MX_ADC1_Init+0xb4>)
 80020ae:	f001 f8e3 	bl	8003278 <HAL_ADC_ConfigChannel>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020b8:	f000 fb5e 	bl	8002778 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020bc:	230a      	movs	r3, #10
 80020be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80020c0:	2302      	movs	r3, #2
 80020c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c4:	463b      	mov	r3, r7
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <MX_ADC1_Init+0xb4>)
 80020ca:	f001 f8d5 	bl	8003278 <HAL_ADC_ConfigChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80020d4:	f000 fb50 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20001820 	.word	0x20001820
 80020e4:	40012000 	.word	0x40012000
 80020e8:	0f000001 	.word	0x0f000001

080020ec <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <MX_CAN1_Init+0x64>)
 80020f2:	4a18      	ldr	r2, [pc, #96]	; (8002154 <MX_CAN1_Init+0x68>)
 80020f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <MX_CAN1_Init+0x64>)
 80020f8:	2209      	movs	r2, #9
 80020fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <MX_CAN1_Init+0x64>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <MX_CAN1_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_CAN1_Init+0x64>)
 800210a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800210e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <MX_CAN1_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <MX_CAN1_Init+0x64>)
 8002118:	2200      	movs	r2, #0
 800211a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MX_CAN1_Init+0x64>)
 800211e:	2201      	movs	r2, #1
 8002120:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <MX_CAN1_Init+0x64>)
 8002124:	2200      	movs	r2, #0
 8002126:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <MX_CAN1_Init+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <MX_CAN1_Init+0x64>)
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <MX_CAN1_Init+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <MX_CAN1_Init+0x64>)
 800213c:	f001 fb4c 	bl	80037d8 <HAL_CAN_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002146:	f000 fb17 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE END CAN1_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000228c 	.word	0x2000228c
 8002154:	40006400 	.word	0x40006400

08002158 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800216c:	2300      	movs	r3, #0
 800216e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002170:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <MX_RTC_Init+0xc8>)
 8002172:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <MX_RTC_Init+0xcc>)
 8002174:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <MX_RTC_Init+0xc8>)
 8002178:	2200      	movs	r2, #0
 800217a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800217c:	4b28      	ldr	r3, [pc, #160]	; (8002220 <MX_RTC_Init+0xc8>)
 800217e:	227f      	movs	r2, #127	; 0x7f
 8002180:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002182:	4b27      	ldr	r3, [pc, #156]	; (8002220 <MX_RTC_Init+0xc8>)
 8002184:	22ff      	movs	r2, #255	; 0xff
 8002186:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002188:	4b25      	ldr	r3, [pc, #148]	; (8002220 <MX_RTC_Init+0xc8>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <MX_RTC_Init+0xc8>)
 8002190:	2200      	movs	r2, #0
 8002192:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <MX_RTC_Init+0xc8>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800219a:	4821      	ldr	r0, [pc, #132]	; (8002220 <MX_RTC_Init+0xc8>)
 800219c:	f003 fec4 	bl	8005f28 <HAL_RTC_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80021a6:	f000 fae7 	bl	8002778 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2) {
 80021aa:	2101      	movs	r1, #1
 80021ac:	481c      	ldr	r0, [pc, #112]	; (8002220 <MX_RTC_Init+0xc8>)
 80021ae:	f004 fa07 	bl	80065c0 <HAL_RTCEx_BKUPRead>
 80021b2:	4602      	mov	r2, r0
 80021b4:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d02d      	beq.n	8002218 <MX_RTC_Init+0xc0>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x16;
 80021bc:	2316      	movs	r3, #22
 80021be:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x48;
 80021c0:	2348      	movs	r3, #72	; 0x48
 80021c2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 80021c4:	2330      	movs	r3, #48	; 0x30
 80021c6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	2201      	movs	r2, #1
 80021d4:	4619      	mov	r1, r3
 80021d6:	4812      	ldr	r0, [pc, #72]	; (8002220 <MX_RTC_Init+0xc8>)
 80021d8:	f003 ff37 	bl	800604a <HAL_RTC_SetTime>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 80021e2:	f000 fac9 	bl	8002778 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80021e6:	2304      	movs	r3, #4
 80021e8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x5;
 80021ee:	2305      	movs	r3, #5
 80021f0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 80021f2:	2320      	movs	r3, #32
 80021f4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80021f6:	463b      	mov	r3, r7
 80021f8:	2201      	movs	r2, #1
 80021fa:	4619      	mov	r1, r3
 80021fc:	4808      	ldr	r0, [pc, #32]	; (8002220 <MX_RTC_Init+0xc8>)
 80021fe:	f004 f83f 	bl	8006280 <HAL_RTC_SetDate>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8002208:	f000 fab6 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 800220c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002210:	2101      	movs	r1, #1
 8002212:	4803      	ldr	r0, [pc, #12]	; (8002220 <MX_RTC_Init+0xc8>)
 8002214:	f004 f9ba 	bl	800658c <HAL_RTCEx_BKUPWrite>
	}
  /* USER CODE END RTC_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	2000190c 	.word	0x2000190c
 8002224:	40002800 	.word	0x40002800

08002228 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <MX_SPI1_Init+0x64>)
 800222e:	4a18      	ldr	r2, [pc, #96]	; (8002290 <MX_SPI1_Init+0x68>)
 8002230:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <MX_SPI1_Init+0x64>)
 8002234:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002238:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <MX_SPI1_Init+0x64>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <MX_SPI1_Init+0x64>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <MX_SPI1_Init+0x64>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800224c:	4b0f      	ldr	r3, [pc, #60]	; (800228c <MX_SPI1_Init+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <MX_SPI1_Init+0x64>)
 8002254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002258:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <MX_SPI1_Init+0x64>)
 800225c:	2210      	movs	r2, #16
 800225e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <MX_SPI1_Init+0x64>)
 8002262:	2200      	movs	r2, #0
 8002264:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <MX_SPI1_Init+0x64>)
 8002268:	2200      	movs	r2, #0
 800226a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <MX_SPI1_Init+0x64>)
 800226e:	2200      	movs	r2, #0
 8002270:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <MX_SPI1_Init+0x64>)
 8002274:	220a      	movs	r2, #10
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002278:	4804      	ldr	r0, [pc, #16]	; (800228c <MX_SPI1_Init+0x64>)
 800227a:	f004 f9b9 	bl	80065f0 <HAL_SPI_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002284:	f000 fa78 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200019b4 	.word	0x200019b4
 8002290:	40013000 	.word	0x40013000

08002294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229a:	f107 0310 	add.w	r3, r7, #16
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022a4:	463b      	mov	r3, r7
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022b0:	4b26      	ldr	r3, [pc, #152]	; (800234c <MX_TIM2_Init+0xb8>)
 80022b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80022b8:	4b24      	ldr	r3, [pc, #144]	; (800234c <MX_TIM2_Init+0xb8>)
 80022ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <MX_TIM2_Init+0xb8>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 80022c6:	4b21      	ldr	r3, [pc, #132]	; (800234c <MX_TIM2_Init+0xb8>)
 80022c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ce:	4b1f      	ldr	r3, [pc, #124]	; (800234c <MX_TIM2_Init+0xb8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <MX_TIM2_Init+0xb8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80022da:	481c      	ldr	r0, [pc, #112]	; (800234c <MX_TIM2_Init+0xb8>)
 80022dc:	f004 fdcb 	bl	8006e76 <HAL_TIM_IC_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80022e6:	f000 fa47 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022f2:	f107 0310 	add.w	r3, r7, #16
 80022f6:	4619      	mov	r1, r3
 80022f8:	4814      	ldr	r0, [pc, #80]	; (800234c <MX_TIM2_Init+0xb8>)
 80022fa:	f005 fa45 	bl	8007788 <HAL_TIMEx_MasterConfigSynchronization>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002304:	f000 fa38 	bl	8002778 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002308:	2300      	movs	r3, #0
 800230a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800230c:	2301      	movs	r3, #1
 800230e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002318:	463b      	mov	r3, r7
 800231a:	2208      	movs	r2, #8
 800231c:	4619      	mov	r1, r3
 800231e:	480b      	ldr	r0, [pc, #44]	; (800234c <MX_TIM2_Init+0xb8>)
 8002320:	f004 ff44 	bl	80071ac <HAL_TIM_IC_ConfigChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800232a:	f000 fa25 	bl	8002778 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800232e:	463b      	mov	r3, r7
 8002330:	220c      	movs	r2, #12
 8002332:	4619      	mov	r1, r3
 8002334:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_TIM2_Init+0xb8>)
 8002336:	f004 ff39 	bl	80071ac <HAL_TIM_IC_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002340:	f000 fa1a 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	2000220c 	.word	0x2000220c

08002350 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002356:	f107 0310 	add.w	r3, r7, #16
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002360:	463b      	mov	r3, r7
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <MX_TIM3_Init+0xb8>)
 800236e:	4a27      	ldr	r2, [pc, #156]	; (800240c <MX_TIM3_Init+0xbc>)
 8002370:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <MX_TIM3_Init+0xb8>)
 8002374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002378:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237a:	4b23      	ldr	r3, [pc, #140]	; (8002408 <MX_TIM3_Init+0xb8>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <MX_TIM3_Init+0xb8>)
 8002382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002386:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002388:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <MX_TIM3_Init+0xb8>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238e:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <MX_TIM3_Init+0xb8>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002394:	481c      	ldr	r0, [pc, #112]	; (8002408 <MX_TIM3_Init+0xb8>)
 8002396:	f004 fd6e 	bl	8006e76 <HAL_TIM_IC_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80023a0:	f000 f9ea 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	4619      	mov	r1, r3
 80023b2:	4815      	ldr	r0, [pc, #84]	; (8002408 <MX_TIM3_Init+0xb8>)
 80023b4:	f005 f9e8 	bl	8007788 <HAL_TIMEx_MasterConfigSynchronization>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80023be:	f000 f9db 	bl	8002778 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023c2:	2300      	movs	r3, #0
 80023c4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023c6:	2301      	movs	r3, #1
 80023c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023d2:	463b      	mov	r3, r7
 80023d4:	2200      	movs	r2, #0
 80023d6:	4619      	mov	r1, r3
 80023d8:	480b      	ldr	r0, [pc, #44]	; (8002408 <MX_TIM3_Init+0xb8>)
 80023da:	f004 fee7 	bl	80071ac <HAL_TIM_IC_ConfigChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80023e4:	f000 f9c8 	bl	8002778 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023e8:	463b      	mov	r3, r7
 80023ea:	2204      	movs	r2, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	4806      	ldr	r0, [pc, #24]	; (8002408 <MX_TIM3_Init+0xb8>)
 80023f0:	f004 fedc 	bl	80071ac <HAL_TIM_IC_ConfigChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80023fa:	f000 f9bd 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200017c0 	.word	0x200017c0
 800240c:	40000400 	.word	0x40000400

08002410 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002416:	463b      	mov	r3, r7
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <MX_TIM6_Init+0x64>)
 8002420:	4a15      	ldr	r2, [pc, #84]	; (8002478 <MX_TIM6_Init+0x68>)
 8002422:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 224;
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <MX_TIM6_Init+0x64>)
 8002426:	22e0      	movs	r2, #224	; 0xe0
 8002428:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <MX_TIM6_Init+0x64>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <MX_TIM6_Init+0x64>)
 8002432:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002436:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <MX_TIM6_Init+0x64>)
 800243a:	2200      	movs	r2, #0
 800243c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800243e:	480d      	ldr	r0, [pc, #52]	; (8002474 <MX_TIM6_Init+0x64>)
 8002440:	f004 fcca 	bl	8006dd8 <HAL_TIM_Base_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800244a:	f000 f995 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800244e:	2320      	movs	r3, #32
 8002450:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002456:	463b      	mov	r3, r7
 8002458:	4619      	mov	r1, r3
 800245a:	4806      	ldr	r0, [pc, #24]	; (8002474 <MX_TIM6_Init+0x64>)
 800245c:	f005 f994 	bl	8007788 <HAL_TIMEx_MasterConfigSynchronization>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002466:	f000 f987 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20001940 	.word	0x20001940
 8002478:	40001000 	.word	0x40001000

0800247c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <MX_USART1_UART_Init+0x50>)
 8002484:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 8002488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800248c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 8002496:	2200      	movs	r2, #0
 8002498:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 80024a2:	220c      	movs	r2, #12
 80024a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 80024b4:	f005 f9f8 	bl	80078a8 <HAL_UART_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024be:	f000 f95b 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000186c 	.word	0x2000186c
 80024cc:	40011000 	.word	0x40011000

080024d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024d6:	4a12      	ldr	r2, [pc, #72]	; (8002520 <MX_USART2_UART_Init+0x50>)
 80024d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024dc:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80024e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024f6:	220c      	movs	r2, #12
 80024f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <MX_USART2_UART_Init+0x4c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <MX_USART2_UART_Init+0x4c>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_USART2_UART_Init+0x4c>)
 8002508:	f005 f9ce 	bl	80078a8 <HAL_UART_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002512:	f000 f931 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000224c 	.word	0x2000224c
 8002520:	40004400 	.word	0x40004400

08002524 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <MX_DMA_Init+0x3c>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <MX_DMA_Init+0x3c>)
 8002534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <MX_DMA_Init+0x3c>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2038      	movs	r0, #56	; 0x38
 800254c:	f001 ffab 	bl	80044a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002550:	2038      	movs	r0, #56	; 0x38
 8002552:	f001 ffc4 	bl	80044de <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	; 0x30
 8002568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256a:	f107 031c 	add.w	r3, r7, #28
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	4b4f      	ldr	r3, [pc, #316]	; (80026bc <MX_GPIO_Init+0x158>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a4e      	ldr	r2, [pc, #312]	; (80026bc <MX_GPIO_Init+0x158>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b4c      	ldr	r3, [pc, #304]	; (80026bc <MX_GPIO_Init+0x158>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	4b48      	ldr	r3, [pc, #288]	; (80026bc <MX_GPIO_Init+0x158>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a47      	ldr	r2, [pc, #284]	; (80026bc <MX_GPIO_Init+0x158>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b45      	ldr	r3, [pc, #276]	; (80026bc <MX_GPIO_Init+0x158>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	4b41      	ldr	r3, [pc, #260]	; (80026bc <MX_GPIO_Init+0x158>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a40      	ldr	r2, [pc, #256]	; (80026bc <MX_GPIO_Init+0x158>)
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <MX_GPIO_Init+0x158>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <MX_GPIO_Init+0x158>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a39      	ldr	r2, [pc, #228]	; (80026bc <MX_GPIO_Init+0x158>)
 80025d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b37      	ldr	r3, [pc, #220]	; (80026bc <MX_GPIO_Init+0x158>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	4b33      	ldr	r3, [pc, #204]	; (80026bc <MX_GPIO_Init+0x158>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a32      	ldr	r2, [pc, #200]	; (80026bc <MX_GPIO_Init+0x158>)
 80025f4:	f043 0308 	orr.w	r3, r3, #8
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b30      	ldr	r3, [pc, #192]	; (80026bc <MX_GPIO_Init+0x158>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <MX_GPIO_Init+0x158>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a2b      	ldr	r2, [pc, #172]	; (80026bc <MX_GPIO_Init+0x158>)
 8002610:	f043 0310 	orr.w	r3, r3, #16
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <MX_GPIO_Init+0x158>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002622:	2200      	movs	r2, #0
 8002624:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002628:	4825      	ldr	r0, [pc, #148]	; (80026c0 <MX_GPIO_Init+0x15c>)
 800262a:	f002 fc73 	bl	8004f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SD_CS_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800262e:	2200      	movs	r2, #0
 8002630:	2184      	movs	r1, #132	; 0x84
 8002632:	4824      	ldr	r0, [pc, #144]	; (80026c4 <MX_GPIO_Init+0x160>)
 8002634:	f002 fc6e 	bl	8004f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_nReset_GPIO_Port, GPS_nReset_Pin, GPIO_PIN_SET);
 8002638:	2201      	movs	r2, #1
 800263a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800263e:	4821      	ldr	r0, [pc, #132]	; (80026c4 <MX_GPIO_Init+0x160>)
 8002640:	f002 fc68 	bl	8004f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8002644:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264a:	2301      	movs	r3, #1
 800264c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002656:	f107 031c 	add.w	r3, r7, #28
 800265a:	4619      	mov	r1, r3
 800265c:	4818      	ldr	r0, [pc, #96]	; (80026c0 <MX_GPIO_Init+0x15c>)
 800265e:	f002 fac7 	bl	8004bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin PG7 GPS_nReset_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|GPIO_PIN_7|GPS_nReset_Pin;
 8002662:	f640 0384 	movw	r3, #2180	; 0x884
 8002666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002668:	2301      	movs	r3, #1
 800266a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002674:	f107 031c 	add.w	r3, r7, #28
 8002678:	4619      	mov	r1, r3
 800267a:	4812      	ldr	r0, [pc, #72]	; (80026c4 <MX_GPIO_Init+0x160>)
 800267c:	f002 fab8 	bl	8004bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_Ready_Pin */
  GPIO_InitStruct.Pin = GPS_Ready_Pin;
 8002680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPS_Ready_GPIO_Port, &GPIO_InitStruct);
 800268e:	f107 031c 	add.w	r3, r7, #28
 8002692:	4619      	mov	r1, r3
 8002694:	480b      	ldr	r0, [pc, #44]	; (80026c4 <MX_GPIO_Init+0x160>)
 8002696:	f002 faab 	bl	8004bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOG_Switch_Pin SD_Detect_Pin */
  GPIO_InitStruct.Pin = LOG_Switch_Pin|SD_Detect_Pin;
 800269a:	2303      	movs	r3, #3
 800269c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026a2:	2301      	movs	r3, #1
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026a6:	f107 031c 	add.w	r3, r7, #28
 80026aa:	4619      	mov	r1, r3
 80026ac:	4806      	ldr	r0, [pc, #24]	; (80026c8 <MX_GPIO_Init+0x164>)
 80026ae:	f002 fa9f 	bl	8004bf0 <HAL_GPIO_Init>

}
 80026b2:	bf00      	nop
 80026b4:	3730      	adds	r7, #48	; 0x30
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020400 	.word	0x40020400
 80026c4:	40021800 	.word	0x40021800
 80026c8:	40021000 	.word	0x40021000

080026cc <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80026d4:	2201      	movs	r2, #1
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	4803      	ldr	r0, [pc, #12]	; (80026e8 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80026da:	f002 fc1b 	bl	8004f14 <HAL_GPIO_WritePin>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40020400 	.word	0x40020400

080026ec <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	481a      	ldr	r0, [pc, #104]	; (8002764 <HAL_ADC_ConvCpltCallback+0x78>)
 80026fa:	f002 fc0b 	bl	8004f14 <HAL_GPIO_WritePin>
	//averaging code
	uint32_t total_A0 = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
	uint32_t total_A1 = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < ADC_BUF_LEN - 1; i += 2) {
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_ADC_ConvCpltCallback+0x7c>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e017      	b.n	800273e <HAL_ADC_ConvCpltCallback+0x52>
		total_A0 += adc_buf[i];
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <HAL_ADC_ConvCpltCallback+0x7c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a16      	ldr	r2, [pc, #88]	; (800276c <HAL_ADC_ConvCpltCallback+0x80>)
 8002714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002718:	461a      	mov	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4413      	add	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
		total_A1 += adc_buf[i + 1];
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_ADC_ConvCpltCallback+0x7c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	4a11      	ldr	r2, [pc, #68]	; (800276c <HAL_ADC_ConvCpltCallback+0x80>)
 8002728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800272c:	461a      	mov	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4413      	add	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < ADC_BUF_LEN - 1; i += 2) {
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_ADC_ConvCpltCallback+0x7c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3302      	adds	r3, #2
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <HAL_ADC_ConvCpltCallback+0x7c>)
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_ADC_ConvCpltCallback+0x7c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8002746:	4293      	cmp	r3, r2
 8002748:	dde1      	ble.n	800270e <HAL_ADC_ConvCpltCallback+0x22>
	}
	raw_A0 = total_A0 / (ADC_BUF_LEN / 2);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	0a5b      	lsrs	r3, r3, #9
 800274e:	4a08      	ldr	r2, [pc, #32]	; (8002770 <HAL_ADC_ConvCpltCallback+0x84>)
 8002750:	6013      	str	r3, [r2, #0]
	raw_A1 = total_A1 / (ADC_BUF_LEN / 2);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	0a5b      	lsrs	r3, r3, #9
 8002756:	4a07      	ldr	r2, [pc, #28]	; (8002774 <HAL_ADC_ConvCpltCallback+0x88>)
 8002758:	6013      	str	r3, [r2, #0]
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40020400 	.word	0x40020400
 8002768:	200000ac 	.word	0x200000ac
 800276c:	20001a0c 	.word	0x20001a0c
 8002770:	200017b4 	.word	0x200017b4
 8002774:	20000348 	.word	0x20000348

08002778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_MspInit+0x4c>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <HAL_MspInit+0x4c>)
 8002798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_MspInit+0x4c>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_MspInit+0x4c>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a08      	ldr	r2, [pc, #32]	; (80027d4 <HAL_MspInit+0x4c>)
 80027b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_MspInit+0x4c>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800

080027d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 031c 	add.w	r3, r7, #28
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a49      	ldr	r2, [pc, #292]	; (800291c <HAL_ADC_MspInit+0x144>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	f040 808c 	bne.w	8002914 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_ADC_MspInit+0x148>)
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	4a46      	ldr	r2, [pc, #280]	; (8002920 <HAL_ADC_MspInit+0x148>)
 8002806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280a:	6453      	str	r3, [r2, #68]	; 0x44
 800280c:	4b44      	ldr	r3, [pc, #272]	; (8002920 <HAL_ADC_MspInit+0x148>)
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	4b40      	ldr	r3, [pc, #256]	; (8002920 <HAL_ADC_MspInit+0x148>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4a3f      	ldr	r2, [pc, #252]	; (8002920 <HAL_ADC_MspInit+0x148>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	6313      	str	r3, [r2, #48]	; 0x30
 8002828:	4b3d      	ldr	r3, [pc, #244]	; (8002920 <HAL_ADC_MspInit+0x148>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	4b39      	ldr	r3, [pc, #228]	; (8002920 <HAL_ADC_MspInit+0x148>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	4a38      	ldr	r2, [pc, #224]	; (8002920 <HAL_ADC_MspInit+0x148>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6313      	str	r3, [r2, #48]	; 0x30
 8002844:	4b36      	ldr	r3, [pc, #216]	; (8002920 <HAL_ADC_MspInit+0x148>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	4b32      	ldr	r3, [pc, #200]	; (8002920 <HAL_ADC_MspInit+0x148>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	4a31      	ldr	r2, [pc, #196]	; (8002920 <HAL_ADC_MspInit+0x148>)
 800285a:	f043 0302 	orr.w	r3, r3, #2
 800285e:	6313      	str	r3, [r2, #48]	; 0x30
 8002860:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <HAL_ADC_MspInit+0x148>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = A10_Pin|A11_Pin|A12_Pin|A13_Pin 
 800286c:	233f      	movs	r3, #63	; 0x3f
 800286e:	61fb      	str	r3, [r7, #28]
                          |A14_Pin|A15_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002870:	2303      	movs	r3, #3
 8002872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	4829      	ldr	r0, [pc, #164]	; (8002924 <HAL_ADC_MspInit+0x14c>)
 8002880:	f002 f9b6 	bl	8004bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8002884:	23ff      	movs	r3, #255	; 0xff
 8002886:	61fb      	str	r3, [r7, #28]
                          |A4_Pin|A5_Pin|A6_Pin|A7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002888:	2303      	movs	r3, #3
 800288a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	4619      	mov	r1, r3
 8002896:	4824      	ldr	r0, [pc, #144]	; (8002928 <HAL_ADC_MspInit+0x150>)
 8002898:	f002 f9aa 	bl	8004bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A8_Pin|A9_Pin;
 800289c:	2303      	movs	r3, #3
 800289e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028a0:	2303      	movs	r3, #3
 80028a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a8:	f107 031c 	add.w	r3, r7, #28
 80028ac:	4619      	mov	r1, r3
 80028ae:	481f      	ldr	r0, [pc, #124]	; (800292c <HAL_ADC_MspInit+0x154>)
 80028b0:	f002 f99e 	bl	8004bf0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80028b4:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <HAL_ADC_MspInit+0x158>)
 80028b6:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <HAL_ADC_MspInit+0x15c>)
 80028b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80028ba:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_ADC_MspInit+0x158>)
 80028bc:	2200      	movs	r2, #0
 80028be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_ADC_MspInit+0x158>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <HAL_ADC_MspInit+0x158>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_ADC_MspInit+0x158>)
 80028ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_ADC_MspInit+0x158>)
 80028d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_ADC_MspInit+0x158>)
 80028de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_ADC_MspInit+0x158>)
 80028e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_ADC_MspInit+0x158>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f2:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <HAL_ADC_MspInit+0x158>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028f8:	480d      	ldr	r0, [pc, #52]	; (8002930 <HAL_ADC_MspInit+0x158>)
 80028fa:	f001 fe0b 	bl	8004514 <HAL_DMA_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002904:	f7ff ff38 	bl	8002778 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a09      	ldr	r2, [pc, #36]	; (8002930 <HAL_ADC_MspInit+0x158>)
 800290c:	639a      	str	r2, [r3, #56]	; 0x38
 800290e:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_ADC_MspInit+0x158>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002914:	bf00      	nop
 8002916:	3730      	adds	r7, #48	; 0x30
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40012000 	.word	0x40012000
 8002920:	40023800 	.word	0x40023800
 8002924:	40020800 	.word	0x40020800
 8002928:	40020000 	.word	0x40020000
 800292c:	40020400 	.word	0x40020400
 8002930:	200018ac 	.word	0x200018ac
 8002934:	40026410 	.word	0x40026410

08002938 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <HAL_CAN_MspInit+0x94>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d133      	bne.n	80029c2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <HAL_CAN_MspInit+0x98>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <HAL_CAN_MspInit+0x98>)
 8002964:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_CAN_MspInit+0x98>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_CAN_MspInit+0x98>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <HAL_CAN_MspInit+0x98>)
 8002980:	f043 0308 	orr.w	r3, r3, #8
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_CAN_MspInit+0x98>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002992:	2303      	movs	r3, #3
 8002994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299a:	2301      	movs	r3, #1
 800299c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80029a2:	2309      	movs	r3, #9
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	4809      	ldr	r0, [pc, #36]	; (80029d4 <HAL_CAN_MspInit+0x9c>)
 80029ae:	f002 f91f 	bl	8004bf0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2101      	movs	r1, #1
 80029b6:	2014      	movs	r0, #20
 80029b8:	f001 fd75 	bl	80044a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80029bc:	2014      	movs	r0, #20
 80029be:	f001 fd8e 	bl	80044de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80029c2:	bf00      	nop
 80029c4:	3728      	adds	r7, #40	; 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40006400 	.word	0x40006400
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40020c00 	.word	0x40020c00

080029d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a05      	ldr	r2, [pc, #20]	; (80029fc <HAL_RTC_MspInit+0x24>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d102      	bne.n	80029f0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RTC_MspInit+0x28>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40002800 	.word	0x40002800
 8002a00:	42470e3c 	.word	0x42470e3c

08002a04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a19      	ldr	r2, [pc, #100]	; (8002a88 <HAL_SPI_MspInit+0x84>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d12b      	bne.n	8002a7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <HAL_SPI_MspInit+0x88>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <HAL_SPI_MspInit+0x88>)
 8002a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a34:	6453      	str	r3, [r2, #68]	; 0x44
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_SPI_MspInit+0x88>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_SPI_MspInit+0x88>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <HAL_SPI_MspInit+0x88>)
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <HAL_SPI_MspInit+0x88>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002a5e:	2338      	movs	r3, #56	; 0x38
 8002a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	2302      	movs	r3, #2
 8002a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a6e:	2305      	movs	r3, #5
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	4619      	mov	r1, r3
 8002a78:	4805      	ldr	r0, [pc, #20]	; (8002a90 <HAL_SPI_MspInit+0x8c>)
 8002a7a:	f002 f8b9 	bl	8004bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a7e:	bf00      	nop
 8002a80:	3728      	adds	r7, #40	; 0x28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40013000 	.word	0x40013000
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40020400 	.word	0x40020400

08002a94 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08c      	sub	sp, #48	; 0x30
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab4:	d135      	bne.n	8002b22 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <HAL_TIM_IC_MspInit+0x108>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a37      	ldr	r2, [pc, #220]	; (8002b9c <HAL_TIM_IC_MspInit+0x108>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <HAL_TIM_IC_MspInit+0x108>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	61bb      	str	r3, [r7, #24]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <HAL_TIM_IC_MspInit+0x108>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a30      	ldr	r2, [pc, #192]	; (8002b9c <HAL_TIM_IC_MspInit+0x108>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <HAL_TIM_IC_MspInit+0x108>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = PWM_2_Pin|PWM_1_Pin;
 8002aee:	f240 4304 	movw	r3, #1028	; 0x404
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b00:	2301      	movs	r3, #1
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b04:	f107 031c 	add.w	r3, r7, #28
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4825      	ldr	r0, [pc, #148]	; (8002ba0 <HAL_TIM_IC_MspInit+0x10c>)
 8002b0c:	f002 f870 	bl	8004bf0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002b10:	2200      	movs	r2, #0
 8002b12:	2102      	movs	r1, #2
 8002b14:	201c      	movs	r0, #28
 8002b16:	f001 fcc6 	bl	80044a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b1a:	201c      	movs	r0, #28
 8002b1c:	f001 fcdf 	bl	80044de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b20:	e038      	b.n	8002b94 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM3)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1f      	ldr	r2, [pc, #124]	; (8002ba4 <HAL_TIM_IC_MspInit+0x110>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d133      	bne.n	8002b94 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <HAL_TIM_IC_MspInit+0x108>)
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	4a19      	ldr	r2, [pc, #100]	; (8002b9c <HAL_TIM_IC_MspInit+0x108>)
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_TIM_IC_MspInit+0x108>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <HAL_TIM_IC_MspInit+0x108>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <HAL_TIM_IC_MspInit+0x108>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	6313      	str	r3, [r2, #48]	; 0x30
 8002b58:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <HAL_TIM_IC_MspInit+0x108>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_3_Pin|PWM_4_Pin;
 8002b64:	23c0      	movs	r3, #192	; 0xc0
 8002b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b74:	2302      	movs	r3, #2
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b78:	f107 031c 	add.w	r3, r7, #28
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <HAL_TIM_IC_MspInit+0x114>)
 8002b80:	f002 f836 	bl	8004bf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2102      	movs	r1, #2
 8002b88:	201d      	movs	r0, #29
 8002b8a:	f001 fc8c 	bl	80044a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b8e:	201d      	movs	r0, #29
 8002b90:	f001 fca5 	bl	80044de <HAL_NVIC_EnableIRQ>
}
 8002b94:	bf00      	nop
 8002b96:	3730      	adds	r7, #48	; 0x30
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40020400 	.word	0x40020400
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40020800 	.word	0x40020800

08002bac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <HAL_TIM_Base_MspInit+0x48>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d115      	bne.n	8002bea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_TIM_Base_MspInit+0x4c>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4a0c      	ldr	r2, [pc, #48]	; (8002bf8 <HAL_TIM_Base_MspInit+0x4c>)
 8002bc8:	f043 0310 	orr.w	r3, r3, #16
 8002bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <HAL_TIM_Base_MspInit+0x4c>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	2036      	movs	r0, #54	; 0x36
 8002be0:	f001 fc61 	bl	80044a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002be4:	2036      	movs	r0, #54	; 0x36
 8002be6:	f001 fc7a 	bl	80044de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40001000 	.word	0x40001000
 8002bf8:	40023800 	.word	0x40023800

08002bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08c      	sub	sp, #48	; 0x30
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 031c 	add.w	r3, r7, #28
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a32      	ldr	r2, [pc, #200]	; (8002ce4 <HAL_UART_MspInit+0xe8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12d      	bne.n	8002c7a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <HAL_UART_MspInit+0xec>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	4a30      	ldr	r2, [pc, #192]	; (8002ce8 <HAL_UART_MspInit+0xec>)
 8002c28:	f043 0310 	orr.w	r3, r3, #16
 8002c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <HAL_UART_MspInit+0xec>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <HAL_UART_MspInit+0xec>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a29      	ldr	r2, [pc, #164]	; (8002ce8 <HAL_UART_MspInit+0xec>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_UART_MspInit+0xec>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c64:	2303      	movs	r3, #3
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c68:	2307      	movs	r3, #7
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6c:	f107 031c 	add.w	r3, r7, #28
 8002c70:	4619      	mov	r1, r3
 8002c72:	481e      	ldr	r0, [pc, #120]	; (8002cec <HAL_UART_MspInit+0xf0>)
 8002c74:	f001 ffbc 	bl	8004bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c78:	e030      	b.n	8002cdc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1c      	ldr	r2, [pc, #112]	; (8002cf0 <HAL_UART_MspInit+0xf4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d12b      	bne.n	8002cdc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_UART_MspInit+0xec>)
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <HAL_UART_MspInit+0xec>)
 8002c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c92:	6413      	str	r3, [r2, #64]	; 0x40
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_UART_MspInit+0xec>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_UART_MspInit+0xec>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4a0f      	ldr	r2, [pc, #60]	; (8002ce8 <HAL_UART_MspInit+0xec>)
 8002caa:	f043 0308 	orr.w	r3, r3, #8
 8002cae:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_UART_MspInit+0xec>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002cbc:	2360      	movs	r3, #96	; 0x60
 8002cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ccc:	2307      	movs	r3, #7
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd0:	f107 031c 	add.w	r3, r7, #28
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4807      	ldr	r0, [pc, #28]	; (8002cf4 <HAL_UART_MspInit+0xf8>)
 8002cd8:	f001 ff8a 	bl	8004bf0 <HAL_GPIO_Init>
}
 8002cdc:	bf00      	nop
 8002cde:	3730      	adds	r7, #48	; 0x30
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40011000 	.word	0x40011000
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40020000 	.word	0x40020000
 8002cf0:	40004400 	.word	0x40004400
 8002cf4:	40020c00 	.word	0x40020c00

08002cf8 <SDTimerHandler>:
/* USER CODE BEGIN 0 */

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimerHandler(void) {
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <SDTimerHandler+0x40>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <SDTimerHandler+0x1c>
		Timer1--;
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <SDTimerHandler+0x40>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <SDTimerHandler+0x40>)
 8002d12:	701a      	strb	r2, [r3, #0]
	if (Timer2 > 0)
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <SDTimerHandler+0x44>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <SDTimerHandler+0x34>
		Timer2--;
 8002d1e:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <SDTimerHandler+0x44>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <SDTimerHandler+0x44>)
 8002d2a:	701a      	strb	r2, [r3, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20003321 	.word	0x20003321
 8002d3c:	20003320 	.word	0x20003320

08002d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d52:	e7fe      	b.n	8002d52 <HardFault_Handler+0x4>

08002d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d58:	e7fe      	b.n	8002d58 <MemManage_Handler+0x4>

08002d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d5e:	e7fe      	b.n	8002d5e <BusFault_Handler+0x4>

08002d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d64:	e7fe      	b.n	8002d64 <UsageFault_Handler+0x4>

08002d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <SysTick_Handler+0x30>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <SysTick_Handler+0x30>)
 8002da0:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10) {
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <SysTick_Handler+0x30>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b09      	cmp	r3, #9
 8002daa:	d904      	bls.n	8002db6 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <SysTick_Handler+0x30>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
		SDTimerHandler();
 8002db2:	f7ff ffa1 	bl	8002cf8 <SDTimerHandler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002db6:	f000 f8ff 	bl	8002fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000101 	.word	0x20000101

08002dc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002dc8:	4805      	ldr	r0, [pc, #20]	; (8002de0 <CAN1_RX0_IRQHandler+0x1c>)
 8002dca:	f001 f85d 	bl	8003e88 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxCanHeader, &CANresponse);
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <CAN1_RX0_IRQHandler+0x20>)
 8002dd0:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <CAN1_RX0_IRQHandler+0x24>)
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4802      	ldr	r0, [pc, #8]	; (8002de0 <CAN1_RX0_IRQHandler+0x1c>)
 8002dd6:	f000 ff1f 	bl	8003c18 <HAL_CAN_GetRxMessage>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	2000228c 	.word	0x2000228c
 8002de4:	200022b8 	.word	0x200022b8
 8002de8:	20001798 	.word	0x20001798

08002dec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002df0:	4802      	ldr	r0, [pc, #8]	; (8002dfc <TIM2_IRQHandler+0x10>)
 8002df2:	f004 f8d3 	bl	8006f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	2000220c 	.word	0x2000220c

08002e00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <TIM3_IRQHandler+0x10>)
 8002e06:	f004 f8c9 	bl	8006f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200017c0 	.word	0x200017c0

08002e14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <TIM6_DAC_IRQHandler+0x10>)
 8002e1a:	f004 f8bf 	bl	8006f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20001940 	.word	0x20001940

08002e28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <DMA2_Stream0_IRQHandler+0x10>)
 8002e2e:	f001 fc77 	bl	8004720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200018ac 	.word	0x200018ac

08002e3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <_sbrk+0x50>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <_sbrk+0x16>
		heap_end = &end;
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <_sbrk+0x50>)
 8002e4e:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <_sbrk+0x54>)
 8002e50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <_sbrk+0x50>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <_sbrk+0x50>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4413      	add	r3, r2
 8002e60:	466a      	mov	r2, sp
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d907      	bls.n	8002e76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e66:	f008 fc79 	bl	800b75c <__errno>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	230c      	movs	r3, #12
 8002e6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002e70:	f04f 33ff 	mov.w	r3, #4294967295
 8002e74:	e006      	b.n	8002e84 <_sbrk+0x48>
	}

	heap_end += incr;
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <_sbrk+0x50>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a03      	ldr	r2, [pc, #12]	; (8002e8c <_sbrk+0x50>)
 8002e80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e82:	68fb      	ldr	r3, [r7, #12]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20000104 	.word	0x20000104
 8002e90:	200053a0 	.word	0x200053a0

08002e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e98:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <SystemInit+0x28>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <SystemInit+0x28>)
 8002ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <SystemInit+0x28>)
 8002eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eae:	609a      	str	r2, [r3, #8]
#endif
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ef8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ec6:	e003      	b.n	8002ed0 <LoopCopyDataInit>

08002ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ece:	3104      	adds	r1, #4

08002ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ed0:	480b      	ldr	r0, [pc, #44]	; (8002f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ed8:	d3f6      	bcc.n	8002ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8002eda:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002edc:	e002      	b.n	8002ee4 <LoopFillZerobss>

08002ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ee0:	f842 3b04 	str.w	r3, [r2], #4

08002ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ee8:	d3f9      	bcc.n	8002ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002eea:	f7ff ffd3 	bl	8002e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eee:	f008 fc3b 	bl	800b768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ef2:	f7fe fe7d 	bl	8001bf0 <main>
  bx  lr    
 8002ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ef8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002efc:	0800c694 	.word	0x0800c694
  ldr  r0, =_sdata
 8002f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f04:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8002f08:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8002f0c:	2000539c 	.word	0x2000539c

08002f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f10:	e7fe      	b.n	8002f10 <ADC_IRQHandler>
	...

08002f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <HAL_Init+0x40>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <HAL_Init+0x40>)
 8002f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_Init+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <HAL_Init+0x40>)
 8002f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f30:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_Init+0x40>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <HAL_Init+0x40>)
 8002f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f3c:	2003      	movs	r0, #3
 8002f3e:	f001 faa7 	bl	8004490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f000 f808 	bl	8002f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f48:	f7ff fc1e 	bl	8002788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023c00 	.word	0x40023c00

08002f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_InitTick+0x54>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <HAL_InitTick+0x58>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f001 fabf 	bl	80044fa <HAL_SYSTICK_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e00e      	b.n	8002fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b0f      	cmp	r3, #15
 8002f8a:	d80a      	bhi.n	8002fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	f001 fa87 	bl	80044a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f98:	4a06      	ldr	r2, [pc, #24]	; (8002fb4 <HAL_InitTick+0x5c>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e000      	b.n	8002fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	20000010 	.word	0x20000010
 8002fb4:	2000000c 	.word	0x2000000c

08002fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_IncTick+0x20>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_IncTick+0x24>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <HAL_IncTick+0x24>)
 8002fca:	6013      	str	r3, [r2, #0]
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000010 	.word	0x20000010
 8002fdc:	20003324 	.word	0x20003324

08002fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <HAL_GetTick+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20003324 	.word	0x20003324

08002ff8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e033      	b.n	8003076 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fbde 	bl	80027d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b00      	cmp	r3, #0
 8003034:	d118      	bne.n	8003068 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800303e:	f023 0302 	bic.w	r3, r3, #2
 8003042:	f043 0202 	orr.w	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa46 	bl	80034dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f023 0303 	bic.w	r3, r3, #3
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
 8003066:	e001      	b.n	800306c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003074:	7bfb      	ldrb	r3, [r7, #15]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_ADC_Start_DMA+0x1e>
 800309a:	2302      	movs	r3, #2
 800309c:	e0cc      	b.n	8003238 <HAL_ADC_Start_DMA+0x1b8>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d018      	beq.n	80030e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030c4:	4b5e      	ldr	r3, [pc, #376]	; (8003240 <HAL_ADC_Start_DMA+0x1c0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a5e      	ldr	r2, [pc, #376]	; (8003244 <HAL_ADC_Start_DMA+0x1c4>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0c9a      	lsrs	r2, r3, #18
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80030d8:	e002      	b.n	80030e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	3b01      	subs	r3, #1
 80030de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f9      	bne.n	80030da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	f040 80a0 	bne.w	8003236 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003120:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003134:	d106      	bne.n	8003144 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f023 0206 	bic.w	r2, r3, #6
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
 8003142:	e002      	b.n	800314a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_ADC_Start_DMA+0x1c8>)
 8003154:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	4a3c      	ldr	r2, [pc, #240]	; (800324c <HAL_ADC_Start_DMA+0x1cc>)
 800315c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003162:	4a3b      	ldr	r2, [pc, #236]	; (8003250 <HAL_ADC_Start_DMA+0x1d0>)
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	4a3a      	ldr	r2, [pc, #232]	; (8003254 <HAL_ADC_Start_DMA+0x1d4>)
 800316c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003176:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003186:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003196:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	334c      	adds	r3, #76	; 0x4c
 80031a2:	4619      	mov	r1, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f001 fa62 	bl	8004670 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d12a      	bne.n	800320e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a26      	ldr	r2, [pc, #152]	; (8003258 <HAL_ADC_Start_DMA+0x1d8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d015      	beq.n	80031ee <HAL_ADC_Start_DMA+0x16e>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a25      	ldr	r2, [pc, #148]	; (800325c <HAL_ADC_Start_DMA+0x1dc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d105      	bne.n	80031d8 <HAL_ADC_Start_DMA+0x158>
 80031cc:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <HAL_ADC_Start_DMA+0x1c8>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a20      	ldr	r2, [pc, #128]	; (8003260 <HAL_ADC_Start_DMA+0x1e0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d129      	bne.n	8003236 <HAL_ADC_Start_DMA+0x1b6>
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_ADC_Start_DMA+0x1c8>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	2b0f      	cmp	r3, #15
 80031ec:	d823      	bhi.n	8003236 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d11c      	bne.n	8003236 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	e013      	b.n	8003236 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a11      	ldr	r2, [pc, #68]	; (8003258 <HAL_ADC_Start_DMA+0x1d8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d10e      	bne.n	8003236 <HAL_ADC_Start_DMA+0x1b6>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d107      	bne.n	8003236 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003234:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000008 	.word	0x20000008
 8003244:	431bde83 	.word	0x431bde83
 8003248:	40012300 	.word	0x40012300
 800324c:	080036d5 	.word	0x080036d5
 8003250:	0800378f 	.word	0x0800378f
 8003254:	080037ab 	.word	0x080037ab
 8003258:	40012000 	.word	0x40012000
 800325c:	40012100 	.word	0x40012100
 8003260:	40012200 	.word	0x40012200

08003264 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x1c>
 8003290:	2302      	movs	r3, #2
 8003292:	e113      	b.n	80034bc <HAL_ADC_ConfigChannel+0x244>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b09      	cmp	r3, #9
 80032a2:	d925      	bls.n	80032f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68d9      	ldr	r1, [r3, #12]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	3b1e      	subs	r3, #30
 80032ba:	2207      	movs	r2, #7
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43da      	mvns	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	400a      	ands	r2, r1
 80032c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68d9      	ldr	r1, [r3, #12]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	4618      	mov	r0, r3
 80032dc:	4603      	mov	r3, r0
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4403      	add	r3, r0
 80032e2:	3b1e      	subs	r3, #30
 80032e4:	409a      	lsls	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	e022      	b.n	8003336 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6919      	ldr	r1, [r3, #16]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	2207      	movs	r2, #7
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43da      	mvns	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	400a      	ands	r2, r1
 8003312:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6919      	ldr	r1, [r3, #16]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	4618      	mov	r0, r3
 8003326:	4603      	mov	r3, r0
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4403      	add	r3, r0
 800332c:	409a      	lsls	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b06      	cmp	r3, #6
 800333c:	d824      	bhi.n	8003388 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	3b05      	subs	r3, #5
 8003350:	221f      	movs	r2, #31
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43da      	mvns	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	400a      	ands	r2, r1
 800335e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	4618      	mov	r0, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	3b05      	subs	r3, #5
 800337a:	fa00 f203 	lsl.w	r2, r0, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	635a      	str	r2, [r3, #52]	; 0x34
 8003386:	e04c      	b.n	8003422 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d824      	bhi.n	80033da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	3b23      	subs	r3, #35	; 0x23
 80033a2:	221f      	movs	r2, #31
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43da      	mvns	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	400a      	ands	r2, r1
 80033b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	4618      	mov	r0, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	3b23      	subs	r3, #35	; 0x23
 80033cc:	fa00 f203 	lsl.w	r2, r0, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
 80033d8:	e023      	b.n	8003422 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	3b41      	subs	r3, #65	; 0x41
 80033ec:	221f      	movs	r2, #31
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43da      	mvns	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	400a      	ands	r2, r1
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	4618      	mov	r0, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	3b41      	subs	r3, #65	; 0x41
 8003416:	fa00 f203 	lsl.w	r2, r0, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003422:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <HAL_ADC_ConfigChannel+0x250>)
 8003424:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a28      	ldr	r2, [pc, #160]	; (80034cc <HAL_ADC_ConfigChannel+0x254>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d10f      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x1d8>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b12      	cmp	r3, #18
 8003436:	d10b      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <HAL_ADC_ConfigChannel+0x254>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d12b      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x23a>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <HAL_ADC_ConfigChannel+0x258>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <HAL_ADC_ConfigChannel+0x1f4>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b11      	cmp	r3, #17
 800346a:	d122      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a11      	ldr	r2, [pc, #68]	; (80034d0 <HAL_ADC_ConfigChannel+0x258>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d111      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800348e:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <HAL_ADC_ConfigChannel+0x25c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a11      	ldr	r2, [pc, #68]	; (80034d8 <HAL_ADC_ConfigChannel+0x260>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	0c9a      	lsrs	r2, r3, #18
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034a4:	e002      	b.n	80034ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f9      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	40012300 	.word	0x40012300
 80034cc:	40012000 	.word	0x40012000
 80034d0:	10000012 	.word	0x10000012
 80034d4:	20000008 	.word	0x20000008
 80034d8:	431bde83 	.word	0x431bde83

080034dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034e4:	4b79      	ldr	r3, [pc, #484]	; (80036cc <ADC_Init+0x1f0>)
 80034e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003510:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6859      	ldr	r1, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	021a      	lsls	r2, r3, #8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6859      	ldr	r1, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6899      	ldr	r1, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	4a58      	ldr	r2, [pc, #352]	; (80036d0 <ADC_Init+0x1f4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d022      	beq.n	80035ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003582:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6899      	ldr	r1, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6899      	ldr	r1, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	e00f      	b.n	80035da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0202 	bic.w	r2, r2, #2
 80035e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6899      	ldr	r1, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7e1b      	ldrb	r3, [r3, #24]
 80035f4:	005a      	lsls	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01b      	beq.n	8003640 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003616:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003626:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	3b01      	subs	r3, #1
 8003634:	035a      	lsls	r2, r3, #13
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	e007      	b.n	8003650 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800364e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	3b01      	subs	r3, #1
 800366c:	051a      	lsls	r2, r3, #20
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003684:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6899      	ldr	r1, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003692:	025a      	lsls	r2, r3, #9
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6899      	ldr	r1, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	029a      	lsls	r2, r3, #10
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	40012300 	.word	0x40012300
 80036d0:	0f000001 	.word	0x0f000001

080036d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d13c      	bne.n	8003768 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d12b      	bne.n	8003760 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800370c:	2b00      	cmp	r3, #0
 800370e:	d127      	bne.n	8003760 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800371a:	2b00      	cmp	r3, #0
 800371c:	d006      	beq.n	800372c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003728:	2b00      	cmp	r3, #0
 800372a:	d119      	bne.n	8003760 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0220 	bic.w	r2, r2, #32
 800373a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	f043 0201 	orr.w	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7fe ffc3 	bl	80026ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003766:	e00e      	b.n	8003786 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f7ff fd75 	bl	8003264 <HAL_ADC_ErrorCallback>
}
 800377a:	e004      	b.n	8003786 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4798      	blx	r3
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7fe ff95 	bl	80026cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2240      	movs	r2, #64	; 0x40
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	f043 0204 	orr.w	r2, r3, #4
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff fd4a 	bl	8003264 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0ed      	b.n	80039c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff f89e 	bl	8002938 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0202 	bic.w	r2, r2, #2
 800380a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800380c:	f7ff fbe8 	bl	8002fe0 <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003812:	e012      	b.n	800383a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003814:	f7ff fbe4 	bl	8002fe0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b0a      	cmp	r3, #10
 8003820:	d90b      	bls.n	800383a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2205      	movs	r2, #5
 8003832:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0c5      	b.n	80039c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e5      	bne.n	8003814 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003858:	f7ff fbc2 	bl	8002fe0 <HAL_GetTick>
 800385c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800385e:	e012      	b.n	8003886 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003860:	f7ff fbbe 	bl	8002fe0 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b0a      	cmp	r3, #10
 800386c:	d90b      	bls.n	8003886 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2205      	movs	r2, #5
 800387e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e09f      	b.n	80039c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0e5      	beq.n	8003860 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	7e1b      	ldrb	r3, [r3, #24]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d108      	bne.n	80038ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e007      	b.n	80038be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7e5b      	ldrb	r3, [r3, #25]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d108      	bne.n	80038d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e007      	b.n	80038e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	7e9b      	ldrb	r3, [r3, #26]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d108      	bne.n	8003902 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0220 	orr.w	r2, r2, #32
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	e007      	b.n	8003912 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0220 	bic.w	r2, r2, #32
 8003910:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	7edb      	ldrb	r3, [r3, #27]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d108      	bne.n	800392c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0210 	bic.w	r2, r2, #16
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e007      	b.n	800393c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0210 	orr.w	r2, r2, #16
 800393a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	7f1b      	ldrb	r3, [r3, #28]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d108      	bne.n	8003956 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0208 	orr.w	r2, r2, #8
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	e007      	b.n	8003966 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0208 	bic.w	r2, r2, #8
 8003964:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	7f5b      	ldrb	r3, [r3, #29]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d108      	bne.n	8003980 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0204 	orr.w	r2, r2, #4
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e007      	b.n	8003990 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0204 	bic.w	r2, r2, #4
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	ea42 0103 	orr.w	r1, r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	1e5a      	subs	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d003      	beq.n	80039f6 <HAL_CAN_ConfigFilter+0x26>
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	f040 80be 	bne.w	8003b72 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80039f6:	4b65      	ldr	r3, [pc, #404]	; (8003b8c <HAL_CAN_ConfigFilter+0x1bc>)
 80039f8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a00:	f043 0201 	orr.w	r2, r3, #1
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	431a      	orrs	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	2201      	movs	r2, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	401a      	ands	r2, r3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d123      	bne.n	8003aa0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	401a      	ands	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a7a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3248      	adds	r2, #72	; 0x48
 8003a80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a94:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a96:	6979      	ldr	r1, [r7, #20]
 8003a98:	3348      	adds	r3, #72	; 0x48
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	440b      	add	r3, r1
 8003a9e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d122      	bne.n	8003aee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ac8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	3248      	adds	r2, #72	; 0x48
 8003ace:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ae2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ae4:	6979      	ldr	r1, [r7, #20]
 8003ae6:	3348      	adds	r3, #72	; 0x48
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	440b      	add	r3, r1
 8003aec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	401a      	ands	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003b08:	e007      	b.n	8003b1a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	401a      	ands	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003b34:	e007      	b.n	8003b46 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d107      	bne.n	8003b5e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b64:	f023 0201 	bic.w	r2, r3, #1
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e006      	b.n	8003b80 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
  }
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	40006400 	.word	0x40006400

08003b90 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d12e      	bne.n	8003c02 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bbc:	f7ff fa10 	bl	8002fe0 <HAL_GetTick>
 8003bc0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003bc2:	e012      	b.n	8003bea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bc4:	f7ff fa0c 	bl	8002fe0 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b0a      	cmp	r3, #10
 8003bd0:	d90b      	bls.n	8003bea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2205      	movs	r2, #5
 8003be2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e012      	b.n	8003c10 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e5      	bne.n	8003bc4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e006      	b.n	8003c10 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
  }
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c2c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d003      	beq.n	8003c3c <HAL_CAN_GetRxMessage+0x24>
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	f040 80f3 	bne.w	8003e22 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10e      	bne.n	8003c60 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d116      	bne.n	8003c7e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0e7      	b.n	8003e30 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d107      	bne.n	8003c7e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0d8      	b.n	8003e30 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	331b      	adds	r3, #27
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	4413      	add	r3, r2
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0204 	and.w	r2, r3, #4
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10c      	bne.n	8003cb6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	331b      	adds	r3, #27
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	4413      	add	r3, r2
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	0d5b      	lsrs	r3, r3, #21
 8003cac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e00b      	b.n	8003cce <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	331b      	adds	r3, #27
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	4413      	add	r3, r2
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	08db      	lsrs	r3, r3, #3
 8003cc6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	331b      	adds	r3, #27
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	4413      	add	r3, r2
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0202 	and.w	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	331b      	adds	r3, #27
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	4413      	add	r3, r2
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 020f 	and.w	r2, r3, #15
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	331b      	adds	r3, #27
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	4413      	add	r3, r2
 8003d08:	3304      	adds	r3, #4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	331b      	adds	r3, #27
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	4413      	add	r3, r2
 8003d20:	3304      	adds	r3, #4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	0a1a      	lsrs	r2, r3, #8
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	3301      	adds	r3, #1
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	0c1a      	lsrs	r2, r3, #16
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	3302      	adds	r3, #2
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	0e1a      	lsrs	r2, r3, #24
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	3303      	adds	r3, #3
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	3304      	adds	r3, #4
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	0a1a      	lsrs	r2, r3, #8
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	3305      	adds	r3, #5
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	0c1a      	lsrs	r2, r3, #16
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	3306      	adds	r3, #6
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	0e1a      	lsrs	r2, r3, #24
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	3307      	adds	r3, #7
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d108      	bne.n	8003e0e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0220 	orr.w	r2, r2, #32
 8003e0a:	60da      	str	r2, [r3, #12]
 8003e0c:	e007      	b.n	8003e1e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0220 	orr.w	r2, r2, #32
 8003e1c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e006      	b.n	8003e30 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
  }
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e4c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d002      	beq.n	8003e5a <HAL_CAN_ActivateNotification+0x1e>
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d109      	bne.n	8003e6e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6959      	ldr	r1, [r3, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e006      	b.n	8003e7c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d07c      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d023      	beq.n	8003f20 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2201      	movs	r2, #1
 8003ede:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f97d 	bl	80041ea <HAL_CAN_TxMailbox0CompleteCallback>
 8003ef0:	e016      	b.n	8003f20 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d004      	beq.n	8003f06 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
 8003f04:	e00c      	b.n	8003f20 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
 8003f18:	e002      	b.n	8003f20 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f983 	bl	8004226 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d024      	beq.n	8003f74 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f95d 	bl	80041fe <HAL_CAN_TxMailbox1CompleteCallback>
 8003f44:	e016      	b.n	8003f74 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d004      	beq.n	8003f5a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
 8003f58:	e00c      	b.n	8003f74 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d004      	beq.n	8003f6e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6c:	e002      	b.n	8003f74 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f963 	bl	800423a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d024      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f93d 	bl	8004212 <HAL_CAN_TxMailbox2CompleteCallback>
 8003f98:	e016      	b.n	8003fc8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	e00c      	b.n	8003fc8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc0:	e002      	b.n	8003fc8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f943 	bl	800424e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00c      	beq.n	8003fec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2210      	movs	r2, #16
 8003fea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d006      	beq.n	800400e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2208      	movs	r2, #8
 8004006:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f934 	bl	8004276 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f91b 	bl	8004262 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00c      	beq.n	8004050 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004046:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2210      	movs	r2, #16
 800404e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00b      	beq.n	8004072 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d006      	beq.n	8004072 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2208      	movs	r2, #8
 800406a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f916 	bl	800429e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f8fd 	bl	800428a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d006      	beq.n	80040b2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2210      	movs	r2, #16
 80040aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f900 	bl	80042b2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00b      	beq.n	80040d4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d006      	beq.n	80040d4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2208      	movs	r2, #8
 80040cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f8f9 	bl	80042c6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d075      	beq.n	80041ca <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d06c      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800410a:	2b00      	cmp	r3, #0
 800410c:	d008      	beq.n	8004120 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	f043 0302 	orr.w	r3, r3, #2
 800411e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	f043 0304 	orr.w	r3, r3, #4
 800413a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004142:	2b00      	cmp	r3, #0
 8004144:	d03d      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800414c:	2b00      	cmp	r3, #0
 800414e:	d038      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004156:	2b30      	cmp	r3, #48	; 0x30
 8004158:	d017      	beq.n	800418a <HAL_CAN_IRQHandler+0x302>
 800415a:	2b30      	cmp	r3, #48	; 0x30
 800415c:	d804      	bhi.n	8004168 <HAL_CAN_IRQHandler+0x2e0>
 800415e:	2b10      	cmp	r3, #16
 8004160:	d009      	beq.n	8004176 <HAL_CAN_IRQHandler+0x2ee>
 8004162:	2b20      	cmp	r3, #32
 8004164:	d00c      	beq.n	8004180 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004166:	e024      	b.n	80041b2 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8004168:	2b50      	cmp	r3, #80	; 0x50
 800416a:	d018      	beq.n	800419e <HAL_CAN_IRQHandler+0x316>
 800416c:	2b60      	cmp	r3, #96	; 0x60
 800416e:	d01b      	beq.n	80041a8 <HAL_CAN_IRQHandler+0x320>
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d00f      	beq.n	8004194 <HAL_CAN_IRQHandler+0x30c>
            break;
 8004174:	e01d      	b.n	80041b2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	f043 0308 	orr.w	r3, r3, #8
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800417e:	e018      	b.n	80041b2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	f043 0310 	orr.w	r3, r3, #16
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004188:	e013      	b.n	80041b2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	f043 0320 	orr.w	r3, r3, #32
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004192:	e00e      	b.n	80041b2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800419c:	e009      	b.n	80041b2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041a6:	e004      	b.n	80041b2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2204      	movs	r2, #4
 80041c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f87c 	bl	80042da <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80041e2:	bf00      	nop
 80041e4:	3728      	adds	r7, #40	; 0x28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <__NVIC_SetPriorityGrouping+0x44>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800430c:	4013      	ands	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800431c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004322:	4a04      	ldr	r2, [pc, #16]	; (8004334 <__NVIC_SetPriorityGrouping+0x44>)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	60d3      	str	r3, [r2, #12]
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800433c:	4b04      	ldr	r3, [pc, #16]	; (8004350 <__NVIC_GetPriorityGrouping+0x18>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	0a1b      	lsrs	r3, r3, #8
 8004342:	f003 0307 	and.w	r3, r3, #7
}
 8004346:	4618      	mov	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	2b00      	cmp	r3, #0
 8004364:	db0b      	blt.n	800437e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	f003 021f 	and.w	r2, r3, #31
 800436c:	4907      	ldr	r1, [pc, #28]	; (800438c <__NVIC_EnableIRQ+0x38>)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2001      	movs	r0, #1
 8004376:	fa00 f202 	lsl.w	r2, r0, r2
 800437a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	e000e100 	.word	0xe000e100

08004390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	6039      	str	r1, [r7, #0]
 800439a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800439c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	db0a      	blt.n	80043ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	490c      	ldr	r1, [pc, #48]	; (80043dc <__NVIC_SetPriority+0x4c>)
 80043aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ae:	0112      	lsls	r2, r2, #4
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	440b      	add	r3, r1
 80043b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043b8:	e00a      	b.n	80043d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4908      	ldr	r1, [pc, #32]	; (80043e0 <__NVIC_SetPriority+0x50>)
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	3b04      	subs	r3, #4
 80043c8:	0112      	lsls	r2, r2, #4
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	440b      	add	r3, r1
 80043ce:	761a      	strb	r2, [r3, #24]
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	e000e100 	.word	0xe000e100
 80043e0:	e000ed00 	.word	0xe000ed00

080043e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b089      	sub	sp, #36	; 0x24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f1c3 0307 	rsb	r3, r3, #7
 80043fe:	2b04      	cmp	r3, #4
 8004400:	bf28      	it	cs
 8004402:	2304      	movcs	r3, #4
 8004404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3304      	adds	r3, #4
 800440a:	2b06      	cmp	r3, #6
 800440c:	d902      	bls.n	8004414 <NVIC_EncodePriority+0x30>
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	3b03      	subs	r3, #3
 8004412:	e000      	b.n	8004416 <NVIC_EncodePriority+0x32>
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004418:	f04f 32ff 	mov.w	r2, #4294967295
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	43da      	mvns	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	401a      	ands	r2, r3
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800442c:	f04f 31ff 	mov.w	r1, #4294967295
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	fa01 f303 	lsl.w	r3, r1, r3
 8004436:	43d9      	mvns	r1, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800443c:	4313      	orrs	r3, r2
         );
}
 800443e:	4618      	mov	r0, r3
 8004440:	3724      	adds	r7, #36	; 0x24
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3b01      	subs	r3, #1
 8004458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800445c:	d301      	bcc.n	8004462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800445e:	2301      	movs	r3, #1
 8004460:	e00f      	b.n	8004482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004462:	4a0a      	ldr	r2, [pc, #40]	; (800448c <SysTick_Config+0x40>)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3b01      	subs	r3, #1
 8004468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800446a:	210f      	movs	r1, #15
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	f7ff ff8e 	bl	8004390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <SysTick_Config+0x40>)
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800447a:	4b04      	ldr	r3, [pc, #16]	; (800448c <SysTick_Config+0x40>)
 800447c:	2207      	movs	r2, #7
 800447e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	e000e010 	.word	0xe000e010

08004490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ff29 	bl	80042f0 <__NVIC_SetPriorityGrouping>
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b086      	sub	sp, #24
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	4603      	mov	r3, r0
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044b8:	f7ff ff3e 	bl	8004338 <__NVIC_GetPriorityGrouping>
 80044bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	6978      	ldr	r0, [r7, #20]
 80044c4:	f7ff ff8e 	bl	80043e4 <NVIC_EncodePriority>
 80044c8:	4602      	mov	r2, r0
 80044ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff ff5d 	bl	8004390 <__NVIC_SetPriority>
}
 80044d6:	bf00      	nop
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	4603      	mov	r3, r0
 80044e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff31 	bl	8004354 <__NVIC_EnableIRQ>
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff ffa2 	bl	800444c <SysTick_Config>
 8004508:	4603      	mov	r3, r0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004520:	f7fe fd5e 	bl	8002fe0 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e099      	b.n	8004664 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004550:	e00f      	b.n	8004572 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004552:	f7fe fd45 	bl	8002fe0 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b05      	cmp	r3, #5
 800455e:	d908      	bls.n	8004572 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2203      	movs	r2, #3
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e078      	b.n	8004664 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e8      	bne.n	8004552 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4b38      	ldr	r3, [pc, #224]	; (800466c <HAL_DMA_Init+0x158>)
 800458c:	4013      	ands	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800459e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d107      	bne.n	80045dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	4313      	orrs	r3, r2
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f023 0307 	bic.w	r3, r3, #7
 80045f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b04      	cmp	r3, #4
 8004604:	d117      	bne.n	8004636 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00e      	beq.n	8004636 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fa6f 	bl	8004afc <DMA_CheckFifoParam>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2240      	movs	r2, #64	; 0x40
 8004628:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004632:	2301      	movs	r3, #1
 8004634:	e016      	b.n	8004664 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fa26 	bl	8004a90 <DMA_CalcBaseAndBitshift>
 8004644:	4603      	mov	r3, r0
 8004646:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464c:	223f      	movs	r2, #63	; 0x3f
 800464e:	409a      	lsls	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	f010803f 	.word	0xf010803f

08004670 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_DMA_Start_IT+0x26>
 8004692:	2302      	movs	r3, #2
 8004694:	e040      	b.n	8004718 <HAL_DMA_Start_IT+0xa8>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d12f      	bne.n	800470a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f9b8 	bl	8004a34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	223f      	movs	r2, #63	; 0x3f
 80046ca:	409a      	lsls	r2, r3
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0216 	orr.w	r2, r2, #22
 80046de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0208 	orr.w	r2, r2, #8
 80046f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e005      	b.n	8004716 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004712:	2302      	movs	r3, #2
 8004714:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004716:	7dfb      	ldrb	r3, [r7, #23]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800472c:	4b92      	ldr	r3, [pc, #584]	; (8004978 <HAL_DMA_IRQHandler+0x258>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a92      	ldr	r2, [pc, #584]	; (800497c <HAL_DMA_IRQHandler+0x25c>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	0a9b      	lsrs	r3, r3, #10
 8004738:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474a:	2208      	movs	r2, #8
 800474c:	409a      	lsls	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01a      	beq.n	800478c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d013      	beq.n	800478c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0204 	bic.w	r2, r2, #4
 8004772:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004778:	2208      	movs	r2, #8
 800477a:	409a      	lsls	r2, r3
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	f043 0201 	orr.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	2201      	movs	r2, #1
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d012      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ae:	2201      	movs	r2, #1
 80047b0:	409a      	lsls	r2, r3
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ba:	f043 0202 	orr.w	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	2204      	movs	r2, #4
 80047c8:	409a      	lsls	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d012      	beq.n	80047f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e4:	2204      	movs	r2, #4
 80047e6:	409a      	lsls	r2, r3
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f0:	f043 0204 	orr.w	r2, r3, #4
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fc:	2210      	movs	r2, #16
 80047fe:	409a      	lsls	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d043      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d03c      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	2210      	movs	r2, #16
 800481c:	409a      	lsls	r2, r3
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d018      	beq.n	8004862 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d108      	bne.n	8004850 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d024      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4798      	blx	r3
 800484e:	e01f      	b.n	8004890 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01b      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
 8004860:	e016      	b.n	8004890 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d107      	bne.n	8004880 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0208 	bic.w	r2, r2, #8
 800487e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004894:	2220      	movs	r2, #32
 8004896:	409a      	lsls	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 808e 	beq.w	80049be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8086 	beq.w	80049be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b6:	2220      	movs	r2, #32
 80048b8:	409a      	lsls	r2, r3
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b05      	cmp	r3, #5
 80048c8:	d136      	bne.n	8004938 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0216 	bic.w	r2, r2, #22
 80048d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_DMA_IRQHandler+0x1da>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0208 	bic.w	r2, r2, #8
 8004908:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490e:	223f      	movs	r2, #63	; 0x3f
 8004910:	409a      	lsls	r2, r3
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492a:	2b00      	cmp	r3, #0
 800492c:	d07d      	beq.n	8004a2a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
        }
        return;
 8004936:	e078      	b.n	8004a2a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d01c      	beq.n	8004980 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d108      	bne.n	8004966 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004958:	2b00      	cmp	r3, #0
 800495a:	d030      	beq.n	80049be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
 8004964:	e02b      	b.n	80049be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d027      	beq.n	80049be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4798      	blx	r3
 8004976:	e022      	b.n	80049be <HAL_DMA_IRQHandler+0x29e>
 8004978:	20000008 	.word	0x20000008
 800497c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0210 	bic.w	r2, r2, #16
 800499c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d032      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d022      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2205      	movs	r2, #5
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0201 	bic.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	3301      	adds	r3, #1
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d307      	bcc.n	8004a06 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f2      	bne.n	80049ea <HAL_DMA_IRQHandler+0x2ca>
 8004a04:	e000      	b.n	8004a08 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004a06:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	4798      	blx	r3
 8004a28:	e000      	b.n	8004a2c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004a2a:	bf00      	nop
    }
  }
}
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop

08004a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d108      	bne.n	8004a74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a72:	e007      	b.n	8004a84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	60da      	str	r2, [r3, #12]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	3b10      	subs	r3, #16
 8004aa0:	4a14      	ldr	r2, [pc, #80]	; (8004af4 <DMA_CalcBaseAndBitshift+0x64>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004aaa:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <DMA_CalcBaseAndBitshift+0x68>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d909      	bls.n	8004ad2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ac6:	f023 0303 	bic.w	r3, r3, #3
 8004aca:	1d1a      	adds	r2, r3, #4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	659a      	str	r2, [r3, #88]	; 0x58
 8004ad0:	e007      	b.n	8004ae2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	aaaaaaab 	.word	0xaaaaaaab
 8004af8:	0800c208 	.word	0x0800c208

08004afc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11f      	bne.n	8004b56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d855      	bhi.n	8004bc8 <DMA_CheckFifoParam+0xcc>
 8004b1c:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <DMA_CheckFifoParam+0x28>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b47 	.word	0x08004b47
 8004b2c:	08004b35 	.word	0x08004b35
 8004b30:	08004bc9 	.word	0x08004bc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d045      	beq.n	8004bcc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b44:	e042      	b.n	8004bcc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b4e:	d13f      	bne.n	8004bd0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b54:	e03c      	b.n	8004bd0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5e:	d121      	bne.n	8004ba4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d836      	bhi.n	8004bd4 <DMA_CheckFifoParam+0xd8>
 8004b66:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <DMA_CheckFifoParam+0x70>)
 8004b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6c:	08004b7d 	.word	0x08004b7d
 8004b70:	08004b83 	.word	0x08004b83
 8004b74:	08004b7d 	.word	0x08004b7d
 8004b78:	08004b95 	.word	0x08004b95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b80:	e02f      	b.n	8004be2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d024      	beq.n	8004bd8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b92:	e021      	b.n	8004bd8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b9c:	d11e      	bne.n	8004bdc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ba2:	e01b      	b.n	8004bdc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d902      	bls.n	8004bb0 <DMA_CheckFifoParam+0xb4>
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d003      	beq.n	8004bb6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bae:	e018      	b.n	8004be2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb4:	e015      	b.n	8004be2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00e      	beq.n	8004be0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc6:	e00b      	b.n	8004be0 <DMA_CheckFifoParam+0xe4>
      break;
 8004bc8:	bf00      	nop
 8004bca:	e00a      	b.n	8004be2 <DMA_CheckFifoParam+0xe6>
      break;
 8004bcc:	bf00      	nop
 8004bce:	e008      	b.n	8004be2 <DMA_CheckFifoParam+0xe6>
      break;
 8004bd0:	bf00      	nop
 8004bd2:	e006      	b.n	8004be2 <DMA_CheckFifoParam+0xe6>
      break;
 8004bd4:	bf00      	nop
 8004bd6:	e004      	b.n	8004be2 <DMA_CheckFifoParam+0xe6>
      break;
 8004bd8:	bf00      	nop
 8004bda:	e002      	b.n	8004be2 <DMA_CheckFifoParam+0xe6>
      break;   
 8004bdc:	bf00      	nop
 8004bde:	e000      	b.n	8004be2 <DMA_CheckFifoParam+0xe6>
      break;
 8004be0:	bf00      	nop
    }
  } 
  
  return status; 
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b089      	sub	sp, #36	; 0x24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	e165      	b.n	8004ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	f040 8154 	bne.w	8004ed2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d00b      	beq.n	8004c4a <HAL_GPIO_Init+0x5a>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d007      	beq.n	8004c4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c3e:	2b11      	cmp	r3, #17
 8004c40:	d003      	beq.n	8004c4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b12      	cmp	r3, #18
 8004c48:	d130      	bne.n	8004cac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	2203      	movs	r2, #3
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c80:	2201      	movs	r2, #1
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	091b      	lsrs	r3, r3, #4
 8004c96:	f003 0201 	and.w	r2, r3, #1
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	2203      	movs	r2, #3
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d003      	beq.n	8004cec <HAL_GPIO_Init+0xfc>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b12      	cmp	r3, #18
 8004cea:	d123      	bne.n	8004d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	08da      	lsrs	r2, r3, #3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3208      	adds	r2, #8
 8004cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	220f      	movs	r2, #15
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	08da      	lsrs	r2, r3, #3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3208      	adds	r2, #8
 8004d2e:	69b9      	ldr	r1, [r7, #24]
 8004d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	2203      	movs	r2, #3
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	43db      	mvns	r3, r3
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f003 0203 	and.w	r2, r3, #3
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80ae 	beq.w	8004ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	4b5c      	ldr	r3, [pc, #368]	; (8004eec <HAL_GPIO_Init+0x2fc>)
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7e:	4a5b      	ldr	r2, [pc, #364]	; (8004eec <HAL_GPIO_Init+0x2fc>)
 8004d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d84:	6453      	str	r3, [r2, #68]	; 0x44
 8004d86:	4b59      	ldr	r3, [pc, #356]	; (8004eec <HAL_GPIO_Init+0x2fc>)
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d92:	4a57      	ldr	r2, [pc, #348]	; (8004ef0 <HAL_GPIO_Init+0x300>)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	089b      	lsrs	r3, r3, #2
 8004d98:	3302      	adds	r3, #2
 8004d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	220f      	movs	r2, #15
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a4e      	ldr	r2, [pc, #312]	; (8004ef4 <HAL_GPIO_Init+0x304>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d025      	beq.n	8004e0a <HAL_GPIO_Init+0x21a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a4d      	ldr	r2, [pc, #308]	; (8004ef8 <HAL_GPIO_Init+0x308>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d01f      	beq.n	8004e06 <HAL_GPIO_Init+0x216>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a4c      	ldr	r2, [pc, #304]	; (8004efc <HAL_GPIO_Init+0x30c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d019      	beq.n	8004e02 <HAL_GPIO_Init+0x212>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a4b      	ldr	r2, [pc, #300]	; (8004f00 <HAL_GPIO_Init+0x310>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <HAL_GPIO_Init+0x20e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a4a      	ldr	r2, [pc, #296]	; (8004f04 <HAL_GPIO_Init+0x314>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00d      	beq.n	8004dfa <HAL_GPIO_Init+0x20a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a49      	ldr	r2, [pc, #292]	; (8004f08 <HAL_GPIO_Init+0x318>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <HAL_GPIO_Init+0x206>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a48      	ldr	r2, [pc, #288]	; (8004f0c <HAL_GPIO_Init+0x31c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d101      	bne.n	8004df2 <HAL_GPIO_Init+0x202>
 8004dee:	2306      	movs	r3, #6
 8004df0:	e00c      	b.n	8004e0c <HAL_GPIO_Init+0x21c>
 8004df2:	2307      	movs	r3, #7
 8004df4:	e00a      	b.n	8004e0c <HAL_GPIO_Init+0x21c>
 8004df6:	2305      	movs	r3, #5
 8004df8:	e008      	b.n	8004e0c <HAL_GPIO_Init+0x21c>
 8004dfa:	2304      	movs	r3, #4
 8004dfc:	e006      	b.n	8004e0c <HAL_GPIO_Init+0x21c>
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e004      	b.n	8004e0c <HAL_GPIO_Init+0x21c>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e002      	b.n	8004e0c <HAL_GPIO_Init+0x21c>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <HAL_GPIO_Init+0x21c>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	f002 0203 	and.w	r2, r2, #3
 8004e12:	0092      	lsls	r2, r2, #2
 8004e14:	4093      	lsls	r3, r2
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e1c:	4934      	ldr	r1, [pc, #208]	; (8004ef0 <HAL_GPIO_Init+0x300>)
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	089b      	lsrs	r3, r3, #2
 8004e22:	3302      	adds	r3, #2
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e2a:	4b39      	ldr	r3, [pc, #228]	; (8004f10 <HAL_GPIO_Init+0x320>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	43db      	mvns	r3, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4013      	ands	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e4e:	4a30      	ldr	r2, [pc, #192]	; (8004f10 <HAL_GPIO_Init+0x320>)
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e54:	4b2e      	ldr	r3, [pc, #184]	; (8004f10 <HAL_GPIO_Init+0x320>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e78:	4a25      	ldr	r2, [pc, #148]	; (8004f10 <HAL_GPIO_Init+0x320>)
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e7e:	4b24      	ldr	r3, [pc, #144]	; (8004f10 <HAL_GPIO_Init+0x320>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	43db      	mvns	r3, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ea2:	4a1b      	ldr	r2, [pc, #108]	; (8004f10 <HAL_GPIO_Init+0x320>)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ea8:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <HAL_GPIO_Init+0x320>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ecc:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <HAL_GPIO_Init+0x320>)
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	61fb      	str	r3, [r7, #28]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2b0f      	cmp	r3, #15
 8004edc:	f67f ae96 	bls.w	8004c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ee0:	bf00      	nop
 8004ee2:	3724      	adds	r7, #36	; 0x24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	40013800 	.word	0x40013800
 8004ef4:	40020000 	.word	0x40020000
 8004ef8:	40020400 	.word	0x40020400
 8004efc:	40020800 	.word	0x40020800
 8004f00:	40020c00 	.word	0x40020c00
 8004f04:	40021000 	.word	0x40021000
 8004f08:	40021400 	.word	0x40021400
 8004f0c:	40021800 	.word	0x40021800
 8004f10:	40013c00 	.word	0x40013c00

08004f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	807b      	strh	r3, [r7, #2]
 8004f20:	4613      	mov	r3, r2
 8004f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f24:	787b      	ldrb	r3, [r7, #1]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f2a:	887a      	ldrh	r2, [r7, #2]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f30:	e003      	b.n	8004f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f32:	887b      	ldrh	r3, [r7, #2]
 8004f34:	041a      	lsls	r2, r3, #16
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	619a      	str	r2, [r3, #24]
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0cc      	b.n	80050f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f5c:	4b68      	ldr	r3, [pc, #416]	; (8005100 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d90c      	bls.n	8004f84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6a:	4b65      	ldr	r3, [pc, #404]	; (8005100 <HAL_RCC_ClockConfig+0x1b8>)
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f72:	4b63      	ldr	r3, [pc, #396]	; (8005100 <HAL_RCC_ClockConfig+0x1b8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0b8      	b.n	80050f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d020      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f9c:	4b59      	ldr	r3, [pc, #356]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4a58      	ldr	r2, [pc, #352]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fb4:	4b53      	ldr	r3, [pc, #332]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	4a52      	ldr	r2, [pc, #328]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc0:	4b50      	ldr	r3, [pc, #320]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	494d      	ldr	r1, [pc, #308]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d044      	beq.n	8005068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d107      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe6:	4b47      	ldr	r3, [pc, #284]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d119      	bne.n	8005026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e07f      	b.n	80050f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d003      	beq.n	8005006 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005002:	2b03      	cmp	r3, #3
 8005004:	d107      	bne.n	8005016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005006:	4b3f      	ldr	r3, [pc, #252]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e06f      	b.n	80050f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005016:	4b3b      	ldr	r3, [pc, #236]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e067      	b.n	80050f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005026:	4b37      	ldr	r3, [pc, #220]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f023 0203 	bic.w	r2, r3, #3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4934      	ldr	r1, [pc, #208]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 8005034:	4313      	orrs	r3, r2
 8005036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005038:	f7fd ffd2 	bl	8002fe0 <HAL_GetTick>
 800503c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503e:	e00a      	b.n	8005056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005040:	f7fd ffce 	bl	8002fe0 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f241 3288 	movw	r2, #5000	; 0x1388
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e04f      	b.n	80050f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005056:	4b2b      	ldr	r3, [pc, #172]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 020c 	and.w	r2, r3, #12
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	429a      	cmp	r2, r3
 8005066:	d1eb      	bne.n	8005040 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005068:	4b25      	ldr	r3, [pc, #148]	; (8005100 <HAL_RCC_ClockConfig+0x1b8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d20c      	bcs.n	8005090 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005076:	4b22      	ldr	r3, [pc, #136]	; (8005100 <HAL_RCC_ClockConfig+0x1b8>)
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800507e:	4b20      	ldr	r3, [pc, #128]	; (8005100 <HAL_RCC_ClockConfig+0x1b8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d001      	beq.n	8005090 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e032      	b.n	80050f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800509c:	4b19      	ldr	r3, [pc, #100]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	4916      	ldr	r1, [pc, #88]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ba:	4b12      	ldr	r3, [pc, #72]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	490e      	ldr	r1, [pc, #56]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050ce:	f000 fb7f 	bl	80057d0 <HAL_RCC_GetSysClockFreq>
 80050d2:	4601      	mov	r1, r0
 80050d4:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	091b      	lsrs	r3, r3, #4
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 80050e0:	5cd3      	ldrb	r3, [r2, r3]
 80050e2:	fa21 f303 	lsr.w	r3, r1, r3
 80050e6:	4a09      	ldr	r2, [pc, #36]	; (800510c <HAL_RCC_ClockConfig+0x1c4>)
 80050e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050ea:	4b09      	ldr	r3, [pc, #36]	; (8005110 <HAL_RCC_ClockConfig+0x1c8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fd ff32 	bl	8002f58 <HAL_InitTick>

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40023c00 	.word	0x40023c00
 8005104:	40023800 	.word	0x40023800
 8005108:	0800c1f0 	.word	0x0800c1f0
 800510c:	20000008 	.word	0x20000008
 8005110:	2000000c 	.word	0x2000000c

08005114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005118:	4b03      	ldr	r3, [pc, #12]	; (8005128 <HAL_RCC_GetHCLKFreq+0x14>)
 800511a:	681b      	ldr	r3, [r3, #0]
}
 800511c:	4618      	mov	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000008 	.word	0x20000008

0800512c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005130:	f7ff fff0 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 8005134:	4601      	mov	r1, r0
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	0a9b      	lsrs	r3, r3, #10
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	4a03      	ldr	r2, [pc, #12]	; (8005150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005142:	5cd3      	ldrb	r3, [r2, r3]
 8005144:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005148:	4618      	mov	r0, r3
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40023800 	.word	0x40023800
 8005150:	0800c200 	.word	0x0800c200

08005154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005158:	f7ff ffdc 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 800515c:	4601      	mov	r1, r0
 800515e:	4b05      	ldr	r3, [pc, #20]	; (8005174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	0b5b      	lsrs	r3, r3, #13
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	4a03      	ldr	r2, [pc, #12]	; (8005178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800516a:	5cd3      	ldrb	r3, [r2, r3]
 800516c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005170:	4618      	mov	r0, r3
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40023800 	.word	0x40023800
 8005178:	0800c200 	.word	0x0800c200

0800517c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08c      	sub	sp, #48	; 0x30
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d010      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80051b4:	4b6f      	ldr	r3, [pc, #444]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ba:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	496c      	ldr	r1, [pc, #432]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80051d2:	2301      	movs	r3, #1
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d010      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80051e2:	4b64      	ldr	r3, [pc, #400]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f0:	4960      	ldr	r1, [pc, #384]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005200:	2301      	movs	r3, #1
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d017      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005210:	4b58      	ldr	r3, [pc, #352]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	4955      	ldr	r1, [pc, #340]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522e:	d101      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005230:	2301      	movs	r3, #1
 8005232:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800523c:	2301      	movs	r3, #1
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d017      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800524c:	4b49      	ldr	r3, [pc, #292]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800524e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005252:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525a:	4946      	ldr	r1, [pc, #280]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800526a:	d101      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800526c:	2301      	movs	r3, #1
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005278:	2301      	movs	r3, #1
 800527a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 808a 	beq.w	800539e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800528a:	2300      	movs	r3, #0
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	4b39      	ldr	r3, [pc, #228]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	4a38      	ldr	r2, [pc, #224]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005298:	6413      	str	r3, [r2, #64]	; 0x40
 800529a:	4b36      	ldr	r3, [pc, #216]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052a6:	4b34      	ldr	r3, [pc, #208]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a33      	ldr	r2, [pc, #204]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80052ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052b2:	f7fd fe95 	bl	8002fe0 <HAL_GetTick>
 80052b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052ba:	f7fd fe91 	bl	8002fe0 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e278      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052cc:	4b2a      	ldr	r3, [pc, #168]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052d8:	4b26      	ldr	r3, [pc, #152]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d02f      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d028      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052f6:	4b1f      	ldr	r3, [pc, #124]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fe:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005300:	4b1e      	ldr	r3, [pc, #120]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005302:	2201      	movs	r2, #1
 8005304:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005306:	4b1d      	ldr	r3, [pc, #116]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800530c:	4a19      	ldr	r2, [pc, #100]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005312:	4b18      	ldr	r3, [pc, #96]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	d114      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800531e:	f7fd fe5f 	bl	8002fe0 <HAL_GetTick>
 8005322:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005324:	e00a      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005326:	f7fd fe5b 	bl	8002fe0 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	f241 3288 	movw	r2, #5000	; 0x1388
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e240      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533c:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800533e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0ee      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005354:	d114      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005356:	4b07      	ldr	r3, [pc, #28]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536a:	4902      	ldr	r1, [pc, #8]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800536c:	4313      	orrs	r3, r2
 800536e:	608b      	str	r3, [r1, #8]
 8005370:	e00c      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800
 8005378:	40007000 	.word	0x40007000
 800537c:	42470e40 	.word	0x42470e40
 8005380:	4b4a      	ldr	r3, [pc, #296]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4a49      	ldr	r2, [pc, #292]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005386:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800538a:	6093      	str	r3, [r2, #8]
 800538c:	4b47      	ldr	r3, [pc, #284]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800538e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005398:	4944      	ldr	r1, [pc, #272]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800539a:	4313      	orrs	r3, r2
 800539c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0310 	and.w	r3, r3, #16
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d004      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80053b0:	4b3f      	ldr	r3, [pc, #252]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80053b2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80053c0:	4b3a      	ldr	r3, [pc, #232]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80053c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ce:	4937      	ldr	r1, [pc, #220]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053e2:	4b32      	ldr	r3, [pc, #200]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80053e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053e8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f0:	492e      	ldr	r1, [pc, #184]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005400:	2b00      	cmp	r3, #0
 8005402:	d011      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005404:	4b29      	ldr	r3, [pc, #164]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800540a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	4926      	ldr	r1, [pc, #152]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005422:	d101      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005424:	2301      	movs	r3, #1
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005434:	4b1d      	ldr	r3, [pc, #116]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800543a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	491a      	ldr	r1, [pc, #104]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005452:	2b00      	cmp	r3, #0
 8005454:	d011      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005456:	4b15      	ldr	r3, [pc, #84]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800545c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005464:	4911      	ldr	r1, [pc, #68]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005474:	d101      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005476:	2301      	movs	r3, #1
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547c:	2b01      	cmp	r3, #1
 800547e:	d005      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005488:	f040 80ff 	bne.w	800568a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005492:	f7fd fda5 	bl	8002fe0 <HAL_GetTick>
 8005496:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005498:	e00e      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800549a:	f7fd fda1 	bl	8002fe0 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d907      	bls.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e188      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x642>
 80054ac:	40023800 	.word	0x40023800
 80054b0:	424711e0 	.word	0x424711e0
 80054b4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054b8:	4b7e      	ldr	r3, [pc, #504]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1ea      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d009      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d028      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d124      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80054ec:	4b71      	ldr	r3, [pc, #452]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054f2:	0c1b      	lsrs	r3, r3, #16
 80054f4:	f003 0303 	and.w	r3, r3, #3
 80054f8:	3301      	adds	r3, #1
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054fe:	4b6d      	ldr	r3, [pc, #436]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005504:	0e1b      	lsrs	r3, r3, #24
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	019b      	lsls	r3, r3, #6
 8005516:	431a      	orrs	r2, r3
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	3b01      	subs	r3, #1
 800551e:	041b      	lsls	r3, r3, #16
 8005520:	431a      	orrs	r2, r3
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	061b      	lsls	r3, r3, #24
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	071b      	lsls	r3, r3, #28
 800552e:	4961      	ldr	r1, [pc, #388]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d004      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800554a:	d00a      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005554:	2b00      	cmp	r3, #0
 8005556:	d035      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005560:	d130      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005562:	4b54      	ldr	r3, [pc, #336]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005568:	0c1b      	lsrs	r3, r3, #16
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	3301      	adds	r3, #1
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005574:	4b4f      	ldr	r3, [pc, #316]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800557a:	0f1b      	lsrs	r3, r3, #28
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	019b      	lsls	r3, r3, #6
 800558c:	431a      	orrs	r2, r3
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	3b01      	subs	r3, #1
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	061b      	lsls	r3, r3, #24
 800559e:	431a      	orrs	r2, r3
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	071b      	lsls	r3, r3, #28
 80055a4:	4943      	ldr	r1, [pc, #268]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055ac:	4b41      	ldr	r3, [pc, #260]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b2:	f023 021f 	bic.w	r2, r3, #31
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	3b01      	subs	r3, #1
 80055bc:	493d      	ldr	r1, [pc, #244]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d029      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d8:	d124      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80055da:	4b36      	ldr	r3, [pc, #216]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e0:	0c1b      	lsrs	r3, r3, #16
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	3301      	adds	r3, #1
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055ec:	4b31      	ldr	r3, [pc, #196]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f2:	0f1b      	lsrs	r3, r3, #28
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	019b      	lsls	r3, r3, #6
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	3b01      	subs	r3, #1
 800560e:	041b      	lsls	r3, r3, #16
 8005610:	431a      	orrs	r2, r3
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	061b      	lsls	r3, r3, #24
 8005616:	431a      	orrs	r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	071b      	lsls	r3, r3, #28
 800561c:	4925      	ldr	r1, [pc, #148]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800562c:	2b00      	cmp	r3, #0
 800562e:	d016      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	019b      	lsls	r3, r3, #6
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	085b      	lsrs	r3, r3, #1
 8005642:	3b01      	subs	r3, #1
 8005644:	041b      	lsls	r3, r3, #16
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	061b      	lsls	r3, r3, #24
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	071b      	lsls	r3, r3, #28
 8005656:	4917      	ldr	r1, [pc, #92]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800565e:	4b16      	ldr	r3, [pc, #88]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005660:	2201      	movs	r2, #1
 8005662:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005664:	f7fd fcbc 	bl	8002fe0 <HAL_GetTick>
 8005668:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800566a:	e008      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800566c:	f7fd fcb8 	bl	8002fe0 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e09f      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	2b01      	cmp	r3, #1
 800568e:	f040 8095 	bne.w	80057bc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005692:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005698:	f7fd fca2 	bl	8002fe0 <HAL_GetTick>
 800569c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800569e:	e00f      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80056a0:	f7fd fc9e 	bl	8002fe0 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d908      	bls.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e085      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x642>
 80056b2:	bf00      	nop
 80056b4:	40023800 	.word	0x40023800
 80056b8:	42470068 	.word	0x42470068
 80056bc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056c0:	4b41      	ldr	r3, [pc, #260]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056cc:	d0e8      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d02b      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d127      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80056f6:	4b34      	ldr	r3, [pc, #208]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fc:	0c1b      	lsrs	r3, r3, #16
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	3301      	adds	r3, #1
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	019b      	lsls	r3, r3, #6
 8005712:	431a      	orrs	r2, r3
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	3b01      	subs	r3, #1
 800571a:	041b      	lsls	r3, r3, #16
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	061b      	lsls	r3, r3, #24
 8005724:	4928      	ldr	r1, [pc, #160]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800572c:	4b26      	ldr	r3, [pc, #152]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800572e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005732:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	3b01      	subs	r3, #1
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	4922      	ldr	r1, [pc, #136]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574e:	2b00      	cmp	r3, #0
 8005750:	d01d      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800575a:	d118      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800575c:	4b1a      	ldr	r3, [pc, #104]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005762:	0e1b      	lsrs	r3, r3, #24
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	019b      	lsls	r3, r3, #6
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	085b      	lsrs	r3, r3, #1
 800577c:	3b01      	subs	r3, #1
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	431a      	orrs	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	061b      	lsls	r3, r3, #24
 8005786:	4910      	ldr	r1, [pc, #64]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800578e:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005794:	f7fd fc24 	bl	8002fe0 <HAL_GetTick>
 8005798:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800579c:	f7fd fc20 	bl	8002fe0 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e007      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057ae:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ba:	d1ef      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3730      	adds	r7, #48	; 0x30
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40023800 	.word	0x40023800
 80057cc:	42470070 	.word	0x42470070

080057d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057ea:	4b9f      	ldr	r3, [pc, #636]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x298>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
 80057f2:	2b0c      	cmp	r3, #12
 80057f4:	f200 8130 	bhi.w	8005a58 <HAL_RCC_GetSysClockFreq+0x288>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <HAL_RCC_GetSysClockFreq+0x30>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005835 	.word	0x08005835
 8005804:	08005a59 	.word	0x08005a59
 8005808:	08005a59 	.word	0x08005a59
 800580c:	08005a59 	.word	0x08005a59
 8005810:	0800583b 	.word	0x0800583b
 8005814:	08005a59 	.word	0x08005a59
 8005818:	08005a59 	.word	0x08005a59
 800581c:	08005a59 	.word	0x08005a59
 8005820:	08005841 	.word	0x08005841
 8005824:	08005a59 	.word	0x08005a59
 8005828:	08005a59 	.word	0x08005a59
 800582c:	08005a59 	.word	0x08005a59
 8005830:	0800594f 	.word	0x0800594f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005834:	4b8d      	ldr	r3, [pc, #564]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x29c>)
 8005836:	613b      	str	r3, [r7, #16]
       break;
 8005838:	e111      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800583a:	4b8d      	ldr	r3, [pc, #564]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800583c:	613b      	str	r3, [r7, #16]
      break;
 800583e:	e10e      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005840:	4b89      	ldr	r3, [pc, #548]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x298>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005848:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800584a:	4b87      	ldr	r3, [pc, #540]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x298>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d023      	beq.n	800589e <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005856:	4b84      	ldr	r3, [pc, #528]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x298>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	099b      	lsrs	r3, r3, #6
 800585c:	f04f 0400 	mov.w	r4, #0
 8005860:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	ea03 0501 	and.w	r5, r3, r1
 800586c:	ea04 0602 	and.w	r6, r4, r2
 8005870:	4a7f      	ldr	r2, [pc, #508]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005872:	fb02 f106 	mul.w	r1, r2, r6
 8005876:	2200      	movs	r2, #0
 8005878:	fb02 f205 	mul.w	r2, r2, r5
 800587c:	440a      	add	r2, r1
 800587e:	497c      	ldr	r1, [pc, #496]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005880:	fba5 0101 	umull	r0, r1, r5, r1
 8005884:	1853      	adds	r3, r2, r1
 8005886:	4619      	mov	r1, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f04f 0400 	mov.w	r4, #0
 800588e:	461a      	mov	r2, r3
 8005890:	4623      	mov	r3, r4
 8005892:	f7fb f903 	bl	8000a9c <__aeabi_uldivmod>
 8005896:	4603      	mov	r3, r0
 8005898:	460c      	mov	r4, r1
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	e049      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800589e:	4b72      	ldr	r3, [pc, #456]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x298>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	099b      	lsrs	r3, r3, #6
 80058a4:	f04f 0400 	mov.w	r4, #0
 80058a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	ea03 0501 	and.w	r5, r3, r1
 80058b4:	ea04 0602 	and.w	r6, r4, r2
 80058b8:	4629      	mov	r1, r5
 80058ba:	4632      	mov	r2, r6
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	f04f 0400 	mov.w	r4, #0
 80058c4:	0154      	lsls	r4, r2, #5
 80058c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80058ca:	014b      	lsls	r3, r1, #5
 80058cc:	4619      	mov	r1, r3
 80058ce:	4622      	mov	r2, r4
 80058d0:	1b49      	subs	r1, r1, r5
 80058d2:	eb62 0206 	sbc.w	r2, r2, r6
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	f04f 0400 	mov.w	r4, #0
 80058de:	0194      	lsls	r4, r2, #6
 80058e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80058e4:	018b      	lsls	r3, r1, #6
 80058e6:	1a5b      	subs	r3, r3, r1
 80058e8:	eb64 0402 	sbc.w	r4, r4, r2
 80058ec:	f04f 0100 	mov.w	r1, #0
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	00e2      	lsls	r2, r4, #3
 80058f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058fa:	00d9      	lsls	r1, r3, #3
 80058fc:	460b      	mov	r3, r1
 80058fe:	4614      	mov	r4, r2
 8005900:	195b      	adds	r3, r3, r5
 8005902:	eb44 0406 	adc.w	r4, r4, r6
 8005906:	f04f 0100 	mov.w	r1, #0
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	02a2      	lsls	r2, r4, #10
 8005910:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005914:	0299      	lsls	r1, r3, #10
 8005916:	460b      	mov	r3, r1
 8005918:	4614      	mov	r4, r2
 800591a:	4618      	mov	r0, r3
 800591c:	4621      	mov	r1, r4
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f04f 0400 	mov.w	r4, #0
 8005924:	461a      	mov	r2, r3
 8005926:	4623      	mov	r3, r4
 8005928:	f7fb f8b8 	bl	8000a9c <__aeabi_uldivmod>
 800592c:	4603      	mov	r3, r0
 800592e:	460c      	mov	r4, r1
 8005930:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005932:	4b4d      	ldr	r3, [pc, #308]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x298>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	f003 0303 	and.w	r3, r3, #3
 800593c:	3301      	adds	r3, #1
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	613b      	str	r3, [r7, #16]
      break;
 800594c:	e087      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800594e:	4b46      	ldr	r3, [pc, #280]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x298>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005956:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005958:	4b43      	ldr	r3, [pc, #268]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x298>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d023      	beq.n	80059ac <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005964:	4b40      	ldr	r3, [pc, #256]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x298>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	099b      	lsrs	r3, r3, #6
 800596a:	f04f 0400 	mov.w	r4, #0
 800596e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	ea03 0501 	and.w	r5, r3, r1
 800597a:	ea04 0602 	and.w	r6, r4, r2
 800597e:	4a3c      	ldr	r2, [pc, #240]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005980:	fb02 f106 	mul.w	r1, r2, r6
 8005984:	2200      	movs	r2, #0
 8005986:	fb02 f205 	mul.w	r2, r2, r5
 800598a:	440a      	add	r2, r1
 800598c:	4938      	ldr	r1, [pc, #224]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800598e:	fba5 0101 	umull	r0, r1, r5, r1
 8005992:	1853      	adds	r3, r2, r1
 8005994:	4619      	mov	r1, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f04f 0400 	mov.w	r4, #0
 800599c:	461a      	mov	r2, r3
 800599e:	4623      	mov	r3, r4
 80059a0:	f7fb f87c 	bl	8000a9c <__aeabi_uldivmod>
 80059a4:	4603      	mov	r3, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	e049      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ac:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x298>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	099b      	lsrs	r3, r3, #6
 80059b2:	f04f 0400 	mov.w	r4, #0
 80059b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	ea03 0501 	and.w	r5, r3, r1
 80059c2:	ea04 0602 	and.w	r6, r4, r2
 80059c6:	4629      	mov	r1, r5
 80059c8:	4632      	mov	r2, r6
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	f04f 0400 	mov.w	r4, #0
 80059d2:	0154      	lsls	r4, r2, #5
 80059d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059d8:	014b      	lsls	r3, r1, #5
 80059da:	4619      	mov	r1, r3
 80059dc:	4622      	mov	r2, r4
 80059de:	1b49      	subs	r1, r1, r5
 80059e0:	eb62 0206 	sbc.w	r2, r2, r6
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	f04f 0400 	mov.w	r4, #0
 80059ec:	0194      	lsls	r4, r2, #6
 80059ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80059f2:	018b      	lsls	r3, r1, #6
 80059f4:	1a5b      	subs	r3, r3, r1
 80059f6:	eb64 0402 	sbc.w	r4, r4, r2
 80059fa:	f04f 0100 	mov.w	r1, #0
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	00e2      	lsls	r2, r4, #3
 8005a04:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a08:	00d9      	lsls	r1, r3, #3
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4614      	mov	r4, r2
 8005a0e:	195b      	adds	r3, r3, r5
 8005a10:	eb44 0406 	adc.w	r4, r4, r6
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	02a2      	lsls	r2, r4, #10
 8005a1e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005a22:	0299      	lsls	r1, r3, #10
 8005a24:	460b      	mov	r3, r1
 8005a26:	4614      	mov	r4, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f04f 0400 	mov.w	r4, #0
 8005a32:	461a      	mov	r2, r3
 8005a34:	4623      	mov	r3, r4
 8005a36:	f7fb f831 	bl	8000a9c <__aeabi_uldivmod>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005a40:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <HAL_RCC_GetSysClockFreq+0x298>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	0f1b      	lsrs	r3, r3, #28
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	613b      	str	r3, [r7, #16]
      break;
 8005a56:	e002      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a58:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x29c>)
 8005a5a:	613b      	str	r3, [r7, #16]
      break;
 8005a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a5e:	693b      	ldr	r3, [r7, #16]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	00f42400 	.word	0x00f42400
 8005a70:	017d7840 	.word	0x017d7840

08005a74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8083 	beq.w	8005b94 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a8e:	4b95      	ldr	r3, [pc, #596]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 030c 	and.w	r3, r3, #12
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d019      	beq.n	8005ace <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a9a:	4b92      	ldr	r3, [pc, #584]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d106      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005aa6:	4b8f      	ldr	r3, [pc, #572]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ab2:	d00c      	beq.n	8005ace <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ab4:	4b8b      	ldr	r3, [pc, #556]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005abc:	2b0c      	cmp	r3, #12
 8005abe:	d112      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ac0:	4b88      	ldr	r3, [pc, #544]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005acc:	d10b      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ace:	4b85      	ldr	r3, [pc, #532]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d05b      	beq.n	8005b92 <HAL_RCC_OscConfig+0x11e>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d157      	bne.n	8005b92 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e216      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aee:	d106      	bne.n	8005afe <HAL_RCC_OscConfig+0x8a>
 8005af0:	4b7c      	ldr	r3, [pc, #496]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a7b      	ldr	r2, [pc, #492]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	e01d      	b.n	8005b3a <HAL_RCC_OscConfig+0xc6>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b06:	d10c      	bne.n	8005b22 <HAL_RCC_OscConfig+0xae>
 8005b08:	4b76      	ldr	r3, [pc, #472]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a75      	ldr	r2, [pc, #468]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	4b73      	ldr	r3, [pc, #460]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a72      	ldr	r2, [pc, #456]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	e00b      	b.n	8005b3a <HAL_RCC_OscConfig+0xc6>
 8005b22:	4b70      	ldr	r3, [pc, #448]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a6f      	ldr	r2, [pc, #444]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	4b6d      	ldr	r3, [pc, #436]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a6c      	ldr	r2, [pc, #432]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d013      	beq.n	8005b6a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b42:	f7fd fa4d 	bl	8002fe0 <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b4a:	f7fd fa49 	bl	8002fe0 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b64      	cmp	r3, #100	; 0x64
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e1db      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5c:	4b61      	ldr	r3, [pc, #388]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0f0      	beq.n	8005b4a <HAL_RCC_OscConfig+0xd6>
 8005b68:	e014      	b.n	8005b94 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6a:	f7fd fa39 	bl	8002fe0 <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b72:	f7fd fa35 	bl	8002fe0 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b64      	cmp	r3, #100	; 0x64
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e1c7      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b84:	4b57      	ldr	r3, [pc, #348]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1f0      	bne.n	8005b72 <HAL_RCC_OscConfig+0xfe>
 8005b90:	e000      	b.n	8005b94 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d06f      	beq.n	8005c80 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ba0:	4b50      	ldr	r3, [pc, #320]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 030c 	and.w	r3, r3, #12
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d017      	beq.n	8005bdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005bac:	4b4d      	ldr	r3, [pc, #308]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d105      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005bb8:	4b4a      	ldr	r3, [pc, #296]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bc4:	4b47      	ldr	r3, [pc, #284]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005bcc:	2b0c      	cmp	r3, #12
 8005bce:	d11c      	bne.n	8005c0a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bd0:	4b44      	ldr	r3, [pc, #272]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d116      	bne.n	8005c0a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bdc:	4b41      	ldr	r3, [pc, #260]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x180>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d001      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e18f      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf4:	4b3b      	ldr	r3, [pc, #236]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	4938      	ldr	r1, [pc, #224]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c08:	e03a      	b.n	8005c80 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d020      	beq.n	8005c54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c12:	4b35      	ldr	r3, [pc, #212]	; (8005ce8 <HAL_RCC_OscConfig+0x274>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c18:	f7fd f9e2 	bl	8002fe0 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c20:	f7fd f9de 	bl	8002fe0 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e170      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c32:	4b2c      	ldr	r3, [pc, #176]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0f0      	beq.n	8005c20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c3e:	4b29      	ldr	r3, [pc, #164]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4925      	ldr	r1, [pc, #148]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	600b      	str	r3, [r1, #0]
 8005c52:	e015      	b.n	8005c80 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c54:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <HAL_RCC_OscConfig+0x274>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5a:	f7fd f9c1 	bl	8002fe0 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c62:	f7fd f9bd 	bl	8002fe0 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e14f      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c74:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f0      	bne.n	8005c62 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d037      	beq.n	8005cfc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d016      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c94:	4b15      	ldr	r3, [pc, #84]	; (8005cec <HAL_RCC_OscConfig+0x278>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9a:	f7fd f9a1 	bl	8002fe0 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ca2:	f7fd f99d 	bl	8002fe0 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e12f      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_RCC_OscConfig+0x270>)
 8005cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f0      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x22e>
 8005cc0:	e01c      	b.n	8005cfc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc2:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <HAL_RCC_OscConfig+0x278>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc8:	f7fd f98a 	bl	8002fe0 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cce:	e00f      	b.n	8005cf0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cd0:	f7fd f986 	bl	8002fe0 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d908      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e118      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
 8005ce2:	bf00      	nop
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	42470000 	.word	0x42470000
 8005cec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf0:	4b8a      	ldr	r3, [pc, #552]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e9      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8097 	beq.w	8005e38 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d0e:	4b83      	ldr	r3, [pc, #524]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10f      	bne.n	8005d3a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	4b7f      	ldr	r3, [pc, #508]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	4a7e      	ldr	r2, [pc, #504]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d28:	6413      	str	r3, [r2, #64]	; 0x40
 8005d2a:	4b7c      	ldr	r3, [pc, #496]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d36:	2301      	movs	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3a:	4b79      	ldr	r3, [pc, #484]	; (8005f20 <HAL_RCC_OscConfig+0x4ac>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d118      	bne.n	8005d78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d46:	4b76      	ldr	r3, [pc, #472]	; (8005f20 <HAL_RCC_OscConfig+0x4ac>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a75      	ldr	r2, [pc, #468]	; (8005f20 <HAL_RCC_OscConfig+0x4ac>)
 8005d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d52:	f7fd f945 	bl	8002fe0 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d5a:	f7fd f941 	bl	8002fe0 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e0d3      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6c:	4b6c      	ldr	r3, [pc, #432]	; (8005f20 <HAL_RCC_OscConfig+0x4ac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f0      	beq.n	8005d5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d106      	bne.n	8005d8e <HAL_RCC_OscConfig+0x31a>
 8005d80:	4b66      	ldr	r3, [pc, #408]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d84:	4a65      	ldr	r2, [pc, #404]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005d86:	f043 0301 	orr.w	r3, r3, #1
 8005d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d8c:	e01c      	b.n	8005dc8 <HAL_RCC_OscConfig+0x354>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d10c      	bne.n	8005db0 <HAL_RCC_OscConfig+0x33c>
 8005d96:	4b61      	ldr	r3, [pc, #388]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9a:	4a60      	ldr	r2, [pc, #384]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005d9c:	f043 0304 	orr.w	r3, r3, #4
 8005da0:	6713      	str	r3, [r2, #112]	; 0x70
 8005da2:	4b5e      	ldr	r3, [pc, #376]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	4a5d      	ldr	r2, [pc, #372]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005da8:	f043 0301 	orr.w	r3, r3, #1
 8005dac:	6713      	str	r3, [r2, #112]	; 0x70
 8005dae:	e00b      	b.n	8005dc8 <HAL_RCC_OscConfig+0x354>
 8005db0:	4b5a      	ldr	r3, [pc, #360]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db4:	4a59      	ldr	r2, [pc, #356]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005db6:	f023 0301 	bic.w	r3, r3, #1
 8005dba:	6713      	str	r3, [r2, #112]	; 0x70
 8005dbc:	4b57      	ldr	r3, [pc, #348]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc0:	4a56      	ldr	r2, [pc, #344]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005dc2:	f023 0304 	bic.w	r3, r3, #4
 8005dc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d015      	beq.n	8005dfc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd0:	f7fd f906 	bl	8002fe0 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd6:	e00a      	b.n	8005dee <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dd8:	f7fd f902 	bl	8002fe0 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e092      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dee:	4b4b      	ldr	r3, [pc, #300]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0ee      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x364>
 8005dfa:	e014      	b.n	8005e26 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dfc:	f7fd f8f0 	bl	8002fe0 <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e02:	e00a      	b.n	8005e1a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e04:	f7fd f8ec 	bl	8002fe0 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e07c      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e1a:	4b40      	ldr	r3, [pc, #256]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1ee      	bne.n	8005e04 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d105      	bne.n	8005e38 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2c:	4b3b      	ldr	r3, [pc, #236]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	4a3a      	ldr	r2, [pc, #232]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d068      	beq.n	8005f12 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e40:	4b36      	ldr	r3, [pc, #216]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f003 030c 	and.w	r3, r3, #12
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d060      	beq.n	8005f0e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d145      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e54:	4b33      	ldr	r3, [pc, #204]	; (8005f24 <HAL_RCC_OscConfig+0x4b0>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5a:	f7fd f8c1 	bl	8002fe0 <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e62:	f7fd f8bd 	bl	8002fe0 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e04f      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e74:	4b29      	ldr	r3, [pc, #164]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1f0      	bne.n	8005e62 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	019b      	lsls	r3, r3, #6
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	061b      	lsls	r3, r3, #24
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	071b      	lsls	r3, r3, #28
 8005eac:	491b      	ldr	r1, [pc, #108]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb2:	4b1c      	ldr	r3, [pc, #112]	; (8005f24 <HAL_RCC_OscConfig+0x4b0>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb8:	f7fd f892 	bl	8002fe0 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec0:	f7fd f88e 	bl	8002fe0 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e020      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f0      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x44c>
 8005ede:	e018      	b.n	8005f12 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee0:	4b10      	ldr	r3, [pc, #64]	; (8005f24 <HAL_RCC_OscConfig+0x4b0>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee6:	f7fd f87b 	bl	8002fe0 <HAL_GetTick>
 8005eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eee:	f7fd f877 	bl	8002fe0 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e009      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f00:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1f0      	bne.n	8005eee <HAL_RCC_OscConfig+0x47a>
 8005f0c:	e001      	b.n	8005f12 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	40007000 	.word	0x40007000
 8005f24:	42470060 	.word	0x42470060

08005f28 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e083      	b.n	8006042 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	7f5b      	ldrb	r3, [r3, #29]
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d105      	bne.n	8005f50 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fc fd44 	bl	80029d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	22ca      	movs	r2, #202	; 0xca
 8005f5c:	625a      	str	r2, [r3, #36]	; 0x24
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2253      	movs	r2, #83	; 0x53
 8005f64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 faa8 	bl	80064bc <RTC_EnterInitMode>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d008      	beq.n	8005f84 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	22ff      	movs	r2, #255	; 0xff
 8005f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e05e      	b.n	8006042 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f96:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6899      	ldr	r1, [r3, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	68d2      	ldr	r2, [r2, #12]
 8005fbe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6919      	ldr	r1, [r3, #16]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	041a      	lsls	r2, r3, #16
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fe2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10e      	bne.n	8006010 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fa3a 	bl	800646c <HAL_RTC_WaitForSynchro>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d008      	beq.n	8006010 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	22ff      	movs	r2, #255	; 0xff
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2204      	movs	r2, #4
 800600a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e018      	b.n	8006042 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800601e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699a      	ldr	r2, [r3, #24]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	22ff      	movs	r2, #255	; 0xff
 8006038:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006040:	2300      	movs	r3, #0
  }
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800604a:	b590      	push	{r4, r7, lr}
 800604c:	b087      	sub	sp, #28
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	7f1b      	ldrb	r3, [r3, #28]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_RTC_SetTime+0x1c>
 8006062:	2302      	movs	r3, #2
 8006064:	e0aa      	b.n	80061bc <HAL_RTC_SetTime+0x172>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2202      	movs	r2, #2
 8006070:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d126      	bne.n	80060c6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d102      	bne.n	800608c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2200      	movs	r2, #0
 800608a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fa3f 	bl	8006514 <RTC_ByteToBcd2>
 8006096:	4603      	mov	r3, r0
 8006098:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fa38 	bl	8006514 <RTC_ByteToBcd2>
 80060a4:	4603      	mov	r3, r0
 80060a6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80060a8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	789b      	ldrb	r3, [r3, #2]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fa30 	bl	8006514 <RTC_ByteToBcd2>
 80060b4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80060b6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	78db      	ldrb	r3, [r3, #3]
 80060be:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80060c0:	4313      	orrs	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	e018      	b.n	80060f8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d102      	bne.n	80060da <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2200      	movs	r2, #0
 80060d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80060e6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80060ec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	78db      	ldrb	r3, [r3, #3]
 80060f2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	22ca      	movs	r2, #202	; 0xca
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2253      	movs	r2, #83	; 0x53
 8006106:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f9d7 	bl	80064bc <RTC_EnterInitMode>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	22ff      	movs	r2, #255	; 0xff
 800611a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2204      	movs	r2, #4
 8006120:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e047      	b.n	80061bc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006136:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800613a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800614a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6899      	ldr	r1, [r3, #8]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	431a      	orrs	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006172:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d111      	bne.n	80061a6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f972 	bl	800646c <HAL_RTC_WaitForSynchro>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00b      	beq.n	80061a6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	22ff      	movs	r2, #255	; 0xff
 8006194:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2204      	movs	r2, #4
 800619a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e00a      	b.n	80061bc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	22ff      	movs	r2, #255	; 0xff
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80061ba:	2300      	movs	r3, #0
  }
}
 80061bc:	4618      	mov	r0, r3
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd90      	pop	{r4, r7, pc}

080061c4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80061f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80061fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	0c1b      	lsrs	r3, r3, #16
 8006200:	b2db      	uxtb	r3, r3
 8006202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006206:	b2da      	uxtb	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	0a1b      	lsrs	r3, r3, #8
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006216:	b2da      	uxtb	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006224:	b2da      	uxtb	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	0c1b      	lsrs	r3, r3, #16
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	b2da      	uxtb	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d11a      	bne.n	8006276 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f000 f983 	bl	8006550 <RTC_Bcd2ToByte>
 800624a:	4603      	mov	r3, r0
 800624c:	461a      	mov	r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	785b      	ldrb	r3, [r3, #1]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f97a 	bl	8006550 <RTC_Bcd2ToByte>
 800625c:	4603      	mov	r3, r0
 800625e:	461a      	mov	r2, r3
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	789b      	ldrb	r3, [r3, #2]
 8006268:	4618      	mov	r0, r3
 800626a:	f000 f971 	bl	8006550 <RTC_Bcd2ToByte>
 800626e:	4603      	mov	r3, r0
 8006270:	461a      	mov	r2, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006280:	b590      	push	{r4, r7, lr}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	7f1b      	ldrb	r3, [r3, #28]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_RTC_SetDate+0x1c>
 8006298:	2302      	movs	r3, #2
 800629a:	e094      	b.n	80063c6 <HAL_RTC_SetDate+0x146>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2202      	movs	r2, #2
 80062a6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10e      	bne.n	80062cc <HAL_RTC_SetDate+0x4c>
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d008      	beq.n	80062cc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	f023 0310 	bic.w	r3, r3, #16
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	330a      	adds	r3, #10
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d11c      	bne.n	800630c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	78db      	ldrb	r3, [r3, #3]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 f91c 	bl	8006514 <RTC_ByteToBcd2>
 80062dc:	4603      	mov	r3, r0
 80062de:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	785b      	ldrb	r3, [r3, #1]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 f915 	bl	8006514 <RTC_ByteToBcd2>
 80062ea:	4603      	mov	r3, r0
 80062ec:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80062ee:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	789b      	ldrb	r3, [r3, #2]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 f90d 	bl	8006514 <RTC_ByteToBcd2>
 80062fa:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80062fc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	e00e      	b.n	800632a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	78db      	ldrb	r3, [r3, #3]
 8006310:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006318:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800631e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	22ca      	movs	r2, #202	; 0xca
 8006330:	625a      	str	r2, [r3, #36]	; 0x24
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2253      	movs	r2, #83	; 0x53
 8006338:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 f8be 	bl	80064bc <RTC_EnterInitMode>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00b      	beq.n	800635e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	22ff      	movs	r2, #255	; 0xff
 800634c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2204      	movs	r2, #4
 8006352:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e033      	b.n	80063c6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006368:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800636c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800637c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d111      	bne.n	80063b0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f86d 	bl	800646c <HAL_RTC_WaitForSynchro>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	22ff      	movs	r2, #255	; 0xff
 800639e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2204      	movs	r2, #4
 80063a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e00a      	b.n	80063c6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	22ff      	movs	r2, #255	; 0xff
 80063b6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2201      	movs	r2, #1
 80063bc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80063c4:	2300      	movs	r3, #0
  }
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd90      	pop	{r4, r7, pc}

080063ce <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b086      	sub	sp, #24
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	60f8      	str	r0, [r7, #12]
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	0c1b      	lsrs	r3, r3, #16
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	0a1b      	lsrs	r3, r3, #8
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	b2da      	uxtb	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	b2db      	uxtb	r3, r3
 800640c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006410:	b2da      	uxtb	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	0b5b      	lsrs	r3, r3, #13
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	b2da      	uxtb	r2, r3
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d11a      	bne.n	8006462 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	78db      	ldrb	r3, [r3, #3]
 8006430:	4618      	mov	r0, r3
 8006432:	f000 f88d 	bl	8006550 <RTC_Bcd2ToByte>
 8006436:	4603      	mov	r3, r0
 8006438:	461a      	mov	r2, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	785b      	ldrb	r3, [r3, #1]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f884 	bl	8006550 <RTC_Bcd2ToByte>
 8006448:	4603      	mov	r3, r0
 800644a:	461a      	mov	r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	789b      	ldrb	r3, [r3, #2]
 8006454:	4618      	mov	r0, r3
 8006456:	f000 f87b 	bl	8006550 <RTC_Bcd2ToByte>
 800645a:	4603      	mov	r3, r0
 800645c:	461a      	mov	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006486:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006488:	f7fc fdaa 	bl	8002fe0 <HAL_GetTick>
 800648c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800648e:	e009      	b.n	80064a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006490:	f7fc fda6 	bl	8002fe0 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800649e:	d901      	bls.n	80064a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e007      	b.n	80064b4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0ee      	beq.n	8006490 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d119      	bne.n	800650a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f04f 32ff 	mov.w	r2, #4294967295
 80064de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064e0:	f7fc fd7e 	bl	8002fe0 <HAL_GetTick>
 80064e4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80064e6:	e009      	b.n	80064fc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80064e8:	f7fc fd7a 	bl	8002fe0 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064f6:	d901      	bls.n	80064fc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e007      	b.n	800650c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0ee      	beq.n	80064e8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006522:	e005      	b.n	8006530 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3301      	adds	r3, #1
 8006528:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	3b0a      	subs	r3, #10
 800652e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	2b09      	cmp	r3, #9
 8006534:	d8f6      	bhi.n	8006524 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	b2da      	uxtb	r2, r3
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	4313      	orrs	r3, r2
 8006542:	b2db      	uxtb	r3, r3
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	091b      	lsrs	r3, r3, #4
 8006562:	b2db      	uxtb	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	4613      	mov	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	b2da      	uxtb	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	4413      	add	r3, r2
 800657e:	b2db      	uxtb	r3, r3
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3350      	adds	r3, #80	; 0x50
 80065a2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	4413      	add	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	601a      	str	r2, [r3, #0]
}
 80065b4:	bf00      	nop
 80065b6:	371c      	adds	r7, #28
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3350      	adds	r3, #80	; 0x50
 80065d4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4413      	add	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e056      	b.n	80066b0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	d106      	bne.n	8006622 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7fc f9f1 	bl	8002a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2202      	movs	r2, #2
 8006626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006638:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	431a      	orrs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	431a      	orrs	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	ea42 0103 	orr.w	r1, r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	0c1b      	lsrs	r3, r3, #16
 8006680:	f003 0104 	and.w	r1, r3, #4
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69da      	ldr	r2, [r3, #28]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800669e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	4613      	mov	r3, r2
 80066c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <HAL_SPI_Transmit+0x22>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e11e      	b.n	8006918 <HAL_SPI_Transmit+0x260>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066e2:	f7fc fc7d 	bl	8002fe0 <HAL_GetTick>
 80066e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d002      	beq.n	80066fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80066f8:	2302      	movs	r3, #2
 80066fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066fc:	e103      	b.n	8006906 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <HAL_SPI_Transmit+0x52>
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d102      	bne.n	8006710 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800670e:	e0fa      	b.n	8006906 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2203      	movs	r2, #3
 8006714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	88fa      	ldrh	r2, [r7, #6]
 8006728:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	88fa      	ldrh	r2, [r7, #6]
 800672e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006756:	d107      	bne.n	8006768 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006766:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b40      	cmp	r3, #64	; 0x40
 8006774:	d007      	beq.n	8006786 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006784:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800678e:	d14b      	bne.n	8006828 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <HAL_SPI_Transmit+0xe6>
 8006798:	8afb      	ldrh	r3, [r7, #22]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d13e      	bne.n	800681c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	881a      	ldrh	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	1c9a      	adds	r2, r3, #2
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067c2:	e02b      	b.n	800681c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d112      	bne.n	80067f8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	881a      	ldrh	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e2:	1c9a      	adds	r2, r3, #2
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80067f6:	e011      	b.n	800681c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067f8:	f7fc fbf2 	bl	8002fe0 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d803      	bhi.n	8006810 <HAL_SPI_Transmit+0x158>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680e:	d102      	bne.n	8006816 <HAL_SPI_Transmit+0x15e>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d102      	bne.n	800681c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	77fb      	strb	r3, [r7, #31]
          goto error;
 800681a:	e074      	b.n	8006906 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1ce      	bne.n	80067c4 <HAL_SPI_Transmit+0x10c>
 8006826:	e04c      	b.n	80068c2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <HAL_SPI_Transmit+0x17e>
 8006830:	8afb      	ldrh	r3, [r7, #22]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d140      	bne.n	80068b8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	330c      	adds	r3, #12
 8006840:	7812      	ldrb	r2, [r2, #0]
 8006842:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006852:	b29b      	uxth	r3, r3
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800685c:	e02c      	b.n	80068b8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b02      	cmp	r3, #2
 800686a:	d113      	bne.n	8006894 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	7812      	ldrb	r2, [r2, #0]
 8006878:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b01      	subs	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	86da      	strh	r2, [r3, #54]	; 0x36
 8006892:	e011      	b.n	80068b8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006894:	f7fc fba4 	bl	8002fe0 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d803      	bhi.n	80068ac <HAL_SPI_Transmit+0x1f4>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d102      	bne.n	80068b2 <HAL_SPI_Transmit+0x1fa>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d102      	bne.n	80068b8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068b6:	e026      	b.n	8006906 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1cd      	bne.n	800685e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 fa44 	bl	8006d54 <SPI_EndRxTxTransaction>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2220      	movs	r2, #32
 80068d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10a      	bne.n	80068f6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068e0:	2300      	movs	r3, #0
 80068e2:	613b      	str	r3, [r7, #16]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e000      	b.n	8006906 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006904:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006916:	7ffb      	ldrb	r3, [r7, #31]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3720      	adds	r7, #32
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08c      	sub	sp, #48	; 0x30
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800692e:	2301      	movs	r3, #1
 8006930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800693e:	2b01      	cmp	r3, #1
 8006940:	d101      	bne.n	8006946 <HAL_SPI_TransmitReceive+0x26>
 8006942:	2302      	movs	r3, #2
 8006944:	e18a      	b.n	8006c5c <HAL_SPI_TransmitReceive+0x33c>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800694e:	f7fc fb47 	bl	8002fe0 <HAL_GetTick>
 8006952:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800695a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006964:	887b      	ldrh	r3, [r7, #2]
 8006966:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800696c:	2b01      	cmp	r3, #1
 800696e:	d00f      	beq.n	8006990 <HAL_SPI_TransmitReceive+0x70>
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006976:	d107      	bne.n	8006988 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d103      	bne.n	8006988 <HAL_SPI_TransmitReceive+0x68>
 8006980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006984:	2b04      	cmp	r3, #4
 8006986:	d003      	beq.n	8006990 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006988:	2302      	movs	r3, #2
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800698e:	e15b      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <HAL_SPI_TransmitReceive+0x82>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <HAL_SPI_TransmitReceive+0x82>
 800699c:	887b      	ldrh	r3, [r7, #2]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d103      	bne.n	80069aa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80069a8:	e14e      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d003      	beq.n	80069be <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2205      	movs	r2, #5
 80069ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	887a      	ldrh	r2, [r7, #2]
 80069ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	887a      	ldrh	r2, [r7, #2]
 80069d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	887a      	ldrh	r2, [r7, #2]
 80069e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	887a      	ldrh	r2, [r7, #2]
 80069e6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	d007      	beq.n	8006a12 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a1a:	d178      	bne.n	8006b0e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <HAL_SPI_TransmitReceive+0x10a>
 8006a24:	8b7b      	ldrh	r3, [r7, #26]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d166      	bne.n	8006af8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	881a      	ldrh	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3a:	1c9a      	adds	r2, r3, #2
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a4e:	e053      	b.n	8006af8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d11b      	bne.n	8006a96 <HAL_SPI_TransmitReceive+0x176>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d016      	beq.n	8006a96 <HAL_SPI_TransmitReceive+0x176>
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d113      	bne.n	8006a96 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a72:	881a      	ldrh	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	1c9a      	adds	r2, r3, #2
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d119      	bne.n	8006ad8 <HAL_SPI_TransmitReceive+0x1b8>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d014      	beq.n	8006ad8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	b292      	uxth	r2, r2
 8006aba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	1c9a      	adds	r2, r3, #2
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ad8:	f7fc fa82 	bl	8002fe0 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d807      	bhi.n	8006af8 <HAL_SPI_TransmitReceive+0x1d8>
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aee:	d003      	beq.n	8006af8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006af6:	e0a7      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1a6      	bne.n	8006a50 <HAL_SPI_TransmitReceive+0x130>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1a1      	bne.n	8006a50 <HAL_SPI_TransmitReceive+0x130>
 8006b0c:	e07c      	b.n	8006c08 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d002      	beq.n	8006b1c <HAL_SPI_TransmitReceive+0x1fc>
 8006b16:	8b7b      	ldrh	r3, [r7, #26]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d16b      	bne.n	8006bf4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	330c      	adds	r3, #12
 8006b26:	7812      	ldrb	r2, [r2, #0]
 8006b28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b42:	e057      	b.n	8006bf4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d11c      	bne.n	8006b8c <HAL_SPI_TransmitReceive+0x26c>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d017      	beq.n	8006b8c <HAL_SPI_TransmitReceive+0x26c>
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d114      	bne.n	8006b8c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	7812      	ldrb	r2, [r2, #0]
 8006b6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d119      	bne.n	8006bce <HAL_SPI_TransmitReceive+0x2ae>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d014      	beq.n	8006bce <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bce:	f7fc fa07 	bl	8002fe0 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d803      	bhi.n	8006be6 <HAL_SPI_TransmitReceive+0x2c6>
 8006bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d102      	bne.n	8006bec <HAL_SPI_TransmitReceive+0x2cc>
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d103      	bne.n	8006bf4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006bf2:	e029      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1a2      	bne.n	8006b44 <HAL_SPI_TransmitReceive+0x224>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d19d      	bne.n	8006b44 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f8a1 	bl	8006d54 <SPI_EndRxTxTransaction>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d006      	beq.n	8006c26 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2220      	movs	r2, #32
 8006c22:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c24:	e010      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10b      	bne.n	8006c46 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c2e:	2300      	movs	r3, #0
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	e000      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3730      	adds	r7, #48	; 0x30
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c72:	b2db      	uxtb	r3, r3
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c90:	e04c      	b.n	8006d2c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d048      	beq.n	8006d2c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006c9a:	f7fc f9a1 	bl	8002fe0 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d902      	bls.n	8006cb0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d13d      	bne.n	8006d2c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cc8:	d111      	bne.n	8006cee <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd2:	d004      	beq.n	8006cde <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cdc:	d107      	bne.n	8006cee <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf6:	d10f      	bne.n	8006d18 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e00f      	b.n	8006d4c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	4013      	ands	r3, r2
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	bf0c      	ite	eq
 8006d3c:	2301      	moveq	r3, #1
 8006d3e:	2300      	movne	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d1a3      	bne.n	8006c92 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d60:	4b1b      	ldr	r3, [pc, #108]	; (8006dd0 <SPI_EndRxTxTransaction+0x7c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1b      	ldr	r2, [pc, #108]	; (8006dd4 <SPI_EndRxTxTransaction+0x80>)
 8006d66:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6a:	0d5b      	lsrs	r3, r3, #21
 8006d6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d70:	fb02 f303 	mul.w	r3, r2, r3
 8006d74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d7e:	d112      	bne.n	8006da6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2200      	movs	r2, #0
 8006d88:	2180      	movs	r1, #128	; 0x80
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7ff ff78 	bl	8006c80 <SPI_WaitFlagStateUntilTimeout>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d016      	beq.n	8006dc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9a:	f043 0220 	orr.w	r2, r3, #32
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e00f      	b.n	8006dc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00a      	beq.n	8006dc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dbc:	2b80      	cmp	r3, #128	; 0x80
 8006dbe:	d0f2      	beq.n	8006da6 <SPI_EndRxTxTransaction+0x52>
 8006dc0:	e000      	b.n	8006dc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006dc2:	bf00      	nop
  }

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000008 	.word	0x20000008
 8006dd4:	165e9f81 	.word	0x165e9f81

08006dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e01d      	b.n	8006e26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fb fed4 	bl	8002bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3304      	adds	r3, #4
 8006e14:	4619      	mov	r1, r3
 8006e16:	4610      	mov	r0, r2
 8006e18:	f000 fac6 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b085      	sub	sp, #20
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0201 	orr.w	r2, r2, #1
 8006e44:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b06      	cmp	r3, #6
 8006e56:	d007      	beq.n	8006e68 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e01d      	b.n	8006ec4 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fb fdf9 	bl	8002a94 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f000 fa77 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b0c      	cmp	r3, #12
 8006eda:	d841      	bhi.n	8006f60 <HAL_TIM_IC_Start_IT+0x94>
 8006edc:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <HAL_TIM_IC_Start_IT+0x18>)
 8006ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee2:	bf00      	nop
 8006ee4:	08006f19 	.word	0x08006f19
 8006ee8:	08006f61 	.word	0x08006f61
 8006eec:	08006f61 	.word	0x08006f61
 8006ef0:	08006f61 	.word	0x08006f61
 8006ef4:	08006f2b 	.word	0x08006f2b
 8006ef8:	08006f61 	.word	0x08006f61
 8006efc:	08006f61 	.word	0x08006f61
 8006f00:	08006f61 	.word	0x08006f61
 8006f04:	08006f3d 	.word	0x08006f3d
 8006f08:	08006f61 	.word	0x08006f61
 8006f0c:	08006f61 	.word	0x08006f61
 8006f10:	08006f61 	.word	0x08006f61
 8006f14:	08006f4f 	.word	0x08006f4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0202 	orr.w	r2, r2, #2
 8006f26:	60da      	str	r2, [r3, #12]
      break;
 8006f28:	e01b      	b.n	8006f62 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f042 0204 	orr.w	r2, r2, #4
 8006f38:	60da      	str	r2, [r3, #12]
      break;
 8006f3a:	e012      	b.n	8006f62 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0208 	orr.w	r2, r2, #8
 8006f4a:	60da      	str	r2, [r3, #12]
      break;
 8006f4c:	e009      	b.n	8006f62 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f042 0210 	orr.w	r2, r2, #16
 8006f5c:	60da      	str	r2, [r3, #12]
      break;
 8006f5e:	e000      	b.n	8006f62 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8006f60:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2201      	movs	r2, #1
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fbe6 	bl	800773c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b06      	cmp	r3, #6
 8006f80:	d007      	beq.n	8006f92 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0201 	orr.w	r2, r2, #1
 8006f90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d122      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d11b      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f06f 0202 	mvn.w	r2, #2
 8006fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fa fbb2 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 8006fe4:	e005      	b.n	8006ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f9c0 	bl	800736c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f9c7 	bl	8007380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f003 0304 	and.w	r3, r3, #4
 8007002:	2b04      	cmp	r3, #4
 8007004:	d122      	bne.n	800704c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b04      	cmp	r3, #4
 8007012:	d11b      	bne.n	800704c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0204 	mvn.w	r2, #4
 800701c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fa fb88 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 8007038:	e005      	b.n	8007046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f996 	bl	800736c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f99d 	bl	8007380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b08      	cmp	r3, #8
 8007058:	d122      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b08      	cmp	r3, #8
 8007066:	d11b      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f06f 0208 	mvn.w	r2, #8
 8007070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2204      	movs	r2, #4
 8007076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fa fb5e 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 800708c:	e005      	b.n	800709a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f96c 	bl	800736c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f973 	bl	8007380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	f003 0310 	and.w	r3, r3, #16
 80070aa:	2b10      	cmp	r3, #16
 80070ac:	d122      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f003 0310 	and.w	r3, r3, #16
 80070b8:	2b10      	cmp	r3, #16
 80070ba:	d11b      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f06f 0210 	mvn.w	r2, #16
 80070c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2208      	movs	r2, #8
 80070ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fa fb34 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 80070e0:	e005      	b.n	80070ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f942 	bl	800736c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f949 	bl	8007380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d10e      	bne.n	8007120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	2b01      	cmp	r3, #1
 800710e:	d107      	bne.n	8007120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f06f 0201 	mvn.w	r2, #1
 8007118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fa fcbc 	bl	8001a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712a:	2b80      	cmp	r3, #128	; 0x80
 800712c:	d10e      	bne.n	800714c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007138:	2b80      	cmp	r3, #128	; 0x80
 800713a:	d107      	bne.n	800714c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fba4 	bl	8007894 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007156:	2b40      	cmp	r3, #64	; 0x40
 8007158:	d10e      	bne.n	8007178 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007164:	2b40      	cmp	r3, #64	; 0x40
 8007166:	d107      	bne.n	8007178 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f90e 	bl	8007394 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b20      	cmp	r3, #32
 8007184:	d10e      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b20      	cmp	r3, #32
 8007192:	d107      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0220 	mvn.w	r2, #32
 800719c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fb6e 	bl	8007880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80071c2:	2302      	movs	r3, #2
 80071c4:	e08a      	b.n	80072dc <HAL_TIM_IC_ConfigChannel+0x130>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2202      	movs	r2, #2
 80071d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d11b      	bne.n	8007214 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6818      	ldr	r0, [r3, #0]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	6819      	ldr	r1, [r3, #0]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f000 f97c 	bl	80074e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	699a      	ldr	r2, [r3, #24]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 020c 	bic.w	r2, r2, #12
 80071fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6999      	ldr	r1, [r3, #24]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	619a      	str	r2, [r3, #24]
 8007212:	e05a      	b.n	80072ca <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b04      	cmp	r3, #4
 8007218:	d11c      	bne.n	8007254 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	6819      	ldr	r1, [r3, #0]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f000 f9d1 	bl	80075d0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	699a      	ldr	r2, [r3, #24]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800723c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6999      	ldr	r1, [r3, #24]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	021a      	lsls	r2, r3, #8
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	619a      	str	r2, [r3, #24]
 8007252:	e03a      	b.n	80072ca <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b08      	cmp	r3, #8
 8007258:	d11b      	bne.n	8007292 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6819      	ldr	r1, [r3, #0]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f000 f9ee 	bl	800764a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69da      	ldr	r2, [r3, #28]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 020c 	bic.w	r2, r2, #12
 800727c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69d9      	ldr	r1, [r3, #28]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	61da      	str	r2, [r3, #28]
 8007290:	e01b      	b.n	80072ca <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	6819      	ldr	r1, [r3, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	f000 fa0e 	bl	80076c2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80072b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69d9      	ldr	r1, [r3, #28]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	021a      	lsls	r2, r3, #8
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b0c      	cmp	r3, #12
 80072f6:	d831      	bhi.n	800735c <HAL_TIM_ReadCapturedValue+0x78>
 80072f8:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <HAL_TIM_ReadCapturedValue+0x1c>)
 80072fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fe:	bf00      	nop
 8007300:	08007335 	.word	0x08007335
 8007304:	0800735d 	.word	0x0800735d
 8007308:	0800735d 	.word	0x0800735d
 800730c:	0800735d 	.word	0x0800735d
 8007310:	0800733f 	.word	0x0800733f
 8007314:	0800735d 	.word	0x0800735d
 8007318:	0800735d 	.word	0x0800735d
 800731c:	0800735d 	.word	0x0800735d
 8007320:	08007349 	.word	0x08007349
 8007324:	0800735d 	.word	0x0800735d
 8007328:	0800735d 	.word	0x0800735d
 800732c:	0800735d 	.word	0x0800735d
 8007330:	08007353 	.word	0x08007353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733a:	60fb      	str	r3, [r7, #12]

      break;
 800733c:	e00f      	b.n	800735e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	60fb      	str	r3, [r7, #12]

      break;
 8007346:	e00a      	b.n	800735e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734e:	60fb      	str	r3, [r7, #12]

      break;
 8007350:	e005      	b.n	800735e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007358:	60fb      	str	r3, [r7, #12]

      break;
 800735a:	e000      	b.n	800735e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800735c:	bf00      	nop
  }

  return tmpreg;
 800735e:	68fb      	ldr	r3, [r7, #12]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a40      	ldr	r2, [pc, #256]	; (80074bc <TIM_Base_SetConfig+0x114>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d013      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c6:	d00f      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a3d      	ldr	r2, [pc, #244]	; (80074c0 <TIM_Base_SetConfig+0x118>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00b      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a3c      	ldr	r2, [pc, #240]	; (80074c4 <TIM_Base_SetConfig+0x11c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d007      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a3b      	ldr	r2, [pc, #236]	; (80074c8 <TIM_Base_SetConfig+0x120>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d003      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a3a      	ldr	r2, [pc, #232]	; (80074cc <TIM_Base_SetConfig+0x124>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d108      	bne.n	80073fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a2f      	ldr	r2, [pc, #188]	; (80074bc <TIM_Base_SetConfig+0x114>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d02b      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007408:	d027      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a2c      	ldr	r2, [pc, #176]	; (80074c0 <TIM_Base_SetConfig+0x118>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d023      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a2b      	ldr	r2, [pc, #172]	; (80074c4 <TIM_Base_SetConfig+0x11c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d01f      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a2a      	ldr	r2, [pc, #168]	; (80074c8 <TIM_Base_SetConfig+0x120>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d01b      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a29      	ldr	r2, [pc, #164]	; (80074cc <TIM_Base_SetConfig+0x124>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d017      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a28      	ldr	r2, [pc, #160]	; (80074d0 <TIM_Base_SetConfig+0x128>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d013      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a27      	ldr	r2, [pc, #156]	; (80074d4 <TIM_Base_SetConfig+0x12c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00f      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a26      	ldr	r2, [pc, #152]	; (80074d8 <TIM_Base_SetConfig+0x130>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00b      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a25      	ldr	r2, [pc, #148]	; (80074dc <TIM_Base_SetConfig+0x134>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d007      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a24      	ldr	r2, [pc, #144]	; (80074e0 <TIM_Base_SetConfig+0x138>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d003      	beq.n	800745a <TIM_Base_SetConfig+0xb2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a23      	ldr	r2, [pc, #140]	; (80074e4 <TIM_Base_SetConfig+0x13c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d108      	bne.n	800746c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	4313      	orrs	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a0a      	ldr	r2, [pc, #40]	; (80074bc <TIM_Base_SetConfig+0x114>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_Base_SetConfig+0xf8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a0c      	ldr	r2, [pc, #48]	; (80074cc <TIM_Base_SetConfig+0x124>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d103      	bne.n	80074a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	691a      	ldr	r2, [r3, #16]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	615a      	str	r2, [r3, #20]
}
 80074ae:	bf00      	nop
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	40010000 	.word	0x40010000
 80074c0:	40000400 	.word	0x40000400
 80074c4:	40000800 	.word	0x40000800
 80074c8:	40000c00 	.word	0x40000c00
 80074cc:	40010400 	.word	0x40010400
 80074d0:	40014000 	.word	0x40014000
 80074d4:	40014400 	.word	0x40014400
 80074d8:	40014800 	.word	0x40014800
 80074dc:	40001800 	.word	0x40001800
 80074e0:	40001c00 	.word	0x40001c00
 80074e4:	40002000 	.word	0x40002000

080074e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	f023 0201 	bic.w	r2, r3, #1
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4a28      	ldr	r2, [pc, #160]	; (80075b4 <TIM_TI1_SetConfig+0xcc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d01b      	beq.n	800754e <TIM_TI1_SetConfig+0x66>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751c:	d017      	beq.n	800754e <TIM_TI1_SetConfig+0x66>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4a25      	ldr	r2, [pc, #148]	; (80075b8 <TIM_TI1_SetConfig+0xd0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d013      	beq.n	800754e <TIM_TI1_SetConfig+0x66>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4a24      	ldr	r2, [pc, #144]	; (80075bc <TIM_TI1_SetConfig+0xd4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00f      	beq.n	800754e <TIM_TI1_SetConfig+0x66>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4a23      	ldr	r2, [pc, #140]	; (80075c0 <TIM_TI1_SetConfig+0xd8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d00b      	beq.n	800754e <TIM_TI1_SetConfig+0x66>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4a22      	ldr	r2, [pc, #136]	; (80075c4 <TIM_TI1_SetConfig+0xdc>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d007      	beq.n	800754e <TIM_TI1_SetConfig+0x66>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	4a21      	ldr	r2, [pc, #132]	; (80075c8 <TIM_TI1_SetConfig+0xe0>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d003      	beq.n	800754e <TIM_TI1_SetConfig+0x66>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4a20      	ldr	r2, [pc, #128]	; (80075cc <TIM_TI1_SetConfig+0xe4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d101      	bne.n	8007552 <TIM_TI1_SetConfig+0x6a>
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <TIM_TI1_SetConfig+0x6c>
 8007552:	2300      	movs	r3, #0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d008      	beq.n	800756a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f023 0303 	bic.w	r3, r3, #3
 800755e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]
 8007568:	e003      	b.n	8007572 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f043 0301 	orr.w	r3, r3, #1
 8007570:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	b2db      	uxtb	r3, r3
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f023 030a 	bic.w	r3, r3, #10
 800758c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f003 030a 	and.w	r3, r3, #10
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4313      	orrs	r3, r2
 8007598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	621a      	str	r2, [r3, #32]
}
 80075a6:	bf00      	nop
 80075a8:	371c      	adds	r7, #28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	40010000 	.word	0x40010000
 80075b8:	40000400 	.word	0x40000400
 80075bc:	40000800 	.word	0x40000800
 80075c0:	40000c00 	.word	0x40000c00
 80075c4:	40010400 	.word	0x40010400
 80075c8:	40014000 	.word	0x40014000
 80075cc:	40001800 	.word	0x40001800

080075d0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	f023 0210 	bic.w	r2, r3, #16
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	4313      	orrs	r3, r2
 8007606:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800760e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	031b      	lsls	r3, r3, #12
 8007614:	b29b      	uxth	r3, r3
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007622:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	4313      	orrs	r3, r2
 8007630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	621a      	str	r2, [r3, #32]
}
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800764a:	b480      	push	{r7}
 800764c:	b087      	sub	sp, #28
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
 8007656:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f023 0303 	bic.w	r3, r3, #3
 8007676:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4313      	orrs	r3, r2
 800767e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007686:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	b2db      	uxtb	r3, r3
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800769a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	621a      	str	r2, [r3, #32]
}
 80076b6:	bf00      	nop
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b087      	sub	sp, #28
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	607a      	str	r2, [r7, #4]
 80076ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	69db      	ldr	r3, [r3, #28]
 80076e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	021b      	lsls	r3, r3, #8
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007700:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	031b      	lsls	r3, r3, #12
 8007706:	b29b      	uxth	r3, r3
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007714:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	031b      	lsls	r3, r3, #12
 800771a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	4313      	orrs	r3, r2
 8007722:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	621a      	str	r2, [r3, #32]
}
 8007730:	bf00      	nop
 8007732:	371c      	adds	r7, #28
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f003 031f 	and.w	r3, r3, #31
 800774e:	2201      	movs	r2, #1
 8007750:	fa02 f303 	lsl.w	r3, r2, r3
 8007754:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a1a      	ldr	r2, [r3, #32]
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	43db      	mvns	r3, r3
 800775e:	401a      	ands	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a1a      	ldr	r2, [r3, #32]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f003 031f 	and.w	r3, r3, #31
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	fa01 f303 	lsl.w	r3, r1, r3
 8007774:	431a      	orrs	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	621a      	str	r2, [r3, #32]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
	...

08007788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007798:	2b01      	cmp	r3, #1
 800779a:	d101      	bne.n	80077a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800779c:	2302      	movs	r3, #2
 800779e:	e05a      	b.n	8007856 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a21      	ldr	r2, [pc, #132]	; (8007864 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d022      	beq.n	800782a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ec:	d01d      	beq.n	800782a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a1d      	ldr	r2, [pc, #116]	; (8007868 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d018      	beq.n	800782a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a1b      	ldr	r2, [pc, #108]	; (800786c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a1a      	ldr	r2, [pc, #104]	; (8007870 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00e      	beq.n	800782a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a18      	ldr	r2, [pc, #96]	; (8007874 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d009      	beq.n	800782a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a17      	ldr	r2, [pc, #92]	; (8007878 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d004      	beq.n	800782a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a15      	ldr	r2, [pc, #84]	; (800787c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d10c      	bne.n	8007844 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007830:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	4313      	orrs	r3, r2
 800783a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	40010000 	.word	0x40010000
 8007868:	40000400 	.word	0x40000400
 800786c:	40000800 	.word	0x40000800
 8007870:	40000c00 	.word	0x40000c00
 8007874:	40010400 	.word	0x40010400
 8007878:	40014000 	.word	0x40014000
 800787c:	40001800 	.word	0x40001800

08007880 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e03f      	b.n	800793a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fb f994 	bl	8002bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2224      	movs	r2, #36	; 0x24
 80078d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f9b1 	bl	8007c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	691a      	ldr	r2, [r3, #16]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	695a      	ldr	r2, [r3, #20]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2220      	movs	r2, #32
 800792c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2220      	movs	r2, #32
 8007934:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b088      	sub	sp, #32
 8007946:	af02      	add	r7, sp, #8
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	60b9      	str	r1, [r7, #8]
 800794c:	603b      	str	r3, [r7, #0]
 800794e:	4613      	mov	r3, r2
 8007950:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b20      	cmp	r3, #32
 8007960:	f040 8083 	bne.w	8007a6a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <HAL_UART_Transmit+0x2e>
 800796a:	88fb      	ldrh	r3, [r7, #6]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e07b      	b.n	8007a6c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800797a:	2b01      	cmp	r3, #1
 800797c:	d101      	bne.n	8007982 <HAL_UART_Transmit+0x40>
 800797e:	2302      	movs	r3, #2
 8007980:	e074      	b.n	8007a6c <HAL_UART_Transmit+0x12a>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2221      	movs	r2, #33	; 0x21
 8007994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007998:	f7fb fb22 	bl	8002fe0 <HAL_GetTick>
 800799c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	88fa      	ldrh	r2, [r7, #6]
 80079a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	88fa      	ldrh	r2, [r7, #6]
 80079a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80079b2:	e042      	b.n	8007a3a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ca:	d122      	bne.n	8007a12 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2200      	movs	r2, #0
 80079d4:	2180      	movs	r1, #128	; 0x80
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 f8f2 	bl	8007bc0 <UART_WaitOnFlagUntilTimeout>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e042      	b.n	8007a6c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d103      	bne.n	8007a0a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	3302      	adds	r3, #2
 8007a06:	60bb      	str	r3, [r7, #8]
 8007a08:	e017      	b.n	8007a3a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	60bb      	str	r3, [r7, #8]
 8007a10:	e013      	b.n	8007a3a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2180      	movs	r1, #128	; 0x80
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f8cf 	bl	8007bc0 <UART_WaitOnFlagUntilTimeout>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e01f      	b.n	8007a6c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	60ba      	str	r2, [r7, #8]
 8007a32:	781a      	ldrb	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1b7      	bne.n	80079b4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2140      	movs	r1, #64	; 0x40
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 f8b6 	bl	8007bc0 <UART_WaitOnFlagUntilTimeout>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e006      	b.n	8007a6c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2220      	movs	r2, #32
 8007a62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e000      	b.n	8007a6c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007a6a:	2302      	movs	r3, #2
  }
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b088      	sub	sp, #32
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	603b      	str	r3, [r7, #0]
 8007a80:	4613      	mov	r3, r2
 8007a82:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	f040 8090 	bne.w	8007bb6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <HAL_UART_Receive+0x2e>
 8007a9c:	88fb      	ldrh	r3, [r7, #6]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e088      	b.n	8007bb8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d101      	bne.n	8007ab4 <HAL_UART_Receive+0x40>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	e081      	b.n	8007bb8 <HAL_UART_Receive+0x144>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2222      	movs	r2, #34	; 0x22
 8007ac6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007aca:	f7fb fa89 	bl	8002fe0 <HAL_GetTick>
 8007ace:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	88fa      	ldrh	r2, [r7, #6]
 8007ad4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	88fa      	ldrh	r2, [r7, #6]
 8007ada:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007ae4:	e05c      	b.n	8007ba0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afc:	d12b      	bne.n	8007b56 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2200      	movs	r2, #0
 8007b06:	2120      	movs	r1, #32
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 f859 	bl	8007bc0 <UART_WaitOnFlagUntilTimeout>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e04f      	b.n	8007bb8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10c      	bne.n	8007b3e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	3302      	adds	r3, #2
 8007b3a:	60bb      	str	r3, [r7, #8]
 8007b3c:	e030      	b.n	8007ba0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	3301      	adds	r3, #1
 8007b52:	60bb      	str	r3, [r7, #8]
 8007b54:	e024      	b.n	8007ba0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2120      	movs	r1, #32
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f82d 	bl	8007bc0 <UART_WaitOnFlagUntilTimeout>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e023      	b.n	8007bb8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d108      	bne.n	8007b8a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6859      	ldr	r1, [r3, #4]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	60ba      	str	r2, [r7, #8]
 8007b84:	b2ca      	uxtb	r2, r1
 8007b86:	701a      	strb	r2, [r3, #0]
 8007b88:	e00a      	b.n	8007ba0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	1c59      	adds	r1, r3, #1
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007b9c:	b2d2      	uxtb	r2, r2
 8007b9e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d19d      	bne.n	8007ae6 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	e000      	b.n	8007bb8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007bb6:	2302      	movs	r3, #2
  }
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	603b      	str	r3, [r7, #0]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bd0:	e02c      	b.n	8007c2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd8:	d028      	beq.n	8007c2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d007      	beq.n	8007bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007be0:	f7fb f9fe 	bl	8002fe0 <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d21d      	bcs.n	8007c2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007bfe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	695a      	ldr	r2, [r3, #20]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0201 	bic.w	r2, r2, #1
 8007c0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e00f      	b.n	8007c4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	4013      	ands	r3, r2
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	bf0c      	ite	eq
 8007c3c:	2301      	moveq	r3, #1
 8007c3e:	2300      	movne	r3, #0
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	461a      	mov	r2, r3
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d0c3      	beq.n	8007bd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c58:	b085      	sub	sp, #20
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68da      	ldr	r2, [r3, #12]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689a      	ldr	r2, [r3, #8]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	431a      	orrs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007c96:	f023 030c 	bic.w	r3, r3, #12
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6812      	ldr	r2, [r2, #0]
 8007c9e:	68f9      	ldr	r1, [r7, #12]
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc2:	f040 818b 	bne.w	8007fdc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4ac1      	ldr	r2, [pc, #772]	; (8007fd0 <UART_SetConfig+0x37c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d005      	beq.n	8007cdc <UART_SetConfig+0x88>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4abf      	ldr	r2, [pc, #764]	; (8007fd4 <UART_SetConfig+0x380>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	f040 80bd 	bne.w	8007e56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cdc:	f7fd fa3a 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 8007ce0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	461d      	mov	r5, r3
 8007ce6:	f04f 0600 	mov.w	r6, #0
 8007cea:	46a8      	mov	r8, r5
 8007cec:	46b1      	mov	r9, r6
 8007cee:	eb18 0308 	adds.w	r3, r8, r8
 8007cf2:	eb49 0409 	adc.w	r4, r9, r9
 8007cf6:	4698      	mov	r8, r3
 8007cf8:	46a1      	mov	r9, r4
 8007cfa:	eb18 0805 	adds.w	r8, r8, r5
 8007cfe:	eb49 0906 	adc.w	r9, r9, r6
 8007d02:	f04f 0100 	mov.w	r1, #0
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d16:	4688      	mov	r8, r1
 8007d18:	4691      	mov	r9, r2
 8007d1a:	eb18 0005 	adds.w	r0, r8, r5
 8007d1e:	eb49 0106 	adc.w	r1, r9, r6
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	461d      	mov	r5, r3
 8007d28:	f04f 0600 	mov.w	r6, #0
 8007d2c:	196b      	adds	r3, r5, r5
 8007d2e:	eb46 0406 	adc.w	r4, r6, r6
 8007d32:	461a      	mov	r2, r3
 8007d34:	4623      	mov	r3, r4
 8007d36:	f7f8 feb1 	bl	8000a9c <__aeabi_uldivmod>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4ba5      	ldr	r3, [pc, #660]	; (8007fd8 <UART_SetConfig+0x384>)
 8007d42:	fba3 2302 	umull	r2, r3, r3, r2
 8007d46:	095b      	lsrs	r3, r3, #5
 8007d48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	461d      	mov	r5, r3
 8007d50:	f04f 0600 	mov.w	r6, #0
 8007d54:	46a9      	mov	r9, r5
 8007d56:	46b2      	mov	sl, r6
 8007d58:	eb19 0309 	adds.w	r3, r9, r9
 8007d5c:	eb4a 040a 	adc.w	r4, sl, sl
 8007d60:	4699      	mov	r9, r3
 8007d62:	46a2      	mov	sl, r4
 8007d64:	eb19 0905 	adds.w	r9, r9, r5
 8007d68:	eb4a 0a06 	adc.w	sl, sl, r6
 8007d6c:	f04f 0100 	mov.w	r1, #0
 8007d70:	f04f 0200 	mov.w	r2, #0
 8007d74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d80:	4689      	mov	r9, r1
 8007d82:	4692      	mov	sl, r2
 8007d84:	eb19 0005 	adds.w	r0, r9, r5
 8007d88:	eb4a 0106 	adc.w	r1, sl, r6
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	461d      	mov	r5, r3
 8007d92:	f04f 0600 	mov.w	r6, #0
 8007d96:	196b      	adds	r3, r5, r5
 8007d98:	eb46 0406 	adc.w	r4, r6, r6
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	4623      	mov	r3, r4
 8007da0:	f7f8 fe7c 	bl	8000a9c <__aeabi_uldivmod>
 8007da4:	4603      	mov	r3, r0
 8007da6:	460c      	mov	r4, r1
 8007da8:	461a      	mov	r2, r3
 8007daa:	4b8b      	ldr	r3, [pc, #556]	; (8007fd8 <UART_SetConfig+0x384>)
 8007dac:	fba3 1302 	umull	r1, r3, r3, r2
 8007db0:	095b      	lsrs	r3, r3, #5
 8007db2:	2164      	movs	r1, #100	; 0x64
 8007db4:	fb01 f303 	mul.w	r3, r1, r3
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	3332      	adds	r3, #50	; 0x32
 8007dbe:	4a86      	ldr	r2, [pc, #536]	; (8007fd8 <UART_SetConfig+0x384>)
 8007dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc4:	095b      	lsrs	r3, r3, #5
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007dcc:	4498      	add	r8, r3
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	461d      	mov	r5, r3
 8007dd2:	f04f 0600 	mov.w	r6, #0
 8007dd6:	46a9      	mov	r9, r5
 8007dd8:	46b2      	mov	sl, r6
 8007dda:	eb19 0309 	adds.w	r3, r9, r9
 8007dde:	eb4a 040a 	adc.w	r4, sl, sl
 8007de2:	4699      	mov	r9, r3
 8007de4:	46a2      	mov	sl, r4
 8007de6:	eb19 0905 	adds.w	r9, r9, r5
 8007dea:	eb4a 0a06 	adc.w	sl, sl, r6
 8007dee:	f04f 0100 	mov.w	r1, #0
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007dfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e02:	4689      	mov	r9, r1
 8007e04:	4692      	mov	sl, r2
 8007e06:	eb19 0005 	adds.w	r0, r9, r5
 8007e0a:	eb4a 0106 	adc.w	r1, sl, r6
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	461d      	mov	r5, r3
 8007e14:	f04f 0600 	mov.w	r6, #0
 8007e18:	196b      	adds	r3, r5, r5
 8007e1a:	eb46 0406 	adc.w	r4, r6, r6
 8007e1e:	461a      	mov	r2, r3
 8007e20:	4623      	mov	r3, r4
 8007e22:	f7f8 fe3b 	bl	8000a9c <__aeabi_uldivmod>
 8007e26:	4603      	mov	r3, r0
 8007e28:	460c      	mov	r4, r1
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	4b6a      	ldr	r3, [pc, #424]	; (8007fd8 <UART_SetConfig+0x384>)
 8007e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8007e32:	095b      	lsrs	r3, r3, #5
 8007e34:	2164      	movs	r1, #100	; 0x64
 8007e36:	fb01 f303 	mul.w	r3, r1, r3
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	3332      	adds	r3, #50	; 0x32
 8007e40:	4a65      	ldr	r2, [pc, #404]	; (8007fd8 <UART_SetConfig+0x384>)
 8007e42:	fba2 2303 	umull	r2, r3, r2, r3
 8007e46:	095b      	lsrs	r3, r3, #5
 8007e48:	f003 0207 	and.w	r2, r3, #7
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4442      	add	r2, r8
 8007e52:	609a      	str	r2, [r3, #8]
 8007e54:	e26f      	b.n	8008336 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e56:	f7fd f969 	bl	800512c <HAL_RCC_GetPCLK1Freq>
 8007e5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	461d      	mov	r5, r3
 8007e60:	f04f 0600 	mov.w	r6, #0
 8007e64:	46a8      	mov	r8, r5
 8007e66:	46b1      	mov	r9, r6
 8007e68:	eb18 0308 	adds.w	r3, r8, r8
 8007e6c:	eb49 0409 	adc.w	r4, r9, r9
 8007e70:	4698      	mov	r8, r3
 8007e72:	46a1      	mov	r9, r4
 8007e74:	eb18 0805 	adds.w	r8, r8, r5
 8007e78:	eb49 0906 	adc.w	r9, r9, r6
 8007e7c:	f04f 0100 	mov.w	r1, #0
 8007e80:	f04f 0200 	mov.w	r2, #0
 8007e84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007e8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e90:	4688      	mov	r8, r1
 8007e92:	4691      	mov	r9, r2
 8007e94:	eb18 0005 	adds.w	r0, r8, r5
 8007e98:	eb49 0106 	adc.w	r1, r9, r6
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	461d      	mov	r5, r3
 8007ea2:	f04f 0600 	mov.w	r6, #0
 8007ea6:	196b      	adds	r3, r5, r5
 8007ea8:	eb46 0406 	adc.w	r4, r6, r6
 8007eac:	461a      	mov	r2, r3
 8007eae:	4623      	mov	r3, r4
 8007eb0:	f7f8 fdf4 	bl	8000a9c <__aeabi_uldivmod>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4b47      	ldr	r3, [pc, #284]	; (8007fd8 <UART_SetConfig+0x384>)
 8007ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8007ec0:	095b      	lsrs	r3, r3, #5
 8007ec2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	461d      	mov	r5, r3
 8007eca:	f04f 0600 	mov.w	r6, #0
 8007ece:	46a9      	mov	r9, r5
 8007ed0:	46b2      	mov	sl, r6
 8007ed2:	eb19 0309 	adds.w	r3, r9, r9
 8007ed6:	eb4a 040a 	adc.w	r4, sl, sl
 8007eda:	4699      	mov	r9, r3
 8007edc:	46a2      	mov	sl, r4
 8007ede:	eb19 0905 	adds.w	r9, r9, r5
 8007ee2:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ee6:	f04f 0100 	mov.w	r1, #0
 8007eea:	f04f 0200 	mov.w	r2, #0
 8007eee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ef2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ef6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007efa:	4689      	mov	r9, r1
 8007efc:	4692      	mov	sl, r2
 8007efe:	eb19 0005 	adds.w	r0, r9, r5
 8007f02:	eb4a 0106 	adc.w	r1, sl, r6
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	461d      	mov	r5, r3
 8007f0c:	f04f 0600 	mov.w	r6, #0
 8007f10:	196b      	adds	r3, r5, r5
 8007f12:	eb46 0406 	adc.w	r4, r6, r6
 8007f16:	461a      	mov	r2, r3
 8007f18:	4623      	mov	r3, r4
 8007f1a:	f7f8 fdbf 	bl	8000a9c <__aeabi_uldivmod>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	460c      	mov	r4, r1
 8007f22:	461a      	mov	r2, r3
 8007f24:	4b2c      	ldr	r3, [pc, #176]	; (8007fd8 <UART_SetConfig+0x384>)
 8007f26:	fba3 1302 	umull	r1, r3, r3, r2
 8007f2a:	095b      	lsrs	r3, r3, #5
 8007f2c:	2164      	movs	r1, #100	; 0x64
 8007f2e:	fb01 f303 	mul.w	r3, r1, r3
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	3332      	adds	r3, #50	; 0x32
 8007f38:	4a27      	ldr	r2, [pc, #156]	; (8007fd8 <UART_SetConfig+0x384>)
 8007f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3e:	095b      	lsrs	r3, r3, #5
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f46:	4498      	add	r8, r3
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	461d      	mov	r5, r3
 8007f4c:	f04f 0600 	mov.w	r6, #0
 8007f50:	46a9      	mov	r9, r5
 8007f52:	46b2      	mov	sl, r6
 8007f54:	eb19 0309 	adds.w	r3, r9, r9
 8007f58:	eb4a 040a 	adc.w	r4, sl, sl
 8007f5c:	4699      	mov	r9, r3
 8007f5e:	46a2      	mov	sl, r4
 8007f60:	eb19 0905 	adds.w	r9, r9, r5
 8007f64:	eb4a 0a06 	adc.w	sl, sl, r6
 8007f68:	f04f 0100 	mov.w	r1, #0
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f7c:	4689      	mov	r9, r1
 8007f7e:	4692      	mov	sl, r2
 8007f80:	eb19 0005 	adds.w	r0, r9, r5
 8007f84:	eb4a 0106 	adc.w	r1, sl, r6
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	461d      	mov	r5, r3
 8007f8e:	f04f 0600 	mov.w	r6, #0
 8007f92:	196b      	adds	r3, r5, r5
 8007f94:	eb46 0406 	adc.w	r4, r6, r6
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4623      	mov	r3, r4
 8007f9c:	f7f8 fd7e 	bl	8000a9c <__aeabi_uldivmod>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <UART_SetConfig+0x384>)
 8007fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8007fac:	095b      	lsrs	r3, r3, #5
 8007fae:	2164      	movs	r1, #100	; 0x64
 8007fb0:	fb01 f303 	mul.w	r3, r1, r3
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	00db      	lsls	r3, r3, #3
 8007fb8:	3332      	adds	r3, #50	; 0x32
 8007fba:	4a07      	ldr	r2, [pc, #28]	; (8007fd8 <UART_SetConfig+0x384>)
 8007fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc0:	095b      	lsrs	r3, r3, #5
 8007fc2:	f003 0207 	and.w	r2, r3, #7
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4442      	add	r2, r8
 8007fcc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007fce:	e1b2      	b.n	8008336 <UART_SetConfig+0x6e2>
 8007fd0:	40011000 	.word	0x40011000
 8007fd4:	40011400 	.word	0x40011400
 8007fd8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4ad7      	ldr	r2, [pc, #860]	; (8008340 <UART_SetConfig+0x6ec>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d005      	beq.n	8007ff2 <UART_SetConfig+0x39e>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4ad6      	ldr	r2, [pc, #856]	; (8008344 <UART_SetConfig+0x6f0>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	f040 80d1 	bne.w	8008194 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ff2:	f7fd f8af 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 8007ff6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	469a      	mov	sl, r3
 8007ffc:	f04f 0b00 	mov.w	fp, #0
 8008000:	46d0      	mov	r8, sl
 8008002:	46d9      	mov	r9, fp
 8008004:	eb18 0308 	adds.w	r3, r8, r8
 8008008:	eb49 0409 	adc.w	r4, r9, r9
 800800c:	4698      	mov	r8, r3
 800800e:	46a1      	mov	r9, r4
 8008010:	eb18 080a 	adds.w	r8, r8, sl
 8008014:	eb49 090b 	adc.w	r9, r9, fp
 8008018:	f04f 0100 	mov.w	r1, #0
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008024:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008028:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800802c:	4688      	mov	r8, r1
 800802e:	4691      	mov	r9, r2
 8008030:	eb1a 0508 	adds.w	r5, sl, r8
 8008034:	eb4b 0609 	adc.w	r6, fp, r9
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	4619      	mov	r1, r3
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	f04f 0300 	mov.w	r3, #0
 8008046:	f04f 0400 	mov.w	r4, #0
 800804a:	0094      	lsls	r4, r2, #2
 800804c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008050:	008b      	lsls	r3, r1, #2
 8008052:	461a      	mov	r2, r3
 8008054:	4623      	mov	r3, r4
 8008056:	4628      	mov	r0, r5
 8008058:	4631      	mov	r1, r6
 800805a:	f7f8 fd1f 	bl	8000a9c <__aeabi_uldivmod>
 800805e:	4603      	mov	r3, r0
 8008060:	460c      	mov	r4, r1
 8008062:	461a      	mov	r2, r3
 8008064:	4bb8      	ldr	r3, [pc, #736]	; (8008348 <UART_SetConfig+0x6f4>)
 8008066:	fba3 2302 	umull	r2, r3, r3, r2
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	469b      	mov	fp, r3
 8008074:	f04f 0c00 	mov.w	ip, #0
 8008078:	46d9      	mov	r9, fp
 800807a:	46e2      	mov	sl, ip
 800807c:	eb19 0309 	adds.w	r3, r9, r9
 8008080:	eb4a 040a 	adc.w	r4, sl, sl
 8008084:	4699      	mov	r9, r3
 8008086:	46a2      	mov	sl, r4
 8008088:	eb19 090b 	adds.w	r9, r9, fp
 800808c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008090:	f04f 0100 	mov.w	r1, #0
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800809c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80080a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80080a4:	4689      	mov	r9, r1
 80080a6:	4692      	mov	sl, r2
 80080a8:	eb1b 0509 	adds.w	r5, fp, r9
 80080ac:	eb4c 060a 	adc.w	r6, ip, sl
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	4619      	mov	r1, r3
 80080b6:	f04f 0200 	mov.w	r2, #0
 80080ba:	f04f 0300 	mov.w	r3, #0
 80080be:	f04f 0400 	mov.w	r4, #0
 80080c2:	0094      	lsls	r4, r2, #2
 80080c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80080c8:	008b      	lsls	r3, r1, #2
 80080ca:	461a      	mov	r2, r3
 80080cc:	4623      	mov	r3, r4
 80080ce:	4628      	mov	r0, r5
 80080d0:	4631      	mov	r1, r6
 80080d2:	f7f8 fce3 	bl	8000a9c <__aeabi_uldivmod>
 80080d6:	4603      	mov	r3, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	461a      	mov	r2, r3
 80080dc:	4b9a      	ldr	r3, [pc, #616]	; (8008348 <UART_SetConfig+0x6f4>)
 80080de:	fba3 1302 	umull	r1, r3, r3, r2
 80080e2:	095b      	lsrs	r3, r3, #5
 80080e4:	2164      	movs	r1, #100	; 0x64
 80080e6:	fb01 f303 	mul.w	r3, r1, r3
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	011b      	lsls	r3, r3, #4
 80080ee:	3332      	adds	r3, #50	; 0x32
 80080f0:	4a95      	ldr	r2, [pc, #596]	; (8008348 <UART_SetConfig+0x6f4>)
 80080f2:	fba2 2303 	umull	r2, r3, r2, r3
 80080f6:	095b      	lsrs	r3, r3, #5
 80080f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080fc:	4498      	add	r8, r3
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	469b      	mov	fp, r3
 8008102:	f04f 0c00 	mov.w	ip, #0
 8008106:	46d9      	mov	r9, fp
 8008108:	46e2      	mov	sl, ip
 800810a:	eb19 0309 	adds.w	r3, r9, r9
 800810e:	eb4a 040a 	adc.w	r4, sl, sl
 8008112:	4699      	mov	r9, r3
 8008114:	46a2      	mov	sl, r4
 8008116:	eb19 090b 	adds.w	r9, r9, fp
 800811a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800811e:	f04f 0100 	mov.w	r1, #0
 8008122:	f04f 0200 	mov.w	r2, #0
 8008126:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800812a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800812e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008132:	4689      	mov	r9, r1
 8008134:	4692      	mov	sl, r2
 8008136:	eb1b 0509 	adds.w	r5, fp, r9
 800813a:	eb4c 060a 	adc.w	r6, ip, sl
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	4619      	mov	r1, r3
 8008144:	f04f 0200 	mov.w	r2, #0
 8008148:	f04f 0300 	mov.w	r3, #0
 800814c:	f04f 0400 	mov.w	r4, #0
 8008150:	0094      	lsls	r4, r2, #2
 8008152:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008156:	008b      	lsls	r3, r1, #2
 8008158:	461a      	mov	r2, r3
 800815a:	4623      	mov	r3, r4
 800815c:	4628      	mov	r0, r5
 800815e:	4631      	mov	r1, r6
 8008160:	f7f8 fc9c 	bl	8000a9c <__aeabi_uldivmod>
 8008164:	4603      	mov	r3, r0
 8008166:	460c      	mov	r4, r1
 8008168:	461a      	mov	r2, r3
 800816a:	4b77      	ldr	r3, [pc, #476]	; (8008348 <UART_SetConfig+0x6f4>)
 800816c:	fba3 1302 	umull	r1, r3, r3, r2
 8008170:	095b      	lsrs	r3, r3, #5
 8008172:	2164      	movs	r1, #100	; 0x64
 8008174:	fb01 f303 	mul.w	r3, r1, r3
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	3332      	adds	r3, #50	; 0x32
 800817e:	4a72      	ldr	r2, [pc, #456]	; (8008348 <UART_SetConfig+0x6f4>)
 8008180:	fba2 2303 	umull	r2, r3, r2, r3
 8008184:	095b      	lsrs	r3, r3, #5
 8008186:	f003 020f 	and.w	r2, r3, #15
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4442      	add	r2, r8
 8008190:	609a      	str	r2, [r3, #8]
 8008192:	e0d0      	b.n	8008336 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008194:	f7fc ffca 	bl	800512c <HAL_RCC_GetPCLK1Freq>
 8008198:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	469a      	mov	sl, r3
 800819e:	f04f 0b00 	mov.w	fp, #0
 80081a2:	46d0      	mov	r8, sl
 80081a4:	46d9      	mov	r9, fp
 80081a6:	eb18 0308 	adds.w	r3, r8, r8
 80081aa:	eb49 0409 	adc.w	r4, r9, r9
 80081ae:	4698      	mov	r8, r3
 80081b0:	46a1      	mov	r9, r4
 80081b2:	eb18 080a 	adds.w	r8, r8, sl
 80081b6:	eb49 090b 	adc.w	r9, r9, fp
 80081ba:	f04f 0100 	mov.w	r1, #0
 80081be:	f04f 0200 	mov.w	r2, #0
 80081c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80081c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80081ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80081ce:	4688      	mov	r8, r1
 80081d0:	4691      	mov	r9, r2
 80081d2:	eb1a 0508 	adds.w	r5, sl, r8
 80081d6:	eb4b 0609 	adc.w	r6, fp, r9
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	4619      	mov	r1, r3
 80081e0:	f04f 0200 	mov.w	r2, #0
 80081e4:	f04f 0300 	mov.w	r3, #0
 80081e8:	f04f 0400 	mov.w	r4, #0
 80081ec:	0094      	lsls	r4, r2, #2
 80081ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081f2:	008b      	lsls	r3, r1, #2
 80081f4:	461a      	mov	r2, r3
 80081f6:	4623      	mov	r3, r4
 80081f8:	4628      	mov	r0, r5
 80081fa:	4631      	mov	r1, r6
 80081fc:	f7f8 fc4e 	bl	8000a9c <__aeabi_uldivmod>
 8008200:	4603      	mov	r3, r0
 8008202:	460c      	mov	r4, r1
 8008204:	461a      	mov	r2, r3
 8008206:	4b50      	ldr	r3, [pc, #320]	; (8008348 <UART_SetConfig+0x6f4>)
 8008208:	fba3 2302 	umull	r2, r3, r3, r2
 800820c:	095b      	lsrs	r3, r3, #5
 800820e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	469b      	mov	fp, r3
 8008216:	f04f 0c00 	mov.w	ip, #0
 800821a:	46d9      	mov	r9, fp
 800821c:	46e2      	mov	sl, ip
 800821e:	eb19 0309 	adds.w	r3, r9, r9
 8008222:	eb4a 040a 	adc.w	r4, sl, sl
 8008226:	4699      	mov	r9, r3
 8008228:	46a2      	mov	sl, r4
 800822a:	eb19 090b 	adds.w	r9, r9, fp
 800822e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008232:	f04f 0100 	mov.w	r1, #0
 8008236:	f04f 0200 	mov.w	r2, #0
 800823a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800823e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008242:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008246:	4689      	mov	r9, r1
 8008248:	4692      	mov	sl, r2
 800824a:	eb1b 0509 	adds.w	r5, fp, r9
 800824e:	eb4c 060a 	adc.w	r6, ip, sl
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	4619      	mov	r1, r3
 8008258:	f04f 0200 	mov.w	r2, #0
 800825c:	f04f 0300 	mov.w	r3, #0
 8008260:	f04f 0400 	mov.w	r4, #0
 8008264:	0094      	lsls	r4, r2, #2
 8008266:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800826a:	008b      	lsls	r3, r1, #2
 800826c:	461a      	mov	r2, r3
 800826e:	4623      	mov	r3, r4
 8008270:	4628      	mov	r0, r5
 8008272:	4631      	mov	r1, r6
 8008274:	f7f8 fc12 	bl	8000a9c <__aeabi_uldivmod>
 8008278:	4603      	mov	r3, r0
 800827a:	460c      	mov	r4, r1
 800827c:	461a      	mov	r2, r3
 800827e:	4b32      	ldr	r3, [pc, #200]	; (8008348 <UART_SetConfig+0x6f4>)
 8008280:	fba3 1302 	umull	r1, r3, r3, r2
 8008284:	095b      	lsrs	r3, r3, #5
 8008286:	2164      	movs	r1, #100	; 0x64
 8008288:	fb01 f303 	mul.w	r3, r1, r3
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	3332      	adds	r3, #50	; 0x32
 8008292:	4a2d      	ldr	r2, [pc, #180]	; (8008348 <UART_SetConfig+0x6f4>)
 8008294:	fba2 2303 	umull	r2, r3, r2, r3
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800829e:	4498      	add	r8, r3
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	469b      	mov	fp, r3
 80082a4:	f04f 0c00 	mov.w	ip, #0
 80082a8:	46d9      	mov	r9, fp
 80082aa:	46e2      	mov	sl, ip
 80082ac:	eb19 0309 	adds.w	r3, r9, r9
 80082b0:	eb4a 040a 	adc.w	r4, sl, sl
 80082b4:	4699      	mov	r9, r3
 80082b6:	46a2      	mov	sl, r4
 80082b8:	eb19 090b 	adds.w	r9, r9, fp
 80082bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80082c0:	f04f 0100 	mov.w	r1, #0
 80082c4:	f04f 0200 	mov.w	r2, #0
 80082c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082d4:	4689      	mov	r9, r1
 80082d6:	4692      	mov	sl, r2
 80082d8:	eb1b 0509 	adds.w	r5, fp, r9
 80082dc:	eb4c 060a 	adc.w	r6, ip, sl
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	4619      	mov	r1, r3
 80082e6:	f04f 0200 	mov.w	r2, #0
 80082ea:	f04f 0300 	mov.w	r3, #0
 80082ee:	f04f 0400 	mov.w	r4, #0
 80082f2:	0094      	lsls	r4, r2, #2
 80082f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80082f8:	008b      	lsls	r3, r1, #2
 80082fa:	461a      	mov	r2, r3
 80082fc:	4623      	mov	r3, r4
 80082fe:	4628      	mov	r0, r5
 8008300:	4631      	mov	r1, r6
 8008302:	f7f8 fbcb 	bl	8000a9c <__aeabi_uldivmod>
 8008306:	4603      	mov	r3, r0
 8008308:	460c      	mov	r4, r1
 800830a:	461a      	mov	r2, r3
 800830c:	4b0e      	ldr	r3, [pc, #56]	; (8008348 <UART_SetConfig+0x6f4>)
 800830e:	fba3 1302 	umull	r1, r3, r3, r2
 8008312:	095b      	lsrs	r3, r3, #5
 8008314:	2164      	movs	r1, #100	; 0x64
 8008316:	fb01 f303 	mul.w	r3, r1, r3
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	011b      	lsls	r3, r3, #4
 800831e:	3332      	adds	r3, #50	; 0x32
 8008320:	4a09      	ldr	r2, [pc, #36]	; (8008348 <UART_SetConfig+0x6f4>)
 8008322:	fba2 2303 	umull	r2, r3, r2, r3
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	f003 020f 	and.w	r2, r3, #15
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4442      	add	r2, r8
 8008332:	609a      	str	r2, [r3, #8]
}
 8008334:	e7ff      	b.n	8008336 <UART_SetConfig+0x6e2>
 8008336:	bf00      	nop
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008340:	40011000 	.word	0x40011000
 8008344:	40011400 	.word	0x40011400
 8008348:	51eb851f 	.word	0x51eb851f

0800834c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800834c:	b580      	push	{r7, lr}
 800834e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008350:	4904      	ldr	r1, [pc, #16]	; (8008364 <MX_FATFS_Init+0x18>)
 8008352:	4805      	ldr	r0, [pc, #20]	; (8008368 <MX_FATFS_Init+0x1c>)
 8008354:	f003 f92c 	bl	800b5b0 <FATFS_LinkDriver>
 8008358:	4603      	mov	r3, r0
 800835a:	461a      	mov	r2, r3
 800835c:	4b03      	ldr	r3, [pc, #12]	; (800836c <MX_FATFS_Init+0x20>)
 800835e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008360:	bf00      	nop
 8008362:	bd80      	pop	{r7, pc}
 8008364:	20003328 	.word	0x20003328
 8008368:	20000014 	.word	0x20000014
 800836c:	2000332c 	.word	0x2000332c

08008370 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008374:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8008376:	4618      	mov	r0, r3
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	4618      	mov	r0, r3
 800838e:	f7f8 febf 	bl	8001110 <SD_disk_initialize>
 8008392:	4603      	mov	r3, r0
 8008394:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008396:	4618      	mov	r0, r3
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	4603      	mov	r3, r0
 80083a6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 80083a8:	79fb      	ldrb	r3, [r7, #7]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7f8 ff9a 	bl	80012e4 <SD_disk_status>
 80083b0:	4603      	mov	r3, r0
 80083b2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	607a      	str	r2, [r7, #4]
 80083c6:	603b      	str	r3, [r7, #0]
 80083c8:	4603      	mov	r3, r0
 80083ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80083cc:	7bf8      	ldrb	r0, [r7, #15]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	68b9      	ldr	r1, [r7, #8]
 80083d4:	f7f8 ff9c 	bl	8001310 <SD_disk_read>
 80083d8:	4603      	mov	r3, r0
 80083da:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	607a      	str	r2, [r7, #4]
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80083f4:	7bf8      	ldrb	r0, [r7, #15]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	68b9      	ldr	r1, [r7, #8]
 80083fc:	f7f8 fff2 	bl	80013e4 <SD_disk_write>
 8008400:	4603      	mov	r3, r0
 8008402:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	603a      	str	r2, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
 8008418:	460b      	mov	r3, r1
 800841a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800841c:	79fb      	ldrb	r3, [r7, #7]
 800841e:	79b9      	ldrb	r1, [r7, #6]
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f7f9 f862 	bl	80014ec <SD_disk_ioctl>
 8008428:	4603      	mov	r3, r0
 800842a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	4603      	mov	r3, r0
 800843c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	4a08      	ldr	r2, [pc, #32]	; (8008464 <disk_status+0x30>)
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	79fa      	ldrb	r2, [r7, #7]
 800844c:	4905      	ldr	r1, [pc, #20]	; (8008464 <disk_status+0x30>)
 800844e:	440a      	add	r2, r1
 8008450:	7a12      	ldrb	r2, [r2, #8]
 8008452:	4610      	mov	r0, r2
 8008454:	4798      	blx	r3
 8008456:	4603      	mov	r3, r0
 8008458:	73fb      	strb	r3, [r7, #15]
  return stat;
 800845a:	7bfb      	ldrb	r3, [r7, #15]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000330 	.word	0x20000330

08008468 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	4a0d      	ldr	r2, [pc, #52]	; (80084b0 <disk_initialize+0x48>)
 800847a:	5cd3      	ldrb	r3, [r2, r3]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d111      	bne.n	80084a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	4a0b      	ldr	r2, [pc, #44]	; (80084b0 <disk_initialize+0x48>)
 8008484:	2101      	movs	r1, #1
 8008486:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <disk_initialize+0x48>)
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	79fa      	ldrb	r2, [r7, #7]
 8008496:	4906      	ldr	r1, [pc, #24]	; (80084b0 <disk_initialize+0x48>)
 8008498:	440a      	add	r2, r1
 800849a:	7a12      	ldrb	r2, [r2, #8]
 800849c:	4610      	mov	r0, r2
 800849e:	4798      	blx	r3
 80084a0:	4603      	mov	r3, r0
 80084a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000330 	.word	0x20000330

080084b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80084b4:	b590      	push	{r4, r7, lr}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	4603      	mov	r3, r0
 80084c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
 80084c6:	4a0a      	ldr	r2, [pc, #40]	; (80084f0 <disk_read+0x3c>)
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	689c      	ldr	r4, [r3, #8]
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	4a07      	ldr	r2, [pc, #28]	; (80084f0 <disk_read+0x3c>)
 80084d4:	4413      	add	r3, r2
 80084d6:	7a18      	ldrb	r0, [r3, #8]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	68b9      	ldr	r1, [r7, #8]
 80084de:	47a0      	blx	r4
 80084e0:	4603      	mov	r3, r0
 80084e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	371c      	adds	r7, #28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd90      	pop	{r4, r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20000330 	.word	0x20000330

080084f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80084f4:	b590      	push	{r4, r7, lr}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	607a      	str	r2, [r7, #4]
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	4603      	mov	r3, r0
 8008502:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	4a0a      	ldr	r2, [pc, #40]	; (8008530 <disk_write+0x3c>)
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	68dc      	ldr	r4, [r3, #12]
 8008510:	7bfb      	ldrb	r3, [r7, #15]
 8008512:	4a07      	ldr	r2, [pc, #28]	; (8008530 <disk_write+0x3c>)
 8008514:	4413      	add	r3, r2
 8008516:	7a18      	ldrb	r0, [r3, #8]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	47a0      	blx	r4
 8008520:	4603      	mov	r3, r0
 8008522:	75fb      	strb	r3, [r7, #23]
  return res;
 8008524:	7dfb      	ldrb	r3, [r7, #23]
}
 8008526:	4618      	mov	r0, r3
 8008528:	371c      	adds	r7, #28
 800852a:	46bd      	mov	sp, r7
 800852c:	bd90      	pop	{r4, r7, pc}
 800852e:	bf00      	nop
 8008530:	20000330 	.word	0x20000330

08008534 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	603a      	str	r2, [r7, #0]
 800853e:	71fb      	strb	r3, [r7, #7]
 8008540:	460b      	mov	r3, r1
 8008542:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	4a09      	ldr	r2, [pc, #36]	; (800856c <disk_ioctl+0x38>)
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	79fa      	ldrb	r2, [r7, #7]
 8008552:	4906      	ldr	r1, [pc, #24]	; (800856c <disk_ioctl+0x38>)
 8008554:	440a      	add	r2, r1
 8008556:	7a10      	ldrb	r0, [r2, #8]
 8008558:	79b9      	ldrb	r1, [r7, #6]
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	4798      	blx	r3
 800855e:	4603      	mov	r3, r0
 8008560:	73fb      	strb	r3, [r7, #15]
  return res;
 8008562:	7bfb      	ldrb	r3, [r7, #15]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20000330 	.word	0x20000330

08008570 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3301      	adds	r3, #1
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008580:	89fb      	ldrh	r3, [r7, #14]
 8008582:	021b      	lsls	r3, r3, #8
 8008584:	b21a      	sxth	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	b21b      	sxth	r3, r3
 800858c:	4313      	orrs	r3, r2
 800858e:	b21b      	sxth	r3, r3
 8008590:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008592:	89fb      	ldrh	r3, [r7, #14]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3303      	adds	r3, #3
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	3202      	adds	r2, #2
 80085b8:	7812      	ldrb	r2, [r2, #0]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	021b      	lsls	r3, r3, #8
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	3201      	adds	r2, #1
 80085c6:	7812      	ldrb	r2, [r2, #0]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	021b      	lsls	r3, r3, #8
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	7812      	ldrb	r2, [r2, #0]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80085d8:	68fb      	ldr	r3, [r7, #12]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	460b      	mov	r3, r1
 80085f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	887a      	ldrh	r2, [r7, #2]
 80085fa:	b2d2      	uxtb	r2, r2
 80085fc:	701a      	strb	r2, [r3, #0]
 80085fe:	887b      	ldrh	r3, [r7, #2]
 8008600:	0a1b      	lsrs	r3, r3, #8
 8008602:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	607a      	str	r2, [r7, #4]
 800860a:	887a      	ldrh	r2, [r7, #2]
 800860c:	b2d2      	uxtb	r2, r2
 800860e:	701a      	strb	r2, [r3, #0]
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	b2d2      	uxtb	r2, r2
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	0a1b      	lsrs	r3, r3, #8
 8008636:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	607a      	str	r2, [r7, #4]
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	b2d2      	uxtb	r2, r2
 8008642:	701a      	strb	r2, [r3, #0]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	0a1b      	lsrs	r3, r3, #8
 8008648:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	1c5a      	adds	r2, r3, #1
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	b2d2      	uxtb	r2, r2
 8008654:	701a      	strb	r2, [r3, #0]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	0a1b      	lsrs	r3, r3, #8
 800865a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	1c5a      	adds	r2, r3, #1
 8008660:	607a      	str	r2, [r7, #4]
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	b2d2      	uxtb	r2, r2
 8008666:	701a      	strb	r2, [r3, #0]
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008674:	b480      	push	{r7}
 8008676:	b087      	sub	sp, #28
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00d      	beq.n	80086aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	1c53      	adds	r3, r2, #1
 8008692:	613b      	str	r3, [r7, #16]
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	1c59      	adds	r1, r3, #1
 8008698:	6179      	str	r1, [r7, #20]
 800869a:	7812      	ldrb	r2, [r2, #0]
 800869c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	3b01      	subs	r3, #1
 80086a2:	607b      	str	r3, [r7, #4]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1f1      	bne.n	800868e <mem_cpy+0x1a>
	}
}
 80086aa:	bf00      	nop
 80086ac:	371c      	adds	r7, #28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80086b6:	b480      	push	{r7}
 80086b8:	b087      	sub	sp, #28
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	617a      	str	r2, [r7, #20]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	b2d2      	uxtb	r2, r2
 80086d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	3b01      	subs	r3, #1
 80086d6:	607b      	str	r3, [r7, #4]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1f3      	bne.n	80086c6 <mem_set+0x10>
}
 80086de:	bf00      	nop
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80086ea:	b480      	push	{r7}
 80086ec:	b089      	sub	sp, #36	; 0x24
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	61fb      	str	r3, [r7, #28]
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	61fa      	str	r2, [r7, #28]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	4619      	mov	r1, r3
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	61ba      	str	r2, [r7, #24]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	1acb      	subs	r3, r1, r3
 8008716:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3b01      	subs	r3, #1
 800871c:	607b      	str	r3, [r7, #4]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <mem_cmp+0x40>
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0eb      	beq.n	8008702 <mem_cmp+0x18>

	return r;
 800872a:	697b      	ldr	r3, [r7, #20]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3724      	adds	r7, #36	; 0x24
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008742:	e002      	b.n	800874a <chk_chr+0x12>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3301      	adds	r3, #1
 8008748:	607b      	str	r3, [r7, #4]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <chk_chr+0x26>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	4293      	cmp	r3, r2
 800875c:	d1f2      	bne.n	8008744 <chk_chr+0xc>
	return *str;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	781b      	ldrb	r3, [r3, #0]
}
 8008762:	4618      	mov	r0, r3
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
	...

08008770 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800877a:	2300      	movs	r3, #0
 800877c:	60bb      	str	r3, [r7, #8]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	e029      	b.n	80087d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008784:	4a27      	ldr	r2, [pc, #156]	; (8008824 <chk_lock+0xb4>)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	4413      	add	r3, r2
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d01d      	beq.n	80087ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008792:	4a24      	ldr	r2, [pc, #144]	; (8008824 <chk_lock+0xb4>)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	011b      	lsls	r3, r3, #4
 8008798:	4413      	add	r3, r2
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d116      	bne.n	80087d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80087a4:	4a1f      	ldr	r2, [pc, #124]	; (8008824 <chk_lock+0xb4>)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	011b      	lsls	r3, r3, #4
 80087aa:	4413      	add	r3, r2
 80087ac:	3304      	adds	r3, #4
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d10c      	bne.n	80087d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80087b8:	4a1a      	ldr	r2, [pc, #104]	; (8008824 <chk_lock+0xb4>)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	011b      	lsls	r3, r3, #4
 80087be:	4413      	add	r3, r2
 80087c0:	3308      	adds	r3, #8
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d102      	bne.n	80087d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80087cc:	e007      	b.n	80087de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80087ce:	2301      	movs	r3, #1
 80087d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3301      	adds	r3, #1
 80087d6:	60fb      	str	r3, [r7, #12]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d9d2      	bls.n	8008784 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d109      	bne.n	80087f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <chk_lock+0x80>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d101      	bne.n	80087f4 <chk_lock+0x84>
 80087f0:	2300      	movs	r3, #0
 80087f2:	e010      	b.n	8008816 <chk_lock+0xa6>
 80087f4:	2312      	movs	r3, #18
 80087f6:	e00e      	b.n	8008816 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d108      	bne.n	8008810 <chk_lock+0xa0>
 80087fe:	4a09      	ldr	r2, [pc, #36]	; (8008824 <chk_lock+0xb4>)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	011b      	lsls	r3, r3, #4
 8008804:	4413      	add	r3, r2
 8008806:	330c      	adds	r3, #12
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800880e:	d101      	bne.n	8008814 <chk_lock+0xa4>
 8008810:	2310      	movs	r3, #16
 8008812:	e000      	b.n	8008816 <chk_lock+0xa6>
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	20000110 	.word	0x20000110

08008828 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800882e:	2300      	movs	r3, #0
 8008830:	607b      	str	r3, [r7, #4]
 8008832:	e002      	b.n	800883a <enq_lock+0x12>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3301      	adds	r3, #1
 8008838:	607b      	str	r3, [r7, #4]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d806      	bhi.n	800884e <enq_lock+0x26>
 8008840:	4a09      	ldr	r2, [pc, #36]	; (8008868 <enq_lock+0x40>)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	011b      	lsls	r3, r3, #4
 8008846:	4413      	add	r3, r2
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1f2      	bne.n	8008834 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b02      	cmp	r3, #2
 8008852:	bf14      	ite	ne
 8008854:	2301      	movne	r3, #1
 8008856:	2300      	moveq	r3, #0
 8008858:	b2db      	uxtb	r3, r3
}
 800885a:	4618      	mov	r0, r3
 800885c:	370c      	adds	r7, #12
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	20000110 	.word	0x20000110

0800886c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008876:	2300      	movs	r3, #0
 8008878:	60fb      	str	r3, [r7, #12]
 800887a:	e01f      	b.n	80088bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800887c:	4a41      	ldr	r2, [pc, #260]	; (8008984 <inc_lock+0x118>)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	011b      	lsls	r3, r3, #4
 8008882:	4413      	add	r3, r2
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	429a      	cmp	r2, r3
 800888c:	d113      	bne.n	80088b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800888e:	4a3d      	ldr	r2, [pc, #244]	; (8008984 <inc_lock+0x118>)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	011b      	lsls	r3, r3, #4
 8008894:	4413      	add	r3, r2
 8008896:	3304      	adds	r3, #4
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800889e:	429a      	cmp	r2, r3
 80088a0:	d109      	bne.n	80088b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80088a2:	4a38      	ldr	r2, [pc, #224]	; (8008984 <inc_lock+0x118>)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	011b      	lsls	r3, r3, #4
 80088a8:	4413      	add	r3, r2
 80088aa:	3308      	adds	r3, #8
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d006      	beq.n	80088c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3301      	adds	r3, #1
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d9dc      	bls.n	800887c <inc_lock+0x10>
 80088c2:	e000      	b.n	80088c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80088c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d132      	bne.n	8008932 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	e002      	b.n	80088d8 <inc_lock+0x6c>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3301      	adds	r3, #1
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d806      	bhi.n	80088ec <inc_lock+0x80>
 80088de:	4a29      	ldr	r2, [pc, #164]	; (8008984 <inc_lock+0x118>)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	011b      	lsls	r3, r3, #4
 80088e4:	4413      	add	r3, r2
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1f2      	bne.n	80088d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d101      	bne.n	80088f6 <inc_lock+0x8a>
 80088f2:	2300      	movs	r3, #0
 80088f4:	e040      	b.n	8008978 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	4922      	ldr	r1, [pc, #136]	; (8008984 <inc_lock+0x118>)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	440b      	add	r3, r1
 8008902:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689a      	ldr	r2, [r3, #8]
 8008908:	491e      	ldr	r1, [pc, #120]	; (8008984 <inc_lock+0x118>)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	440b      	add	r3, r1
 8008910:	3304      	adds	r3, #4
 8008912:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	695a      	ldr	r2, [r3, #20]
 8008918:	491a      	ldr	r1, [pc, #104]	; (8008984 <inc_lock+0x118>)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	011b      	lsls	r3, r3, #4
 800891e:	440b      	add	r3, r1
 8008920:	3308      	adds	r3, #8
 8008922:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008924:	4a17      	ldr	r2, [pc, #92]	; (8008984 <inc_lock+0x118>)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	011b      	lsls	r3, r3, #4
 800892a:	4413      	add	r3, r2
 800892c:	330c      	adds	r3, #12
 800892e:	2200      	movs	r2, #0
 8008930:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d009      	beq.n	800894c <inc_lock+0xe0>
 8008938:	4a12      	ldr	r2, [pc, #72]	; (8008984 <inc_lock+0x118>)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	011b      	lsls	r3, r3, #4
 800893e:	4413      	add	r3, r2
 8008940:	330c      	adds	r3, #12
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <inc_lock+0xe0>
 8008948:	2300      	movs	r3, #0
 800894a:	e015      	b.n	8008978 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d108      	bne.n	8008964 <inc_lock+0xf8>
 8008952:	4a0c      	ldr	r2, [pc, #48]	; (8008984 <inc_lock+0x118>)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	011b      	lsls	r3, r3, #4
 8008958:	4413      	add	r3, r2
 800895a:	330c      	adds	r3, #12
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	3301      	adds	r3, #1
 8008960:	b29a      	uxth	r2, r3
 8008962:	e001      	b.n	8008968 <inc_lock+0xfc>
 8008964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008968:	4906      	ldr	r1, [pc, #24]	; (8008984 <inc_lock+0x118>)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	440b      	add	r3, r1
 8008970:	330c      	adds	r3, #12
 8008972:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	3301      	adds	r3, #1
}
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	20000110 	.word	0x20000110

08008988 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3b01      	subs	r3, #1
 8008994:	607b      	str	r3, [r7, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d825      	bhi.n	80089e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800899c:	4a17      	ldr	r2, [pc, #92]	; (80089fc <dec_lock+0x74>)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	011b      	lsls	r3, r3, #4
 80089a2:	4413      	add	r3, r2
 80089a4:	330c      	adds	r3, #12
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80089aa:	89fb      	ldrh	r3, [r7, #14]
 80089ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b0:	d101      	bne.n	80089b6 <dec_lock+0x2e>
 80089b2:	2300      	movs	r3, #0
 80089b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80089b6:	89fb      	ldrh	r3, [r7, #14]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <dec_lock+0x3a>
 80089bc:	89fb      	ldrh	r3, [r7, #14]
 80089be:	3b01      	subs	r3, #1
 80089c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80089c2:	4a0e      	ldr	r2, [pc, #56]	; (80089fc <dec_lock+0x74>)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	4413      	add	r3, r2
 80089ca:	330c      	adds	r3, #12
 80089cc:	89fa      	ldrh	r2, [r7, #14]
 80089ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80089d0:	89fb      	ldrh	r3, [r7, #14]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d105      	bne.n	80089e2 <dec_lock+0x5a>
 80089d6:	4a09      	ldr	r2, [pc, #36]	; (80089fc <dec_lock+0x74>)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	4413      	add	r3, r2
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	737b      	strb	r3, [r7, #13]
 80089e6:	e001      	b.n	80089ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80089e8:	2302      	movs	r3, #2
 80089ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80089ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	20000110 	.word	0x20000110

08008a00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	e010      	b.n	8008a30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008a0e:	4a0d      	ldr	r2, [pc, #52]	; (8008a44 <clear_lock+0x44>)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	011b      	lsls	r3, r3, #4
 8008a14:	4413      	add	r3, r2
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d105      	bne.n	8008a2a <clear_lock+0x2a>
 8008a1e:	4a09      	ldr	r2, [pc, #36]	; (8008a44 <clear_lock+0x44>)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	011b      	lsls	r3, r3, #4
 8008a24:	4413      	add	r3, r2
 8008a26:	2200      	movs	r2, #0
 8008a28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d9eb      	bls.n	8008a0e <clear_lock+0xe>
	}
}
 8008a36:	bf00      	nop
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	20000110 	.word	0x20000110

08008a48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	78db      	ldrb	r3, [r3, #3]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d034      	beq.n	8008ac6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	7858      	ldrb	r0, [r3, #1]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	f7ff fd40 	bl	80084f4 <disk_write>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	73fb      	strb	r3, [r7, #15]
 8008a7e:	e022      	b.n	8008ac6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	1ad2      	subs	r2, r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d217      	bcs.n	8008ac6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	789b      	ldrb	r3, [r3, #2]
 8008a9a:	613b      	str	r3, [r7, #16]
 8008a9c:	e010      	b.n	8008ac0 <sync_window+0x78>
					wsect += fs->fsize;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	7858      	ldrb	r0, [r3, #1]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	f7ff fd1d 	bl	80084f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	613b      	str	r3, [r7, #16]
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d8eb      	bhi.n	8008a9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d01b      	beq.n	8008b20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7ff ffad 	bl	8008a48 <sync_window>
 8008aee:	4603      	mov	r3, r0
 8008af0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d113      	bne.n	8008b20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	7858      	ldrb	r0, [r3, #1]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008b02:	2301      	movs	r3, #1
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	f7ff fcd5 	bl	80084b4 <disk_read>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d004      	beq.n	8008b1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008b10:	f04f 33ff 	mov.w	r3, #4294967295
 8008b14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
	...

08008b2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7ff ff87 	bl	8008a48 <sync_window>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d159      	bne.n	8008bf8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d149      	bne.n	8008be0 <sync_fs+0xb4>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	791b      	ldrb	r3, [r3, #4]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d145      	bne.n	8008be0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	899b      	ldrh	r3, [r3, #12]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	2100      	movs	r1, #0
 8008b62:	f7ff fda8 	bl	80086b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3338      	adds	r3, #56	; 0x38
 8008b6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b6e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff fd37 	bl	80085e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3338      	adds	r3, #56	; 0x38
 8008b7c:	4921      	ldr	r1, [pc, #132]	; (8008c04 <sync_fs+0xd8>)
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7ff fd4c 	bl	800861c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3338      	adds	r3, #56	; 0x38
 8008b88:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008b8c:	491e      	ldr	r1, [pc, #120]	; (8008c08 <sync_fs+0xdc>)
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff fd44 	bl	800861c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3338      	adds	r3, #56	; 0x38
 8008b98:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	f7ff fd3a 	bl	800861c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3338      	adds	r3, #56	; 0x38
 8008bac:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	695b      	ldr	r3, [r3, #20]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	f7ff fd30 	bl	800861c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	7858      	ldrb	r0, [r3, #1]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	f7ff fc8d 	bl	80084f4 <disk_write>
			fs->fsi_flag = 0;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	785b      	ldrb	r3, [r3, #1]
 8008be4:	2200      	movs	r2, #0
 8008be6:	2100      	movs	r1, #0
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7ff fca3 	bl	8008534 <disk_ioctl>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <sync_fs+0xcc>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	41615252 	.word	0x41615252
 8008c08:	61417272 	.word	0x61417272

08008c0c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	3b02      	subs	r3, #2
 8008c1a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	3b02      	subs	r3, #2
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d301      	bcc.n	8008c2c <clust2sect+0x20>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e008      	b.n	8008c3e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	895b      	ldrh	r3, [r3, #10]
 8008c30:	461a      	mov	r2, r3
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	fb03 f202 	mul.w	r2, r3, r2
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3c:	4413      	add	r3, r2
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b086      	sub	sp, #24
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d904      	bls.n	8008c6a <get_fat+0x20>
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d302      	bcc.n	8008c70 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	617b      	str	r3, [r7, #20]
 8008c6e:	e0b7      	b.n	8008de0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008c70:	f04f 33ff 	mov.w	r3, #4294967295
 8008c74:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d05a      	beq.n	8008d34 <get_fat+0xea>
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d07d      	beq.n	8008d7e <get_fat+0x134>
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	f040 80a2 	bne.w	8008dcc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4413      	add	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	899b      	ldrh	r3, [r3, #12]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ca6:	4413      	add	r3, r2
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6938      	ldr	r0, [r7, #16]
 8008cac:	f7ff ff10 	bl	8008ad0 <move_window>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f040 808d 	bne.w	8008dd2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	60fa      	str	r2, [r7, #12]
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	8992      	ldrh	r2, [r2, #12]
 8008cc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cc6:	fb02 f201 	mul.w	r2, r2, r1
 8008cca:	1a9b      	subs	r3, r3, r2
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008cd4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	899b      	ldrh	r3, [r3, #12]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ce6:	4413      	add	r3, r2
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6938      	ldr	r0, [r7, #16]
 8008cec:	f7ff fef0 	bl	8008ad0 <move_window>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d16f      	bne.n	8008dd6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	899b      	ldrh	r3, [r3, #12]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d02:	fb02 f201 	mul.w	r2, r2, r1
 8008d06:	1a9b      	subs	r3, r3, r2
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	461a      	mov	r2, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <get_fat+0xe0>
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	091b      	lsrs	r3, r3, #4
 8008d28:	e002      	b.n	8008d30 <get_fat+0xe6>
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d30:	617b      	str	r3, [r7, #20]
			break;
 8008d32:	e055      	b.n	8008de0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	899b      	ldrh	r3, [r3, #12]
 8008d3c:	085b      	lsrs	r3, r3, #1
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	4619      	mov	r1, r3
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d48:	4413      	add	r3, r2
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6938      	ldr	r0, [r7, #16]
 8008d4e:	f7ff febf 	bl	8008ad0 <move_window>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d140      	bne.n	8008dda <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	8992      	ldrh	r2, [r2, #12]
 8008d66:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d6a:	fb02 f200 	mul.w	r2, r2, r0
 8008d6e:	1a9b      	subs	r3, r3, r2
 8008d70:	440b      	add	r3, r1
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7ff fbfc 	bl	8008570 <ld_word>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	617b      	str	r3, [r7, #20]
			break;
 8008d7c:	e030      	b.n	8008de0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	899b      	ldrh	r3, [r3, #12]
 8008d86:	089b      	lsrs	r3, r3, #2
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d92:	4413      	add	r3, r2
 8008d94:	4619      	mov	r1, r3
 8008d96:	6938      	ldr	r0, [r7, #16]
 8008d98:	f7ff fe9a 	bl	8008ad0 <move_window>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d11d      	bne.n	8008dde <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	8992      	ldrh	r2, [r2, #12]
 8008db0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008db4:	fb02 f200 	mul.w	r2, r2, r0
 8008db8:	1a9b      	subs	r3, r3, r2
 8008dba:	440b      	add	r3, r1
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff fbef 	bl	80085a0 <ld_dword>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008dc8:	617b      	str	r3, [r7, #20]
			break;
 8008dca:	e009      	b.n	8008de0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008dcc:	2301      	movs	r3, #1
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	e006      	b.n	8008de0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008dd2:	bf00      	nop
 8008dd4:	e004      	b.n	8008de0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008dd6:	bf00      	nop
 8008dd8:	e002      	b.n	8008de0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008dda:	bf00      	nop
 8008ddc:	e000      	b.n	8008de0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008dde:	bf00      	nop
		}
	}

	return val;
 8008de0:	697b      	ldr	r3, [r7, #20]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008dea:	b590      	push	{r4, r7, lr}
 8008dec:	b089      	sub	sp, #36	; 0x24
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008df6:	2302      	movs	r3, #2
 8008df8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	f240 8106 	bls.w	800900e <put_fat+0x224>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	f080 8100 	bcs.w	800900e <put_fat+0x224>
		switch (fs->fs_type) {
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	f000 8088 	beq.w	8008f28 <put_fat+0x13e>
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	f000 80b0 	beq.w	8008f7e <put_fat+0x194>
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	f040 80f5 	bne.w	800900e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	61bb      	str	r3, [r7, #24]
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	085b      	lsrs	r3, r3, #1
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	4413      	add	r3, r2
 8008e30:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	899b      	ldrh	r3, [r3, #12]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e42:	4413      	add	r3, r2
 8008e44:	4619      	mov	r1, r3
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f7ff fe42 	bl	8008ad0 <move_window>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e50:	7ffb      	ldrb	r3, [r7, #31]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f040 80d4 	bne.w	8009000 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	61ba      	str	r2, [r7, #24]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	8992      	ldrh	r2, [r2, #12]
 8008e68:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e6c:	fb02 f200 	mul.w	r2, r2, r0
 8008e70:	1a9b      	subs	r3, r3, r2
 8008e72:	440b      	add	r3, r1
 8008e74:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00d      	beq.n	8008e9c <put_fat+0xb2>
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	b25b      	sxtb	r3, r3
 8008e86:	f003 030f 	and.w	r3, r3, #15
 8008e8a:	b25a      	sxtb	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	011b      	lsls	r3, r3, #4
 8008e92:	b25b      	sxtb	r3, r3
 8008e94:	4313      	orrs	r3, r2
 8008e96:	b25b      	sxtb	r3, r3
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	e001      	b.n	8008ea0 <put_fat+0xb6>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	899b      	ldrh	r3, [r3, #12]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008eba:	4413      	add	r3, r2
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f7ff fe06 	bl	8008ad0 <move_window>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ec8:	7ffb      	ldrb	r3, [r7, #31]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f040 809a 	bne.w	8009004 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	899b      	ldrh	r3, [r3, #12]
 8008eda:	461a      	mov	r2, r3
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ee2:	fb02 f200 	mul.w	r2, r2, r0
 8008ee6:	1a9b      	subs	r3, r3, r2
 8008ee8:	440b      	add	r3, r1
 8008eea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <put_fat+0x114>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	091b      	lsrs	r3, r3, #4
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	e00e      	b.n	8008f1c <put_fat+0x132>
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	b25b      	sxtb	r3, r3
 8008f04:	f023 030f 	bic.w	r3, r3, #15
 8008f08:	b25a      	sxtb	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	0a1b      	lsrs	r3, r3, #8
 8008f0e:	b25b      	sxtb	r3, r3
 8008f10:	f003 030f 	and.w	r3, r3, #15
 8008f14:	b25b      	sxtb	r3, r3
 8008f16:	4313      	orrs	r3, r2
 8008f18:	b25b      	sxtb	r3, r3
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2201      	movs	r2, #1
 8008f24:	70da      	strb	r2, [r3, #3]
			break;
 8008f26:	e072      	b.n	800900e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	899b      	ldrh	r3, [r3, #12]
 8008f30:	085b      	lsrs	r3, r3, #1
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	4619      	mov	r1, r3
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f3c:	4413      	add	r3, r2
 8008f3e:	4619      	mov	r1, r3
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f7ff fdc5 	bl	8008ad0 <move_window>
 8008f46:	4603      	mov	r3, r0
 8008f48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f4a:	7ffb      	ldrb	r3, [r7, #31]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d15b      	bne.n	8009008 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	005b      	lsls	r3, r3, #1
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	8992      	ldrh	r2, [r2, #12]
 8008f5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f62:	fb02 f200 	mul.w	r2, r2, r0
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	440b      	add	r3, r1
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	b292      	uxth	r2, r2
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7ff fb38 	bl	80085e6 <st_word>
			fs->wflag = 1;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	70da      	strb	r2, [r3, #3]
			break;
 8008f7c:	e047      	b.n	800900e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	899b      	ldrh	r3, [r3, #12]
 8008f86:	089b      	lsrs	r3, r3, #2
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f92:	4413      	add	r3, r2
 8008f94:	4619      	mov	r1, r3
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff fd9a 	bl	8008ad0 <move_window>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fa0:	7ffb      	ldrb	r3, [r7, #31]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d132      	bne.n	800900c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	8992      	ldrh	r2, [r2, #12]
 8008fba:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fbe:	fb02 f200 	mul.w	r2, r2, r0
 8008fc2:	1a9b      	subs	r3, r3, r2
 8008fc4:	440b      	add	r3, r1
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7ff faea 	bl	80085a0 <ld_dword>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008fd2:	4323      	orrs	r3, r4
 8008fd4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	8992      	ldrh	r2, [r2, #12]
 8008fe4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fe8:	fb02 f200 	mul.w	r2, r2, r0
 8008fec:	1a9b      	subs	r3, r3, r2
 8008fee:	440b      	add	r3, r1
 8008ff0:	6879      	ldr	r1, [r7, #4]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7ff fb12 	bl	800861c <st_dword>
			fs->wflag = 1;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	70da      	strb	r2, [r3, #3]
			break;
 8008ffe:	e006      	b.n	800900e <put_fat+0x224>
			if (res != FR_OK) break;
 8009000:	bf00      	nop
 8009002:	e004      	b.n	800900e <put_fat+0x224>
			if (res != FR_OK) break;
 8009004:	bf00      	nop
 8009006:	e002      	b.n	800900e <put_fat+0x224>
			if (res != FR_OK) break;
 8009008:	bf00      	nop
 800900a:	e000      	b.n	800900e <put_fat+0x224>
			if (res != FR_OK) break;
 800900c:	bf00      	nop
		}
	}
	return res;
 800900e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3724      	adds	r7, #36	; 0x24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd90      	pop	{r4, r7, pc}

08009018 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d904      	bls.n	800903e <remove_chain+0x26>
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	69db      	ldr	r3, [r3, #28]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	429a      	cmp	r2, r3
 800903c:	d301      	bcc.n	8009042 <remove_chain+0x2a>
 800903e:	2302      	movs	r3, #2
 8009040:	e04b      	b.n	80090da <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00c      	beq.n	8009062 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009048:	f04f 32ff 	mov.w	r2, #4294967295
 800904c:	6879      	ldr	r1, [r7, #4]
 800904e:	69b8      	ldr	r0, [r7, #24]
 8009050:	f7ff fecb 	bl	8008dea <put_fat>
 8009054:	4603      	mov	r3, r0
 8009056:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009058:	7ffb      	ldrb	r3, [r7, #31]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <remove_chain+0x4a>
 800905e:	7ffb      	ldrb	r3, [r7, #31]
 8009060:	e03b      	b.n	80090da <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009062:	68b9      	ldr	r1, [r7, #8]
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f7ff fdf0 	bl	8008c4a <get_fat>
 800906a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d031      	beq.n	80090d6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d101      	bne.n	800907c <remove_chain+0x64>
 8009078:	2302      	movs	r3, #2
 800907a:	e02e      	b.n	80090da <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009082:	d101      	bne.n	8009088 <remove_chain+0x70>
 8009084:	2301      	movs	r3, #1
 8009086:	e028      	b.n	80090da <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009088:	2200      	movs	r2, #0
 800908a:	68b9      	ldr	r1, [r7, #8]
 800908c:	69b8      	ldr	r0, [r7, #24]
 800908e:	f7ff feac 	bl	8008dea <put_fat>
 8009092:	4603      	mov	r3, r0
 8009094:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009096:	7ffb      	ldrb	r3, [r7, #31]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <remove_chain+0x88>
 800909c:	7ffb      	ldrb	r3, [r7, #31]
 800909e:	e01c      	b.n	80090da <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	699a      	ldr	r2, [r3, #24]
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	69db      	ldr	r3, [r3, #28]
 80090a8:	3b02      	subs	r3, #2
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d20b      	bcs.n	80090c6 <remove_chain+0xae>
			fs->free_clst++;
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	1c5a      	adds	r2, r3, #1
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	791b      	ldrb	r3, [r3, #4]
 80090bc:	f043 0301 	orr.w	r3, r3, #1
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d3c6      	bcc.n	8009062 <remove_chain+0x4a>
 80090d4:	e000      	b.n	80090d8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80090d6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3720      	adds	r7, #32
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b088      	sub	sp, #32
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10d      	bne.n	8009114 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d004      	beq.n	800910e <create_chain+0x2c>
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	429a      	cmp	r2, r3
 800910c:	d31b      	bcc.n	8009146 <create_chain+0x64>
 800910e:	2301      	movs	r3, #1
 8009110:	61bb      	str	r3, [r7, #24]
 8009112:	e018      	b.n	8009146 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7ff fd97 	bl	8008c4a <get_fat>
 800911c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d801      	bhi.n	8009128 <create_chain+0x46>
 8009124:	2301      	movs	r3, #1
 8009126:	e070      	b.n	800920a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912e:	d101      	bne.n	8009134 <create_chain+0x52>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	e06a      	b.n	800920a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	429a      	cmp	r2, r3
 800913c:	d201      	bcs.n	8009142 <create_chain+0x60>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	e063      	b.n	800920a <create_chain+0x128>
		scl = clst;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	3301      	adds	r3, #1
 800914e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	429a      	cmp	r2, r3
 8009158:	d307      	bcc.n	800916a <create_chain+0x88>
				ncl = 2;
 800915a:	2302      	movs	r3, #2
 800915c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	429a      	cmp	r2, r3
 8009164:	d901      	bls.n	800916a <create_chain+0x88>
 8009166:	2300      	movs	r3, #0
 8009168:	e04f      	b.n	800920a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800916a:	69f9      	ldr	r1, [r7, #28]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff fd6c 	bl	8008c4a <get_fat>
 8009172:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00e      	beq.n	8009198 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d003      	beq.n	8009188 <create_chain+0xa6>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009186:	d101      	bne.n	800918c <create_chain+0xaa>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	e03e      	b.n	800920a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800918c:	69fa      	ldr	r2, [r7, #28]
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	429a      	cmp	r2, r3
 8009192:	d1da      	bne.n	800914a <create_chain+0x68>
 8009194:	2300      	movs	r3, #0
 8009196:	e038      	b.n	800920a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009198:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800919a:	f04f 32ff 	mov.w	r2, #4294967295
 800919e:	69f9      	ldr	r1, [r7, #28]
 80091a0:	6938      	ldr	r0, [r7, #16]
 80091a2:	f7ff fe22 	bl	8008dea <put_fat>
 80091a6:	4603      	mov	r3, r0
 80091a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d109      	bne.n	80091c4 <create_chain+0xe2>
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d006      	beq.n	80091c4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80091b6:	69fa      	ldr	r2, [r7, #28]
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6938      	ldr	r0, [r7, #16]
 80091bc:	f7ff fe15 	bl	8008dea <put_fat>
 80091c0:	4603      	mov	r3, r0
 80091c2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80091c4:	7dfb      	ldrb	r3, [r7, #23]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d116      	bne.n	80091f8 <create_chain+0x116>
		fs->last_clst = ncl;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	69fa      	ldr	r2, [r7, #28]
 80091ce:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	699a      	ldr	r2, [r3, #24]
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	3b02      	subs	r3, #2
 80091da:	429a      	cmp	r2, r3
 80091dc:	d804      	bhi.n	80091e8 <create_chain+0x106>
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	1e5a      	subs	r2, r3, #1
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	791b      	ldrb	r3, [r3, #4]
 80091ec:	f043 0301 	orr.w	r3, r3, #1
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	711a      	strb	r2, [r3, #4]
 80091f6:	e007      	b.n	8009208 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d102      	bne.n	8009204 <create_chain+0x122>
 80091fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009202:	e000      	b.n	8009206 <create_chain+0x124>
 8009204:	2301      	movs	r3, #1
 8009206:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009208:	69fb      	ldr	r3, [r7, #28]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3720      	adds	r7, #32
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009212:	b480      	push	{r7}
 8009214:	b087      	sub	sp, #28
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009226:	3304      	adds	r3, #4
 8009228:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	899b      	ldrh	r3, [r3, #12]
 800922e:	461a      	mov	r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	fbb3 f3f2 	udiv	r3, r3, r2
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	8952      	ldrh	r2, [r2, #10]
 800923a:	fbb3 f3f2 	udiv	r3, r3, r2
 800923e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	1d1a      	adds	r2, r3, #4
 8009244:	613a      	str	r2, [r7, #16]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <clmt_clust+0x42>
 8009250:	2300      	movs	r3, #0
 8009252:	e010      	b.n	8009276 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	429a      	cmp	r2, r3
 800925a:	d307      	bcc.n	800926c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	617b      	str	r3, [r7, #20]
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	3304      	adds	r3, #4
 8009268:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800926a:	e7e9      	b.n	8009240 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800926c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	4413      	add	r3, r2
}
 8009276:	4618      	mov	r0, r3
 8009278:	371c      	adds	r7, #28
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b086      	sub	sp, #24
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009298:	d204      	bcs.n	80092a4 <dir_sdi+0x22>
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	f003 031f 	and.w	r3, r3, #31
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80092a4:	2302      	movs	r3, #2
 80092a6:	e071      	b.n	800938c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d106      	bne.n	80092c8 <dir_sdi+0x46>
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d902      	bls.n	80092c8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10c      	bne.n	80092e8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	095b      	lsrs	r3, r3, #5
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	8912      	ldrh	r2, [r2, #8]
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d301      	bcc.n	80092de <dir_sdi+0x5c>
 80092da:	2302      	movs	r3, #2
 80092dc:	e056      	b.n	800938c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	61da      	str	r2, [r3, #28]
 80092e6:	e02d      	b.n	8009344 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	895b      	ldrh	r3, [r3, #10]
 80092ec:	461a      	mov	r2, r3
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	899b      	ldrh	r3, [r3, #12]
 80092f2:	fb03 f302 	mul.w	r3, r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80092f8:	e019      	b.n	800932e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6979      	ldr	r1, [r7, #20]
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff fca3 	bl	8008c4a <get_fat>
 8009304:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930c:	d101      	bne.n	8009312 <dir_sdi+0x90>
 800930e:	2301      	movs	r3, #1
 8009310:	e03c      	b.n	800938c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d904      	bls.n	8009322 <dir_sdi+0xa0>
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	69db      	ldr	r3, [r3, #28]
 800931c:	697a      	ldr	r2, [r7, #20]
 800931e:	429a      	cmp	r2, r3
 8009320:	d301      	bcc.n	8009326 <dir_sdi+0xa4>
 8009322:	2302      	movs	r3, #2
 8009324:	e032      	b.n	800938c <dir_sdi+0x10a>
			ofs -= csz;
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	429a      	cmp	r2, r3
 8009334:	d2e1      	bcs.n	80092fa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009336:	6979      	ldr	r1, [r7, #20]
 8009338:	6938      	ldr	r0, [r7, #16]
 800933a:	f7ff fc67 	bl	8008c0c <clust2sect>
 800933e:	4602      	mov	r2, r0
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <dir_sdi+0xd4>
 8009352:	2302      	movs	r3, #2
 8009354:	e01a      	b.n	800938c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	69da      	ldr	r2, [r3, #28]
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	899b      	ldrh	r3, [r3, #12]
 800935e:	4619      	mov	r1, r3
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	fbb3 f3f1 	udiv	r3, r3, r1
 8009366:	441a      	add	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	899b      	ldrh	r3, [r3, #12]
 8009376:	461a      	mov	r2, r3
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	fbb3 f0f2 	udiv	r0, r3, r2
 800937e:	fb02 f200 	mul.w	r2, r2, r0
 8009382:	1a9b      	subs	r3, r3, r2
 8009384:	18ca      	adds	r2, r1, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	3320      	adds	r3, #32
 80093aa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <dir_next+0x28>
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093ba:	d301      	bcc.n	80093c0 <dir_next+0x2c>
 80093bc:	2304      	movs	r3, #4
 80093be:	e0bb      	b.n	8009538 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	899b      	ldrh	r3, [r3, #12]
 80093c4:	461a      	mov	r2, r3
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80093cc:	fb02 f201 	mul.w	r2, r2, r1
 80093d0:	1a9b      	subs	r3, r3, r2
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f040 809d 	bne.w	8009512 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	69db      	ldr	r3, [r3, #28]
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10b      	bne.n	8009402 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	095b      	lsrs	r3, r3, #5
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	8912      	ldrh	r2, [r2, #8]
 80093f2:	4293      	cmp	r3, r2
 80093f4:	f0c0 808d 	bcc.w	8009512 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	61da      	str	r2, [r3, #28]
 80093fe:	2304      	movs	r3, #4
 8009400:	e09a      	b.n	8009538 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	899b      	ldrh	r3, [r3, #12]
 8009406:	461a      	mov	r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	fbb3 f3f2 	udiv	r3, r3, r2
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	8952      	ldrh	r2, [r2, #10]
 8009412:	3a01      	subs	r2, #1
 8009414:	4013      	ands	r3, r2
 8009416:	2b00      	cmp	r3, #0
 8009418:	d17b      	bne.n	8009512 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f7ff fc11 	bl	8008c4a <get_fat>
 8009428:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d801      	bhi.n	8009434 <dir_next+0xa0>
 8009430:	2302      	movs	r3, #2
 8009432:	e081      	b.n	8009538 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943a:	d101      	bne.n	8009440 <dir_next+0xac>
 800943c:	2301      	movs	r3, #1
 800943e:	e07b      	b.n	8009538 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	69db      	ldr	r3, [r3, #28]
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	429a      	cmp	r2, r3
 8009448:	d359      	bcc.n	80094fe <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d104      	bne.n	800945a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	61da      	str	r2, [r3, #28]
 8009456:	2304      	movs	r3, #4
 8009458:	e06e      	b.n	8009538 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	4619      	mov	r1, r3
 8009462:	4610      	mov	r0, r2
 8009464:	f7ff fe3d 	bl	80090e2 <create_chain>
 8009468:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d101      	bne.n	8009474 <dir_next+0xe0>
 8009470:	2307      	movs	r3, #7
 8009472:	e061      	b.n	8009538 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d101      	bne.n	800947e <dir_next+0xea>
 800947a:	2302      	movs	r3, #2
 800947c:	e05c      	b.n	8009538 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009484:	d101      	bne.n	800948a <dir_next+0xf6>
 8009486:	2301      	movs	r3, #1
 8009488:	e056      	b.n	8009538 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f7ff fadc 	bl	8008a48 <sync_window>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <dir_next+0x106>
 8009496:	2301      	movs	r3, #1
 8009498:	e04e      	b.n	8009538 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	899b      	ldrh	r3, [r3, #12]
 80094a4:	461a      	mov	r2, r3
 80094a6:	2100      	movs	r1, #0
 80094a8:	f7ff f905 	bl	80086b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80094ac:	2300      	movs	r3, #0
 80094ae:	613b      	str	r3, [r7, #16]
 80094b0:	6979      	ldr	r1, [r7, #20]
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f7ff fbaa 	bl	8008c0c <clust2sect>
 80094b8:	4602      	mov	r2, r0
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	635a      	str	r2, [r3, #52]	; 0x34
 80094be:	e012      	b.n	80094e6 <dir_next+0x152>
						fs->wflag = 1;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2201      	movs	r2, #1
 80094c4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff fabe 	bl	8008a48 <sync_window>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <dir_next+0x142>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e030      	b.n	8009538 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	3301      	adds	r3, #1
 80094da:	613b      	str	r3, [r7, #16]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e0:	1c5a      	adds	r2, r3, #1
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	635a      	str	r2, [r3, #52]	; 0x34
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	895b      	ldrh	r3, [r3, #10]
 80094ea:	461a      	mov	r2, r3
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d3e6      	bcc.n	80094c0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	1ad2      	subs	r2, r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009504:	6979      	ldr	r1, [r7, #20]
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f7ff fb80 	bl	8008c0c <clust2sect>
 800950c:	4602      	mov	r2, r0
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	899b      	ldrh	r3, [r3, #12]
 8009522:	461a      	mov	r2, r3
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	fbb3 f0f2 	udiv	r0, r3, r2
 800952a:	fb02 f200 	mul.w	r2, r2, r0
 800952e:	1a9b      	subs	r3, r3, r2
 8009530:	18ca      	adds	r2, r1, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3718      	adds	r7, #24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009550:	2100      	movs	r1, #0
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f7ff fe95 	bl	8009282 <dir_sdi>
 8009558:	4603      	mov	r3, r0
 800955a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d12b      	bne.n	80095ba <dir_alloc+0x7a>
		n = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	4619      	mov	r1, r3
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f7ff faaf 	bl	8008ad0 <move_window>
 8009572:	4603      	mov	r3, r0
 8009574:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d11d      	bne.n	80095b8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2be5      	cmp	r3, #229	; 0xe5
 8009584:	d004      	beq.n	8009590 <dir_alloc+0x50>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d107      	bne.n	80095a0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	3301      	adds	r3, #1
 8009594:	613b      	str	r3, [r7, #16]
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	429a      	cmp	r2, r3
 800959c:	d102      	bne.n	80095a4 <dir_alloc+0x64>
 800959e:	e00c      	b.n	80095ba <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80095a0:	2300      	movs	r3, #0
 80095a2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80095a4:	2101      	movs	r1, #1
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff fef4 	bl	8009394 <dir_next>
 80095ac:	4603      	mov	r3, r0
 80095ae:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80095b0:	7dfb      	ldrb	r3, [r7, #23]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0d7      	beq.n	8009566 <dir_alloc+0x26>
 80095b6:	e000      	b.n	80095ba <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80095b8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	2b04      	cmp	r3, #4
 80095be:	d101      	bne.n	80095c4 <dir_alloc+0x84>
 80095c0:	2307      	movs	r3, #7
 80095c2:	75fb      	strb	r3, [r7, #23]
	return res;
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3718      	adds	r7, #24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	331a      	adds	r3, #26
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fe ffc7 	bl	8008570 <ld_word>
 80095e2:	4603      	mov	r3, r0
 80095e4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d109      	bne.n	8009602 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	3314      	adds	r3, #20
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe ffbc 	bl	8008570 <ld_word>
 80095f8:	4603      	mov	r3, r0
 80095fa:	041b      	lsls	r3, r3, #16
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009602:	68fb      	ldr	r3, [r7, #12]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	331a      	adds	r3, #26
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	b292      	uxth	r2, r2
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe ffdf 	bl	80085e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b03      	cmp	r3, #3
 800962e:	d109      	bne.n	8009644 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f103 0214 	add.w	r2, r3, #20
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	0c1b      	lsrs	r3, r3, #16
 800963a:	b29b      	uxth	r3, r3
 800963c:	4619      	mov	r1, r3
 800963e:	4610      	mov	r0, r2
 8009640:	f7fe ffd1 	bl	80085e6 <st_word>
	}
}
 8009644:	bf00      	nop
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800964c:	b590      	push	{r4, r7, lr}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	331a      	adds	r3, #26
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe ff88 	bl	8008570 <ld_word>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <cmp_lfn+0x1e>
 8009666:	2300      	movs	r3, #0
 8009668:	e059      	b.n	800971e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009672:	1e5a      	subs	r2, r3, #1
 8009674:	4613      	mov	r3, r2
 8009676:	005b      	lsls	r3, r3, #1
 8009678:	4413      	add	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009680:	2301      	movs	r3, #1
 8009682:	81fb      	strh	r3, [r7, #14]
 8009684:	2300      	movs	r3, #0
 8009686:	613b      	str	r3, [r7, #16]
 8009688:	e033      	b.n	80096f2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800968a:	4a27      	ldr	r2, [pc, #156]	; (8009728 <cmp_lfn+0xdc>)
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	4413      	add	r3, r2
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	4413      	add	r3, r2
 8009698:	4618      	mov	r0, r3
 800969a:	f7fe ff69 	bl	8008570 <ld_word>
 800969e:	4603      	mov	r3, r0
 80096a0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80096a2:	89fb      	ldrh	r3, [r7, #14]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d01a      	beq.n	80096de <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2bfe      	cmp	r3, #254	; 0xfe
 80096ac:	d812      	bhi.n	80096d4 <cmp_lfn+0x88>
 80096ae:	89bb      	ldrh	r3, [r7, #12]
 80096b0:	4618      	mov	r0, r3
 80096b2:	f001 ffc9 	bl	800b648 <ff_wtoupper>
 80096b6:	4603      	mov	r3, r0
 80096b8:	461c      	mov	r4, r3
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	617a      	str	r2, [r7, #20]
 80096c0:	005b      	lsls	r3, r3, #1
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	4413      	add	r3, r2
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f001 ffbd 	bl	800b648 <ff_wtoupper>
 80096ce:	4603      	mov	r3, r0
 80096d0:	429c      	cmp	r4, r3
 80096d2:	d001      	beq.n	80096d8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80096d4:	2300      	movs	r3, #0
 80096d6:	e022      	b.n	800971e <cmp_lfn+0xd2>
			}
			wc = uc;
 80096d8:	89bb      	ldrh	r3, [r7, #12]
 80096da:	81fb      	strh	r3, [r7, #14]
 80096dc:	e006      	b.n	80096ec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80096de:	89bb      	ldrh	r3, [r7, #12]
 80096e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d001      	beq.n	80096ec <cmp_lfn+0xa0>
 80096e8:	2300      	movs	r3, #0
 80096ea:	e018      	b.n	800971e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	3301      	adds	r3, #1
 80096f0:	613b      	str	r3, [r7, #16]
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	2b0c      	cmp	r3, #12
 80096f6:	d9c8      	bls.n	800968a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00b      	beq.n	800971c <cmp_lfn+0xd0>
 8009704:	89fb      	ldrh	r3, [r7, #14]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d008      	beq.n	800971c <cmp_lfn+0xd0>
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	4413      	add	r3, r2
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <cmp_lfn+0xd0>
 8009718:	2300      	movs	r3, #0
 800971a:	e000      	b.n	800971e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800971c:	2301      	movs	r3, #1
}
 800971e:	4618      	mov	r0, r3
 8009720:	371c      	adds	r7, #28
 8009722:	46bd      	mov	sp, r7
 8009724:	bd90      	pop	{r4, r7, pc}
 8009726:	bf00      	nop
 8009728:	0800c290 	.word	0x0800c290

0800972c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b088      	sub	sp, #32
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	4611      	mov	r1, r2
 8009738:	461a      	mov	r2, r3
 800973a:	460b      	mov	r3, r1
 800973c:	71fb      	strb	r3, [r7, #7]
 800973e:	4613      	mov	r3, r2
 8009740:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	330d      	adds	r3, #13
 8009746:	79ba      	ldrb	r2, [r7, #6]
 8009748:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	330b      	adds	r3, #11
 800974e:	220f      	movs	r2, #15
 8009750:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	330c      	adds	r3, #12
 8009756:	2200      	movs	r2, #0
 8009758:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	331a      	adds	r3, #26
 800975e:	2100      	movs	r1, #0
 8009760:	4618      	mov	r0, r3
 8009762:	f7fe ff40 	bl	80085e6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	1e5a      	subs	r2, r3, #1
 800976a:	4613      	mov	r3, r2
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	82fb      	strh	r3, [r7, #22]
 800977a:	2300      	movs	r3, #0
 800977c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800977e:	8afb      	ldrh	r3, [r7, #22]
 8009780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009784:	4293      	cmp	r3, r2
 8009786:	d007      	beq.n	8009798 <put_lfn+0x6c>
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	61fa      	str	r2, [r7, #28]
 800978e:	005b      	lsls	r3, r3, #1
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	4413      	add	r3, r2
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009798:	4a17      	ldr	r2, [pc, #92]	; (80097f8 <put_lfn+0xcc>)
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	4413      	add	r3, r2
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	4413      	add	r3, r2
 80097a6:	8afa      	ldrh	r2, [r7, #22]
 80097a8:	4611      	mov	r1, r2
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fe ff1b 	bl	80085e6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80097b0:	8afb      	ldrh	r3, [r7, #22]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d102      	bne.n	80097bc <put_lfn+0x90>
 80097b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80097ba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	3301      	adds	r3, #1
 80097c0:	61bb      	str	r3, [r7, #24]
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	2b0c      	cmp	r3, #12
 80097c6:	d9da      	bls.n	800977e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80097c8:	8afb      	ldrh	r3, [r7, #22]
 80097ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d006      	beq.n	80097e0 <put_lfn+0xb4>
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	4413      	add	r3, r2
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d103      	bne.n	80097e8 <put_lfn+0xbc>
 80097e0:	79fb      	ldrb	r3, [r7, #7]
 80097e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097e6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	79fa      	ldrb	r2, [r7, #7]
 80097ec:	701a      	strb	r2, [r3, #0]
}
 80097ee:	bf00      	nop
 80097f0:	3720      	adds	r7, #32
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	0800c290 	.word	0x0800c290

080097fc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b08c      	sub	sp, #48	; 0x30
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800980a:	220b      	movs	r2, #11
 800980c:	68b9      	ldr	r1, [r7, #8]
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f7fe ff30 	bl	8008674 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	2b05      	cmp	r3, #5
 8009818:	d92b      	bls.n	8009872 <gen_numname+0x76>
		sr = seq;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800981e:	e022      	b.n	8009866 <gen_numname+0x6a>
			wc = *lfn++;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	1c9a      	adds	r2, r3, #2
 8009824:	607a      	str	r2, [r7, #4]
 8009826:	881b      	ldrh	r3, [r3, #0]
 8009828:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800982a:	2300      	movs	r3, #0
 800982c:	62bb      	str	r3, [r7, #40]	; 0x28
 800982e:	e017      	b.n	8009860 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	005a      	lsls	r2, r3, #1
 8009834:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	4413      	add	r3, r2
 800983c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800983e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009840:	085b      	lsrs	r3, r3, #1
 8009842:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d005      	beq.n	800985a <gen_numname+0x5e>
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009854:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009858:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985c:	3301      	adds	r3, #1
 800985e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	2b0f      	cmp	r3, #15
 8009864:	d9e4      	bls.n	8009830 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1d8      	bne.n	8009820 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009872:	2307      	movs	r3, #7
 8009874:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	b2db      	uxtb	r3, r3
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	b2db      	uxtb	r3, r3
 8009880:	3330      	adds	r3, #48	; 0x30
 8009882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800988a:	2b39      	cmp	r3, #57	; 0x39
 800988c:	d904      	bls.n	8009898 <gen_numname+0x9c>
 800988e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009892:	3307      	adds	r3, #7
 8009894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	1e5a      	subs	r2, r3, #1
 800989c:	62ba      	str	r2, [r7, #40]	; 0x28
 800989e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80098a2:	4413      	add	r3, r2
 80098a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80098a8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	091b      	lsrs	r3, r3, #4
 80098b0:	603b      	str	r3, [r7, #0]
	} while (seq);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1de      	bne.n	8009876 <gen_numname+0x7a>
	ns[i] = '~';
 80098b8:	f107 0214 	add.w	r2, r7, #20
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	4413      	add	r3, r2
 80098c0:	227e      	movs	r2, #126	; 0x7e
 80098c2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80098c4:	2300      	movs	r3, #0
 80098c6:	627b      	str	r3, [r7, #36]	; 0x24
 80098c8:	e002      	b.n	80098d0 <gen_numname+0xd4>
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	3301      	adds	r3, #1
 80098ce:	627b      	str	r3, [r7, #36]	; 0x24
 80098d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d205      	bcs.n	80098e4 <gen_numname+0xe8>
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	4413      	add	r3, r2
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b20      	cmp	r3, #32
 80098e2:	d1f2      	bne.n	80098ca <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	2b07      	cmp	r3, #7
 80098e8:	d808      	bhi.n	80098fc <gen_numname+0x100>
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	1c5a      	adds	r2, r3, #1
 80098ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80098f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80098f4:	4413      	add	r3, r2
 80098f6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80098fa:	e000      	b.n	80098fe <gen_numname+0x102>
 80098fc:	2120      	movs	r1, #32
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	627a      	str	r2, [r7, #36]	; 0x24
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	4413      	add	r3, r2
 8009908:	460a      	mov	r2, r1
 800990a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	2b07      	cmp	r3, #7
 8009910:	d9e8      	bls.n	80098e4 <gen_numname+0xe8>
}
 8009912:	bf00      	nop
 8009914:	3730      	adds	r7, #48	; 0x30
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800991a:	b480      	push	{r7}
 800991c:	b085      	sub	sp, #20
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009926:	230b      	movs	r3, #11
 8009928:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	b2da      	uxtb	r2, r3
 800992e:	0852      	lsrs	r2, r2, #1
 8009930:	01db      	lsls	r3, r3, #7
 8009932:	4313      	orrs	r3, r2
 8009934:	b2da      	uxtb	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	1c59      	adds	r1, r3, #1
 800993a:	6079      	str	r1, [r7, #4]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	4413      	add	r3, r2
 8009940:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	3b01      	subs	r3, #1
 8009946:	60bb      	str	r3, [r7, #8]
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1ed      	bne.n	800992a <sum_sfn+0x10>
	return sum;
 800994e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800996a:	2100      	movs	r1, #0
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7ff fc88 	bl	8009282 <dir_sdi>
 8009972:	4603      	mov	r3, r0
 8009974:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <dir_find+0x24>
 800997c:	7dfb      	ldrb	r3, [r7, #23]
 800997e:	e0a9      	b.n	8009ad4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009980:	23ff      	movs	r3, #255	; 0xff
 8009982:	753b      	strb	r3, [r7, #20]
 8009984:	7d3b      	ldrb	r3, [r7, #20]
 8009986:	757b      	strb	r3, [r7, #21]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f04f 32ff 	mov.w	r2, #4294967295
 800998e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	4619      	mov	r1, r3
 8009996:	6938      	ldr	r0, [r7, #16]
 8009998:	f7ff f89a 	bl	8008ad0 <move_window>
 800999c:	4603      	mov	r3, r0
 800999e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f040 8090 	bne.w	8009ac8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a1b      	ldr	r3, [r3, #32]
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80099b0:	7dbb      	ldrb	r3, [r7, #22]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d102      	bne.n	80099bc <dir_find+0x60>
 80099b6:	2304      	movs	r3, #4
 80099b8:	75fb      	strb	r3, [r7, #23]
 80099ba:	e08a      	b.n	8009ad2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	330b      	adds	r3, #11
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099c8:	73fb      	strb	r3, [r7, #15]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	7bfa      	ldrb	r2, [r7, #15]
 80099ce:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80099d0:	7dbb      	ldrb	r3, [r7, #22]
 80099d2:	2be5      	cmp	r3, #229	; 0xe5
 80099d4:	d007      	beq.n	80099e6 <dir_find+0x8a>
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
 80099d8:	f003 0308 	and.w	r3, r3, #8
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d009      	beq.n	80099f4 <dir_find+0x98>
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	2b0f      	cmp	r3, #15
 80099e4:	d006      	beq.n	80099f4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80099e6:	23ff      	movs	r3, #255	; 0xff
 80099e8:	757b      	strb	r3, [r7, #21]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f04f 32ff 	mov.w	r2, #4294967295
 80099f0:	631a      	str	r2, [r3, #48]	; 0x30
 80099f2:	e05e      	b.n	8009ab2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	2b0f      	cmp	r3, #15
 80099f8:	d136      	bne.n	8009a68 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d154      	bne.n	8009ab2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009a08:	7dbb      	ldrb	r3, [r7, #22]
 8009a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00d      	beq.n	8009a2e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	7b5b      	ldrb	r3, [r3, #13]
 8009a18:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009a1a:	7dbb      	ldrb	r3, [r7, #22]
 8009a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a20:	75bb      	strb	r3, [r7, #22]
 8009a22:	7dbb      	ldrb	r3, [r7, #22]
 8009a24:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	695a      	ldr	r2, [r3, #20]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009a2e:	7dba      	ldrb	r2, [r7, #22]
 8009a30:	7d7b      	ldrb	r3, [r7, #21]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d115      	bne.n	8009a62 <dir_find+0x106>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	330d      	adds	r3, #13
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	7d3a      	ldrb	r2, [r7, #20]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d10e      	bne.n	8009a62 <dir_find+0x106>
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	691a      	ldr	r2, [r3, #16]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a1b      	ldr	r3, [r3, #32]
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	4610      	mov	r0, r2
 8009a50:	f7ff fdfc 	bl	800964c <cmp_lfn>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <dir_find+0x106>
 8009a5a:	7d7b      	ldrb	r3, [r7, #21]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	e000      	b.n	8009a64 <dir_find+0x108>
 8009a62:	23ff      	movs	r3, #255	; 0xff
 8009a64:	757b      	strb	r3, [r7, #21]
 8009a66:	e024      	b.n	8009ab2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009a68:	7d7b      	ldrb	r3, [r7, #21]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d109      	bne.n	8009a82 <dir_find+0x126>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7ff ff51 	bl	800991a <sum_sfn>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	7d3b      	ldrb	r3, [r7, #20]
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d024      	beq.n	8009acc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10a      	bne.n	8009aa6 <dir_find+0x14a>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a18      	ldr	r0, [r3, #32]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3324      	adds	r3, #36	; 0x24
 8009a98:	220b      	movs	r2, #11
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	f7fe fe25 	bl	80086ea <mem_cmp>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d014      	beq.n	8009ad0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009aa6:	23ff      	movs	r3, #255	; 0xff
 8009aa8:	757b      	strb	r3, [r7, #21]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7ff fc6d 	bl	8009394 <dir_next>
 8009aba:	4603      	mov	r3, r0
 8009abc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009abe:	7dfb      	ldrb	r3, [r7, #23]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f43f af65 	beq.w	8009990 <dir_find+0x34>
 8009ac6:	e004      	b.n	8009ad2 <dir_find+0x176>
		if (res != FR_OK) break;
 8009ac8:	bf00      	nop
 8009aca:	e002      	b.n	8009ad2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009acc:	bf00      	nop
 8009ace:	e000      	b.n	8009ad2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009ad0:	bf00      	nop

	return res;
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08c      	sub	sp, #48	; 0x30
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009af0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <dir_register+0x20>
 8009af8:	2306      	movs	r3, #6
 8009afa:	e0e0      	b.n	8009cbe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009afc:	2300      	movs	r3, #0
 8009afe:	627b      	str	r3, [r7, #36]	; 0x24
 8009b00:	e002      	b.n	8009b08 <dir_register+0x2c>
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	3301      	adds	r3, #1
 8009b06:	627b      	str	r3, [r7, #36]	; 0x24
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	691a      	ldr	r2, [r3, #16]
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	005b      	lsls	r3, r3, #1
 8009b10:	4413      	add	r3, r2
 8009b12:	881b      	ldrh	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1f4      	bne.n	8009b02 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009b1e:	f107 030c 	add.w	r3, r7, #12
 8009b22:	220c      	movs	r2, #12
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe fda5 	bl	8008674 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
 8009b2c:	f003 0301 	and.w	r3, r3, #1
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d032      	beq.n	8009b9a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2240      	movs	r2, #64	; 0x40
 8009b38:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b40:	e016      	b.n	8009b70 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	691a      	ldr	r2, [r3, #16]
 8009b4c:	f107 010c 	add.w	r1, r7, #12
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	f7ff fe53 	bl	80097fc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7ff ff00 	bl	800995c <dir_find>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d106      	bne.n	8009b78 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	2b63      	cmp	r3, #99	; 0x63
 8009b74:	d9e5      	bls.n	8009b42 <dir_register+0x66>
 8009b76:	e000      	b.n	8009b7a <dir_register+0x9e>
			if (res != FR_OK) break;
 8009b78:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7c:	2b64      	cmp	r3, #100	; 0x64
 8009b7e:	d101      	bne.n	8009b84 <dir_register+0xa8>
 8009b80:	2307      	movs	r3, #7
 8009b82:	e09c      	b.n	8009cbe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009b84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	d002      	beq.n	8009b92 <dir_register+0xb6>
 8009b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b90:	e095      	b.n	8009cbe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009b92:	7dfa      	ldrb	r2, [r7, #23]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009b9a:	7dfb      	ldrb	r3, [r7, #23]
 8009b9c:	f003 0302 	and.w	r3, r3, #2
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d007      	beq.n	8009bb4 <dir_register+0xd8>
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	330c      	adds	r3, #12
 8009ba8:	4a47      	ldr	r2, [pc, #284]	; (8009cc8 <dir_register+0x1ec>)
 8009baa:	fba2 2303 	umull	r2, r3, r2, r3
 8009bae:	089b      	lsrs	r3, r3, #2
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	e000      	b.n	8009bb6 <dir_register+0xda>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009bb8:	6a39      	ldr	r1, [r7, #32]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff fcc0 	bl	8009540 <dir_alloc>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d148      	bne.n	8009c60 <dir_register+0x184>
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	623b      	str	r3, [r7, #32]
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d042      	beq.n	8009c60 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	695a      	ldr	r2, [r3, #20]
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	015b      	lsls	r3, r3, #5
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7ff fb4b 	bl	8009282 <dir_sdi>
 8009bec:	4603      	mov	r3, r0
 8009bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d132      	bne.n	8009c60 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3324      	adds	r3, #36	; 0x24
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7ff fe8b 	bl	800991a <sum_sfn>
 8009c04:	4603      	mov	r3, r0
 8009c06:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	69f8      	ldr	r0, [r7, #28]
 8009c10:	f7fe ff5e 	bl	8008ad0 <move_window>
 8009c14:	4603      	mov	r3, r0
 8009c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d11d      	bne.n	8009c5e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	6918      	ldr	r0, [r3, #16]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a19      	ldr	r1, [r3, #32]
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	7efb      	ldrb	r3, [r7, #27]
 8009c30:	f7ff fd7c 	bl	800972c <put_lfn>
				fs->wflag = 1;
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	2201      	movs	r2, #1
 8009c38:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7ff fba9 	bl	8009394 <dir_next>
 8009c42:	4603      	mov	r3, r0
 8009c44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009c48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d107      	bne.n	8009c60 <dir_register+0x184>
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	623b      	str	r3, [r7, #32]
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1d5      	bne.n	8009c08 <dir_register+0x12c>
 8009c5c:	e000      	b.n	8009c60 <dir_register+0x184>
				if (res != FR_OK) break;
 8009c5e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009c60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d128      	bne.n	8009cba <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	69f8      	ldr	r0, [r7, #28]
 8009c70:	f7fe ff2e 	bl	8008ad0 <move_window>
 8009c74:	4603      	mov	r3, r0
 8009c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d11b      	bne.n	8009cba <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	2220      	movs	r2, #32
 8009c88:	2100      	movs	r1, #0
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fe fd13 	bl	80086b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a18      	ldr	r0, [r3, #32]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3324      	adds	r3, #36	; 0x24
 8009c98:	220b      	movs	r2, #11
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	f7fe fcea 	bl	8008674 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	330c      	adds	r3, #12
 8009cac:	f002 0218 	and.w	r2, r2, #24
 8009cb0:	b2d2      	uxtb	r2, r2
 8009cb2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009cba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3730      	adds	r7, #48	; 0x30
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	4ec4ec4f 	.word	0x4ec4ec4f

08009ccc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b08a      	sub	sp, #40	; 0x28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	613b      	str	r3, [r7, #16]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	60fb      	str	r3, [r7, #12]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	61ba      	str	r2, [r7, #24]
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cfc:	2b1f      	cmp	r3, #31
 8009cfe:	d940      	bls.n	8009d82 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009d00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d02:	2b2f      	cmp	r3, #47	; 0x2f
 8009d04:	d006      	beq.n	8009d14 <create_name+0x48>
 8009d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d08:	2b5c      	cmp	r3, #92	; 0x5c
 8009d0a:	d110      	bne.n	8009d2e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009d0c:	e002      	b.n	8009d14 <create_name+0x48>
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	3301      	adds	r3, #1
 8009d12:	61bb      	str	r3, [r7, #24]
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	4413      	add	r3, r2
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b2f      	cmp	r3, #47	; 0x2f
 8009d1e:	d0f6      	beq.n	8009d0e <create_name+0x42>
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	4413      	add	r3, r2
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	2b5c      	cmp	r3, #92	; 0x5c
 8009d2a:	d0f0      	beq.n	8009d0e <create_name+0x42>
			break;
 8009d2c:	e02a      	b.n	8009d84 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2bfe      	cmp	r3, #254	; 0xfe
 8009d32:	d901      	bls.n	8009d38 <create_name+0x6c>
 8009d34:	2306      	movs	r3, #6
 8009d36:	e177      	b.n	800a028 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009d3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d40:	2101      	movs	r1, #1
 8009d42:	4618      	mov	r0, r3
 8009d44:	f001 fc44 	bl	800b5d0 <ff_convert>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009d4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <create_name+0x8a>
 8009d52:	2306      	movs	r3, #6
 8009d54:	e168      	b.n	800a028 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009d56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d58:	2b7f      	cmp	r3, #127	; 0x7f
 8009d5a:	d809      	bhi.n	8009d70 <create_name+0xa4>
 8009d5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d5e:	4619      	mov	r1, r3
 8009d60:	48b3      	ldr	r0, [pc, #716]	; (800a030 <create_name+0x364>)
 8009d62:	f7fe fce9 	bl	8008738 <chk_chr>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <create_name+0xa4>
 8009d6c:	2306      	movs	r3, #6
 8009d6e:	e15b      	b.n	800a028 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	617a      	str	r2, [r7, #20]
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d7e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009d80:	e7b4      	b.n	8009cec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009d82:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	441a      	add	r2, r3
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d90:	2b1f      	cmp	r3, #31
 8009d92:	d801      	bhi.n	8009d98 <create_name+0xcc>
 8009d94:	2304      	movs	r3, #4
 8009d96:	e000      	b.n	8009d9a <create_name+0xce>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009d9e:	e011      	b.n	8009dc4 <create_name+0xf8>
		w = lfn[di - 1];
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009da6:	3b01      	subs	r3, #1
 8009da8:	005b      	lsls	r3, r3, #1
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	4413      	add	r3, r2
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009db4:	2b20      	cmp	r3, #32
 8009db6:	d002      	beq.n	8009dbe <create_name+0xf2>
 8009db8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dba:	2b2e      	cmp	r3, #46	; 0x2e
 8009dbc:	d106      	bne.n	8009dcc <create_name+0x100>
		di--;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1ea      	bne.n	8009da0 <create_name+0xd4>
 8009dca:	e000      	b.n	8009dce <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009dcc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	005b      	lsls	r3, r3, #1
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d101      	bne.n	8009de4 <create_name+0x118>
 8009de0:	2306      	movs	r3, #6
 8009de2:	e121      	b.n	800a028 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	3324      	adds	r3, #36	; 0x24
 8009de8:	220b      	movs	r2, #11
 8009dea:	2120      	movs	r1, #32
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fe fc62 	bl	80086b6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009df2:	2300      	movs	r3, #0
 8009df4:	61bb      	str	r3, [r7, #24]
 8009df6:	e002      	b.n	8009dfe <create_name+0x132>
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	61bb      	str	r3, [r7, #24]
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	005b      	lsls	r3, r3, #1
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4413      	add	r3, r2
 8009e06:	881b      	ldrh	r3, [r3, #0]
 8009e08:	2b20      	cmp	r3, #32
 8009e0a:	d0f5      	beq.n	8009df8 <create_name+0x12c>
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	005b      	lsls	r3, r3, #1
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	4413      	add	r3, r2
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	2b2e      	cmp	r3, #46	; 0x2e
 8009e18:	d0ee      	beq.n	8009df8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d009      	beq.n	8009e34 <create_name+0x168>
 8009e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e24:	f043 0303 	orr.w	r3, r3, #3
 8009e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009e2c:	e002      	b.n	8009e34 <create_name+0x168>
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	3b01      	subs	r3, #1
 8009e32:	617b      	str	r3, [r7, #20]
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d009      	beq.n	8009e4e <create_name+0x182>
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e40:	3b01      	subs	r3, #1
 8009e42:	005b      	lsls	r3, r3, #1
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	4413      	add	r3, r2
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e4c:	d1ef      	bne.n	8009e2e <create_name+0x162>

	i = b = 0; ni = 8;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e54:	2300      	movs	r3, #0
 8009e56:	623b      	str	r3, [r7, #32]
 8009e58:	2308      	movs	r3, #8
 8009e5a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	1c5a      	adds	r2, r3, #1
 8009e60:	61ba      	str	r2, [r7, #24]
 8009e62:	005b      	lsls	r3, r3, #1
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	4413      	add	r3, r2
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009e6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f000 8090 	beq.w	8009f94 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009e74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e76:	2b20      	cmp	r3, #32
 8009e78:	d006      	beq.n	8009e88 <create_name+0x1bc>
 8009e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e7e:	d10a      	bne.n	8009e96 <create_name+0x1ca>
 8009e80:	69ba      	ldr	r2, [r7, #24]
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d006      	beq.n	8009e96 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e8c:	f043 0303 	orr.w	r3, r3, #3
 8009e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e94:	e07d      	b.n	8009f92 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009e96:	6a3a      	ldr	r2, [r7, #32]
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d203      	bcs.n	8009ea6 <create_name+0x1da>
 8009e9e:	69ba      	ldr	r2, [r7, #24]
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d123      	bne.n	8009eee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	2b0b      	cmp	r3, #11
 8009eaa:	d106      	bne.n	8009eba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eb0:	f043 0303 	orr.w	r3, r3, #3
 8009eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009eb8:	e06f      	b.n	8009f9a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009eba:	69ba      	ldr	r2, [r7, #24]
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d005      	beq.n	8009ece <create_name+0x202>
 8009ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ec6:	f043 0303 	orr.w	r3, r3, #3
 8009eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009ece:	69ba      	ldr	r2, [r7, #24]
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d860      	bhi.n	8009f98 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	61bb      	str	r3, [r7, #24]
 8009eda:	2308      	movs	r3, #8
 8009edc:	623b      	str	r3, [r7, #32]
 8009ede:	230b      	movs	r3, #11
 8009ee0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009ee2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009eec:	e051      	b.n	8009f92 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009eee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8009ef2:	d914      	bls.n	8009f1e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009ef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f001 fb69 	bl	800b5d0 <ff_convert>
 8009efe:	4603      	mov	r3, r0
 8009f00:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009f02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d004      	beq.n	8009f12 <create_name+0x246>
 8009f08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f0a:	3b80      	subs	r3, #128	; 0x80
 8009f0c:	4a49      	ldr	r2, [pc, #292]	; (800a034 <create_name+0x368>)
 8009f0e:	5cd3      	ldrb	r3, [r2, r3]
 8009f10:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f16:	f043 0302 	orr.w	r3, r3, #2
 8009f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009f1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d007      	beq.n	8009f34 <create_name+0x268>
 8009f24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f26:	4619      	mov	r1, r3
 8009f28:	4843      	ldr	r0, [pc, #268]	; (800a038 <create_name+0x36c>)
 8009f2a:	f7fe fc05 	bl	8008738 <chk_chr>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d008      	beq.n	8009f46 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009f34:	235f      	movs	r3, #95	; 0x5f
 8009f36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f3c:	f043 0303 	orr.w	r3, r3, #3
 8009f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f44:	e01b      	b.n	8009f7e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f48:	2b40      	cmp	r3, #64	; 0x40
 8009f4a:	d909      	bls.n	8009f60 <create_name+0x294>
 8009f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f4e:	2b5a      	cmp	r3, #90	; 0x5a
 8009f50:	d806      	bhi.n	8009f60 <create_name+0x294>
					b |= 2;
 8009f52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f56:	f043 0302 	orr.w	r3, r3, #2
 8009f5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f5e:	e00e      	b.n	8009f7e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f62:	2b60      	cmp	r3, #96	; 0x60
 8009f64:	d90b      	bls.n	8009f7e <create_name+0x2b2>
 8009f66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f68:	2b7a      	cmp	r3, #122	; 0x7a
 8009f6a:	d808      	bhi.n	8009f7e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009f6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f70:	f043 0301 	orr.w	r3, r3, #1
 8009f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009f78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f7a:	3b20      	subs	r3, #32
 8009f7c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	1c5a      	adds	r2, r3, #1
 8009f82:	623a      	str	r2, [r7, #32]
 8009f84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f86:	b2d1      	uxtb	r1, r2
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	460a      	mov	r2, r1
 8009f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009f92:	e763      	b.n	8009e5c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009f94:	bf00      	nop
 8009f96:	e000      	b.n	8009f9a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009f98:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fa0:	2be5      	cmp	r3, #229	; 0xe5
 8009fa2:	d103      	bne.n	8009fac <create_name+0x2e0>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2205      	movs	r2, #5
 8009fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	2b08      	cmp	r3, #8
 8009fb0:	d104      	bne.n	8009fbc <create_name+0x2f0>
 8009fb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009fbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fc0:	f003 030c 	and.w	r3, r3, #12
 8009fc4:	2b0c      	cmp	r3, #12
 8009fc6:	d005      	beq.n	8009fd4 <create_name+0x308>
 8009fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fcc:	f003 0303 	and.w	r3, r3, #3
 8009fd0:	2b03      	cmp	r3, #3
 8009fd2:	d105      	bne.n	8009fe0 <create_name+0x314>
 8009fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fd8:	f043 0302 	orr.w	r3, r3, #2
 8009fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d117      	bne.n	800a01c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009fec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ff0:	f003 0303 	and.w	r3, r3, #3
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d105      	bne.n	800a004 <create_name+0x338>
 8009ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ffc:	f043 0310 	orr.w	r3, r3, #16
 800a000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a004:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a008:	f003 030c 	and.w	r3, r3, #12
 800a00c:	2b04      	cmp	r3, #4
 800a00e:	d105      	bne.n	800a01c <create_name+0x350>
 800a010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a014:	f043 0308 	orr.w	r3, r3, #8
 800a018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a022:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a026:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3728      	adds	r7, #40	; 0x28
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	0800c1a8 	.word	0x0800c1a8
 800a034:	0800c210 	.word	0x0800c210
 800a038:	0800c1b4 	.word	0x0800c1b4

0800a03c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a050:	e002      	b.n	800a058 <follow_path+0x1c>
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	3301      	adds	r3, #1
 800a056:	603b      	str	r3, [r7, #0]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b2f      	cmp	r3, #47	; 0x2f
 800a05e:	d0f8      	beq.n	800a052 <follow_path+0x16>
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b5c      	cmp	r3, #92	; 0x5c
 800a066:	d0f4      	beq.n	800a052 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	2200      	movs	r2, #0
 800a06c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	2b1f      	cmp	r3, #31
 800a074:	d80a      	bhi.n	800a08c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2280      	movs	r2, #128	; 0x80
 800a07a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a07e:	2100      	movs	r1, #0
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7ff f8fe 	bl	8009282 <dir_sdi>
 800a086:	4603      	mov	r3, r0
 800a088:	75fb      	strb	r3, [r7, #23]
 800a08a:	e048      	b.n	800a11e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a08c:	463b      	mov	r3, r7
 800a08e:	4619      	mov	r1, r3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7ff fe1b 	bl	8009ccc <create_name>
 800a096:	4603      	mov	r3, r0
 800a098:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d139      	bne.n	800a114 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7ff fc5b 	bl	800995c <dir_find>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a0b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a0b2:	7dfb      	ldrb	r3, [r7, #23]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00a      	beq.n	800a0ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	2b04      	cmp	r3, #4
 800a0bc:	d12c      	bne.n	800a118 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a0be:	7afb      	ldrb	r3, [r7, #11]
 800a0c0:	f003 0304 	and.w	r3, r3, #4
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d127      	bne.n	800a118 <follow_path+0xdc>
 800a0c8:	2305      	movs	r3, #5
 800a0ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a0cc:	e024      	b.n	800a118 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a0ce:	7afb      	ldrb	r3, [r7, #11]
 800a0d0:	f003 0304 	and.w	r3, r3, #4
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d121      	bne.n	800a11c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	799b      	ldrb	r3, [r3, #6]
 800a0dc:	f003 0310 	and.w	r3, r3, #16
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d102      	bne.n	800a0ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a0e4:	2305      	movs	r3, #5
 800a0e6:	75fb      	strb	r3, [r7, #23]
 800a0e8:	e019      	b.n	800a11e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	695b      	ldr	r3, [r3, #20]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	8992      	ldrh	r2, [r2, #12]
 800a0f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a0fc:	fb02 f200 	mul.w	r2, r2, r0
 800a100:	1a9b      	subs	r3, r3, r2
 800a102:	440b      	add	r3, r1
 800a104:	4619      	mov	r1, r3
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff fa61 	bl	80095ce <ld_clust>
 800a10c:	4602      	mov	r2, r0
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a112:	e7bb      	b.n	800a08c <follow_path+0x50>
			if (res != FR_OK) break;
 800a114:	bf00      	nop
 800a116:	e002      	b.n	800a11e <follow_path+0xe2>
				break;
 800a118:	bf00      	nop
 800a11a:	e000      	b.n	800a11e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a11c:	bf00      	nop
			}
		}
	}

	return res;
 800a11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a128:	b480      	push	{r7}
 800a12a:	b087      	sub	sp, #28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a130:	f04f 33ff 	mov.w	r3, #4294967295
 800a134:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d031      	beq.n	800a1a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	617b      	str	r3, [r7, #20]
 800a144:	e002      	b.n	800a14c <get_ldnumber+0x24>
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	3301      	adds	r3, #1
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2b1f      	cmp	r3, #31
 800a152:	d903      	bls.n	800a15c <get_ldnumber+0x34>
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	2b3a      	cmp	r3, #58	; 0x3a
 800a15a:	d1f4      	bne.n	800a146 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b3a      	cmp	r3, #58	; 0x3a
 800a162:	d11c      	bne.n	800a19e <get_ldnumber+0x76>
			tp = *path;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	60fa      	str	r2, [r7, #12]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	3b30      	subs	r3, #48	; 0x30
 800a174:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2b09      	cmp	r3, #9
 800a17a:	d80e      	bhi.n	800a19a <get_ldnumber+0x72>
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	429a      	cmp	r2, r3
 800a182:	d10a      	bne.n	800a19a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d107      	bne.n	800a19a <get_ldnumber+0x72>
					vol = (int)i;
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	3301      	adds	r3, #1
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	697a      	ldr	r2, [r7, #20]
 800a198:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	e002      	b.n	800a1a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a19e:	2300      	movs	r3, #0
 800a1a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a1a2:	693b      	ldr	r3, [r7, #16]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	371c      	adds	r7, #28
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	70da      	strb	r2, [r3, #3]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7fe fc80 	bl	8008ad0 <move_window>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <check_fs+0x2a>
 800a1d6:	2304      	movs	r3, #4
 800a1d8:	e038      	b.n	800a24c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3338      	adds	r3, #56	; 0x38
 800a1de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe f9c4 	bl	8008570 <ld_word>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d001      	beq.n	800a1f8 <check_fs+0x48>
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e029      	b.n	800a24c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a1fe:	2be9      	cmp	r3, #233	; 0xe9
 800a200:	d009      	beq.n	800a216 <check_fs+0x66>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a208:	2beb      	cmp	r3, #235	; 0xeb
 800a20a:	d11e      	bne.n	800a24a <check_fs+0x9a>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a212:	2b90      	cmp	r3, #144	; 0x90
 800a214:	d119      	bne.n	800a24a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	3338      	adds	r3, #56	; 0x38
 800a21a:	3336      	adds	r3, #54	; 0x36
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fe f9bf 	bl	80085a0 <ld_dword>
 800a222:	4603      	mov	r3, r0
 800a224:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a228:	4a0a      	ldr	r2, [pc, #40]	; (800a254 <check_fs+0xa4>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d101      	bne.n	800a232 <check_fs+0x82>
 800a22e:	2300      	movs	r3, #0
 800a230:	e00c      	b.n	800a24c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	3338      	adds	r3, #56	; 0x38
 800a236:	3352      	adds	r3, #82	; 0x52
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fe f9b1 	bl	80085a0 <ld_dword>
 800a23e:	4602      	mov	r2, r0
 800a240:	4b05      	ldr	r3, [pc, #20]	; (800a258 <check_fs+0xa8>)
 800a242:	429a      	cmp	r2, r3
 800a244:	d101      	bne.n	800a24a <check_fs+0x9a>
 800a246:	2300      	movs	r3, #0
 800a248:	e000      	b.n	800a24c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a24a:	2302      	movs	r3, #2
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	00544146 	.word	0x00544146
 800a258:	33544146 	.word	0x33544146

0800a25c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b096      	sub	sp, #88	; 0x58
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	4613      	mov	r3, r2
 800a268:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	2200      	movs	r2, #0
 800a26e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f7ff ff59 	bl	800a128 <get_ldnumber>
 800a276:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	da01      	bge.n	800a282 <find_volume+0x26>
 800a27e:	230b      	movs	r3, #11
 800a280:	e268      	b.n	800a754 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a282:	4ab0      	ldr	r2, [pc, #704]	; (800a544 <find_volume+0x2e8>)
 800a284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a28a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <find_volume+0x3a>
 800a292:	230c      	movs	r3, #12
 800a294:	e25e      	b.n	800a754 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a29a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a29c:	79fb      	ldrb	r3, [r7, #7]
 800a29e:	f023 0301 	bic.w	r3, r3, #1
 800a2a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d01a      	beq.n	800a2e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	785b      	ldrb	r3, [r3, #1]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fe f8bf 	bl	8008434 <disk_status>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a2bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2c0:	f003 0301 	and.w	r3, r3, #1
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10c      	bne.n	800a2e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d007      	beq.n	800a2de <find_volume+0x82>
 800a2ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a2d2:	f003 0304 	and.w	r3, r3, #4
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d001      	beq.n	800a2de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a2da:	230a      	movs	r3, #10
 800a2dc:	e23a      	b.n	800a754 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800a2de:	2300      	movs	r3, #0
 800a2e0:	e238      	b.n	800a754 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f2:	785b      	ldrb	r3, [r3, #1]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fe f8b7 	bl	8008468 <disk_initialize>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a300:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a304:	f003 0301 	and.w	r3, r3, #1
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a30c:	2303      	movs	r3, #3
 800a30e:	e221      	b.n	800a754 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a310:	79fb      	ldrb	r3, [r7, #7]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d007      	beq.n	800a326 <find_volume+0xca>
 800a316:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a31a:	f003 0304 	and.w	r3, r3, #4
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a322:	230a      	movs	r3, #10
 800a324:	e216      	b.n	800a754 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a328:	7858      	ldrb	r0, [r3, #1]
 800a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32c:	330c      	adds	r3, #12
 800a32e:	461a      	mov	r2, r3
 800a330:	2102      	movs	r1, #2
 800a332:	f7fe f8ff 	bl	8008534 <disk_ioctl>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d001      	beq.n	800a340 <find_volume+0xe4>
 800a33c:	2301      	movs	r3, #1
 800a33e:	e209      	b.n	800a754 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a342:	899b      	ldrh	r3, [r3, #12]
 800a344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a348:	d80d      	bhi.n	800a366 <find_volume+0x10a>
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	899b      	ldrh	r3, [r3, #12]
 800a34e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a352:	d308      	bcc.n	800a366 <find_volume+0x10a>
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	899b      	ldrh	r3, [r3, #12]
 800a358:	461a      	mov	r2, r3
 800a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35c:	899b      	ldrh	r3, [r3, #12]
 800a35e:	3b01      	subs	r3, #1
 800a360:	4013      	ands	r3, r2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <find_volume+0x10e>
 800a366:	2301      	movs	r3, #1
 800a368:	e1f4      	b.n	800a754 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a36e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a370:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a372:	f7ff ff1d 	bl	800a1b0 <check_fs>
 800a376:	4603      	mov	r3, r0
 800a378:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a37c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a380:	2b02      	cmp	r3, #2
 800a382:	d14b      	bne.n	800a41c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a384:	2300      	movs	r3, #0
 800a386:	643b      	str	r3, [r7, #64]	; 0x40
 800a388:	e01f      	b.n	800a3ca <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a392:	011b      	lsls	r3, r3, #4
 800a394:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a398:	4413      	add	r3, r2
 800a39a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39e:	3304      	adds	r3, #4
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d006      	beq.n	800a3b4 <find_volume+0x158>
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	3308      	adds	r3, #8
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe f8f8 	bl	80085a0 <ld_dword>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	e000      	b.n	800a3b6 <find_volume+0x15a>
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a3be:	440b      	add	r3, r1
 800a3c0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a3c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	643b      	str	r3, [r7, #64]	; 0x40
 800a3ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d9dc      	bls.n	800a38a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a3d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <find_volume+0x184>
 800a3da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a3e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a3ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a3f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d005      	beq.n	800a402 <find_volume+0x1a6>
 800a3f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3fa:	f7ff fed9 	bl	800a1b0 <check_fs>
 800a3fe:	4603      	mov	r3, r0
 800a400:	e000      	b.n	800a404 <find_volume+0x1a8>
 800a402:	2303      	movs	r3, #3
 800a404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a408:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d905      	bls.n	800a41c <find_volume+0x1c0>
 800a410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a412:	3301      	adds	r3, #1
 800a414:	643b      	str	r3, [r7, #64]	; 0x40
 800a416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a418:	2b03      	cmp	r3, #3
 800a41a:	d9e1      	bls.n	800a3e0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a41c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a420:	2b04      	cmp	r3, #4
 800a422:	d101      	bne.n	800a428 <find_volume+0x1cc>
 800a424:	2301      	movs	r3, #1
 800a426:	e195      	b.n	800a754 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a428:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d901      	bls.n	800a434 <find_volume+0x1d8>
 800a430:	230d      	movs	r3, #13
 800a432:	e18f      	b.n	800a754 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a436:	3338      	adds	r3, #56	; 0x38
 800a438:	330b      	adds	r3, #11
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe f898 	bl	8008570 <ld_word>
 800a440:	4603      	mov	r3, r0
 800a442:	461a      	mov	r2, r3
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	899b      	ldrh	r3, [r3, #12]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d001      	beq.n	800a450 <find_volume+0x1f4>
 800a44c:	230d      	movs	r3, #13
 800a44e:	e181      	b.n	800a754 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a452:	3338      	adds	r3, #56	; 0x38
 800a454:	3316      	adds	r3, #22
 800a456:	4618      	mov	r0, r3
 800a458:	f7fe f88a 	bl	8008570 <ld_word>
 800a45c:	4603      	mov	r3, r0
 800a45e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a462:	2b00      	cmp	r3, #0
 800a464:	d106      	bne.n	800a474 <find_volume+0x218>
 800a466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a468:	3338      	adds	r3, #56	; 0x38
 800a46a:	3324      	adds	r3, #36	; 0x24
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe f897 	bl	80085a0 <ld_dword>
 800a472:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a478:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a482:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a486:	789b      	ldrb	r3, [r3, #2]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d005      	beq.n	800a498 <find_volume+0x23c>
 800a48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48e:	789b      	ldrb	r3, [r3, #2]
 800a490:	2b02      	cmp	r3, #2
 800a492:	d001      	beq.n	800a498 <find_volume+0x23c>
 800a494:	230d      	movs	r3, #13
 800a496:	e15d      	b.n	800a754 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49a:	789b      	ldrb	r3, [r3, #2]
 800a49c:	461a      	mov	r2, r3
 800a49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4a0:	fb02 f303 	mul.w	r3, r2, r3
 800a4a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b4:	895b      	ldrh	r3, [r3, #10]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d008      	beq.n	800a4cc <find_volume+0x270>
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4bc:	895b      	ldrh	r3, [r3, #10]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	895b      	ldrh	r3, [r3, #10]
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d001      	beq.n	800a4d0 <find_volume+0x274>
 800a4cc:	230d      	movs	r3, #13
 800a4ce:	e141      	b.n	800a754 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	3338      	adds	r3, #56	; 0x38
 800a4d4:	3311      	adds	r3, #17
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fe f84a 	bl	8008570 <ld_word>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	461a      	mov	r2, r3
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	891b      	ldrh	r3, [r3, #8]
 800a4e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4ea:	8992      	ldrh	r2, [r2, #12]
 800a4ec:	0952      	lsrs	r2, r2, #5
 800a4ee:	b292      	uxth	r2, r2
 800a4f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4f4:	fb02 f201 	mul.w	r2, r2, r1
 800a4f8:	1a9b      	subs	r3, r3, r2
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <find_volume+0x2a8>
 800a500:	230d      	movs	r3, #13
 800a502:	e127      	b.n	800a754 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a506:	3338      	adds	r3, #56	; 0x38
 800a508:	3313      	adds	r3, #19
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe f830 	bl	8008570 <ld_word>
 800a510:	4603      	mov	r3, r0
 800a512:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <find_volume+0x2cc>
 800a51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51c:	3338      	adds	r3, #56	; 0x38
 800a51e:	3320      	adds	r3, #32
 800a520:	4618      	mov	r0, r3
 800a522:	f7fe f83d 	bl	80085a0 <ld_dword>
 800a526:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	3338      	adds	r3, #56	; 0x38
 800a52c:	330e      	adds	r3, #14
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe f81e 	bl	8008570 <ld_word>
 800a534:	4603      	mov	r3, r0
 800a536:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a538:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d104      	bne.n	800a548 <find_volume+0x2ec>
 800a53e:	230d      	movs	r3, #13
 800a540:	e108      	b.n	800a754 <find_volume+0x4f8>
 800a542:	bf00      	nop
 800a544:	20000108 	.word	0x20000108

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a548:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a54c:	4413      	add	r3, r2
 800a54e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a550:	8911      	ldrh	r1, [r2, #8]
 800a552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a554:	8992      	ldrh	r2, [r2, #12]
 800a556:	0952      	lsrs	r2, r2, #5
 800a558:	b292      	uxth	r2, r2
 800a55a:	fbb1 f2f2 	udiv	r2, r1, r2
 800a55e:	b292      	uxth	r2, r2
 800a560:	4413      	add	r3, r2
 800a562:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a568:	429a      	cmp	r2, r3
 800a56a:	d201      	bcs.n	800a570 <find_volume+0x314>
 800a56c:	230d      	movs	r3, #13
 800a56e:	e0f1      	b.n	800a754 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a578:	8952      	ldrh	r2, [r2, #10]
 800a57a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a57e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	2b00      	cmp	r3, #0
 800a584:	d101      	bne.n	800a58a <find_volume+0x32e>
 800a586:	230d      	movs	r3, #13
 800a588:	e0e4      	b.n	800a754 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800a58a:	2303      	movs	r3, #3
 800a58c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a596:	4293      	cmp	r3, r2
 800a598:	d802      	bhi.n	800a5a0 <find_volume+0x344>
 800a59a:	2302      	movs	r3, #2
 800a59c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d802      	bhi.n	800a5b0 <find_volume+0x354>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b2:	1c9a      	adds	r2, r3, #2
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5bc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a5be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5c2:	441a      	add	r2, r3
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a5c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5cc:	441a      	add	r2, r3
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a5d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d11e      	bne.n	800a618 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5dc:	3338      	adds	r3, #56	; 0x38
 800a5de:	332a      	adds	r3, #42	; 0x2a
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7fd ffc5 	bl	8008570 <ld_word>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d001      	beq.n	800a5f0 <find_volume+0x394>
 800a5ec:	230d      	movs	r3, #13
 800a5ee:	e0b1      	b.n	800a754 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	891b      	ldrh	r3, [r3, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <find_volume+0x3a0>
 800a5f8:	230d      	movs	r3, #13
 800a5fa:	e0ab      	b.n	800a754 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fe:	3338      	adds	r3, #56	; 0x38
 800a600:	332c      	adds	r3, #44	; 0x2c
 800a602:	4618      	mov	r0, r3
 800a604:	f7fd ffcc 	bl	80085a0 <ld_dword>
 800a608:	4602      	mov	r2, r0
 800a60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	647b      	str	r3, [r7, #68]	; 0x44
 800a616:	e01f      	b.n	800a658 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61a:	891b      	ldrh	r3, [r3, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <find_volume+0x3c8>
 800a620:	230d      	movs	r3, #13
 800a622:	e097      	b.n	800a754 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a62a:	441a      	add	r2, r3
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a634:	2b02      	cmp	r3, #2
 800a636:	d103      	bne.n	800a640 <find_volume+0x3e4>
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	69db      	ldr	r3, [r3, #28]
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	e00a      	b.n	800a656 <find_volume+0x3fa>
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	69da      	ldr	r2, [r3, #28]
 800a644:	4613      	mov	r3, r2
 800a646:	005b      	lsls	r3, r3, #1
 800a648:	4413      	add	r3, r2
 800a64a:	085a      	lsrs	r2, r3, #1
 800a64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64e:	69db      	ldr	r3, [r3, #28]
 800a650:	f003 0301 	and.w	r3, r3, #1
 800a654:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a656:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65a:	6a1a      	ldr	r2, [r3, #32]
 800a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65e:	899b      	ldrh	r3, [r3, #12]
 800a660:	4619      	mov	r1, r3
 800a662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a664:	440b      	add	r3, r1
 800a666:	3b01      	subs	r3, #1
 800a668:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a66a:	8989      	ldrh	r1, [r1, #12]
 800a66c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a670:	429a      	cmp	r2, r3
 800a672:	d201      	bcs.n	800a678 <find_volume+0x41c>
 800a674:	230d      	movs	r3, #13
 800a676:	e06d      	b.n	800a754 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67a:	f04f 32ff 	mov.w	r2, #4294967295
 800a67e:	619a      	str	r2, [r3, #24]
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a682:	699a      	ldr	r2, [r3, #24]
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68a:	2280      	movs	r2, #128	; 0x80
 800a68c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a68e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a692:	2b03      	cmp	r3, #3
 800a694:	d149      	bne.n	800a72a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a698:	3338      	adds	r3, #56	; 0x38
 800a69a:	3330      	adds	r3, #48	; 0x30
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fd ff67 	bl	8008570 <ld_word>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d140      	bne.n	800a72a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a6a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6b0:	f7fe fa0e 	bl	8008ad0 <move_window>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d137      	bne.n	800a72a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	2200      	movs	r2, #0
 800a6be:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	3338      	adds	r3, #56	; 0x38
 800a6c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fd ff51 	bl	8008570 <ld_word>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d127      	bne.n	800a72a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6dc:	3338      	adds	r3, #56	; 0x38
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fd ff5e 	bl	80085a0 <ld_dword>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	4b1d      	ldr	r3, [pc, #116]	; (800a75c <find_volume+0x500>)
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d11e      	bne.n	800a72a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ee:	3338      	adds	r3, #56	; 0x38
 800a6f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7fd ff53 	bl	80085a0 <ld_dword>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	4b18      	ldr	r3, [pc, #96]	; (800a760 <find_volume+0x504>)
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d113      	bne.n	800a72a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	3338      	adds	r3, #56	; 0x38
 800a706:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fd ff48 	bl	80085a0 <ld_dword>
 800a710:	4602      	mov	r2, r0
 800a712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a714:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	3338      	adds	r3, #56	; 0x38
 800a71a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fd ff3e 	bl	80085a0 <ld_dword>
 800a724:	4602      	mov	r2, r0
 800a726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a728:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a730:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a732:	4b0c      	ldr	r3, [pc, #48]	; (800a764 <find_volume+0x508>)
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	3301      	adds	r3, #1
 800a738:	b29a      	uxth	r2, r3
 800a73a:	4b0a      	ldr	r3, [pc, #40]	; (800a764 <find_volume+0x508>)
 800a73c:	801a      	strh	r2, [r3, #0]
 800a73e:	4b09      	ldr	r3, [pc, #36]	; (800a764 <find_volume+0x508>)
 800a740:	881a      	ldrh	r2, [r3, #0]
 800a742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a744:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	4a07      	ldr	r2, [pc, #28]	; (800a768 <find_volume+0x50c>)
 800a74a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a74c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a74e:	f7fe f957 	bl	8008a00 <clear_lock>
#endif
	return FR_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3758      	adds	r7, #88	; 0x58
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	41615252 	.word	0x41615252
 800a760:	61417272 	.word	0x61417272
 800a764:	2000010c 	.word	0x2000010c
 800a768:	20000130 	.word	0x20000130

0800a76c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a776:	2309      	movs	r3, #9
 800a778:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d01c      	beq.n	800a7ba <validate+0x4e>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d018      	beq.n	800a7ba <validate+0x4e>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d013      	beq.n	800a7ba <validate+0x4e>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	889a      	ldrh	r2, [r3, #4]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	88db      	ldrh	r3, [r3, #6]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d10c      	bne.n	800a7ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	785b      	ldrb	r3, [r3, #1]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fd fe44 	bl	8008434 <disk_status>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <validate+0x4e>
			res = FR_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a7ba:	7bfb      	ldrb	r3, [r7, #15]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d102      	bne.n	800a7c6 <validate+0x5a>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	e000      	b.n	800a7c8 <validate+0x5c>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	683a      	ldr	r2, [r7, #0]
 800a7ca:	6013      	str	r3, [r2, #0]
	return res;
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
	...

0800a7d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a7ea:	f107 0310 	add.w	r3, r7, #16
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7ff fc9a 	bl	800a128 <get_ldnumber>
 800a7f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	da01      	bge.n	800a800 <f_mount+0x28>
 800a7fc:	230b      	movs	r3, #11
 800a7fe:	e02b      	b.n	800a858 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a800:	4a17      	ldr	r2, [pc, #92]	; (800a860 <f_mount+0x88>)
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a808:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d005      	beq.n	800a81c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a810:	69b8      	ldr	r0, [r7, #24]
 800a812:	f7fe f8f5 	bl	8008a00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	2200      	movs	r2, #0
 800a81a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d002      	beq.n	800a828 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	490d      	ldr	r1, [pc, #52]	; (800a860 <f_mount+0x88>)
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d002      	beq.n	800a83e <f_mount+0x66>
 800a838:	79fb      	ldrb	r3, [r7, #7]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d001      	beq.n	800a842 <f_mount+0x6a>
 800a83e:	2300      	movs	r3, #0
 800a840:	e00a      	b.n	800a858 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a842:	f107 010c 	add.w	r1, r7, #12
 800a846:	f107 0308 	add.w	r3, r7, #8
 800a84a:	2200      	movs	r2, #0
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7ff fd05 	bl	800a25c <find_volume>
 800a852:	4603      	mov	r3, r0
 800a854:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a856:	7dfb      	ldrb	r3, [r7, #23]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3720      	adds	r7, #32
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	20000108 	.word	0x20000108

0800a864 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b09a      	sub	sp, #104	; 0x68
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	4613      	mov	r3, r2
 800a870:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <f_open+0x18>
 800a878:	2309      	movs	r3, #9
 800a87a:	e1bb      	b.n	800abf4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a87c:	79fb      	ldrb	r3, [r7, #7]
 800a87e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a882:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a884:	79fa      	ldrb	r2, [r7, #7]
 800a886:	f107 0114 	add.w	r1, r7, #20
 800a88a:	f107 0308 	add.w	r3, r7, #8
 800a88e:	4618      	mov	r0, r3
 800a890:	f7ff fce4 	bl	800a25c <find_volume>
 800a894:	4603      	mov	r3, r0
 800a896:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a89a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f040 819f 	bne.w	800abe2 <f_open+0x37e>
		dj.obj.fs = fs;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	f107 0318 	add.w	r3, r7, #24
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7ff fbc3 	bl	800a03c <follow_path>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a8bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d11a      	bne.n	800a8fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a8c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a8c8:	b25b      	sxtb	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	da03      	bge.n	800a8d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a8ce:	2306      	movs	r3, #6
 800a8d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a8d4:	e011      	b.n	800a8fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a8d6:	79fb      	ldrb	r3, [r7, #7]
 800a8d8:	f023 0301 	bic.w	r3, r3, #1
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	bf14      	ite	ne
 800a8e0:	2301      	movne	r3, #1
 800a8e2:	2300      	moveq	r3, #0
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	f107 0318 	add.w	r3, r7, #24
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fd ff3e 	bl	8008770 <chk_lock>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a8fa:	79fb      	ldrb	r3, [r7, #7]
 800a8fc:	f003 031c 	and.w	r3, r3, #28
 800a900:	2b00      	cmp	r3, #0
 800a902:	d07f      	beq.n	800aa04 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a904:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d017      	beq.n	800a93c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a90c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a910:	2b04      	cmp	r3, #4
 800a912:	d10e      	bne.n	800a932 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a914:	f7fd ff88 	bl	8008828 <enq_lock>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d006      	beq.n	800a92c <f_open+0xc8>
 800a91e:	f107 0318 	add.w	r3, r7, #24
 800a922:	4618      	mov	r0, r3
 800a924:	f7ff f8da 	bl	8009adc <dir_register>
 800a928:	4603      	mov	r3, r0
 800a92a:	e000      	b.n	800a92e <f_open+0xca>
 800a92c:	2312      	movs	r3, #18
 800a92e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a932:	79fb      	ldrb	r3, [r7, #7]
 800a934:	f043 0308 	orr.w	r3, r3, #8
 800a938:	71fb      	strb	r3, [r7, #7]
 800a93a:	e010      	b.n	800a95e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a93c:	7fbb      	ldrb	r3, [r7, #30]
 800a93e:	f003 0311 	and.w	r3, r3, #17
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <f_open+0xea>
					res = FR_DENIED;
 800a946:	2307      	movs	r3, #7
 800a948:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a94c:	e007      	b.n	800a95e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b00      	cmp	r3, #0
 800a956:	d002      	beq.n	800a95e <f_open+0xfa>
 800a958:	2308      	movs	r3, #8
 800a95a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a95e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a962:	2b00      	cmp	r3, #0
 800a964:	d168      	bne.n	800aa38 <f_open+0x1d4>
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	f003 0308 	and.w	r3, r3, #8
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d063      	beq.n	800aa38 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a970:	f7fd fcfe 	bl	8008370 <get_fattime>
 800a974:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a978:	330e      	adds	r3, #14
 800a97a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fd fe4d 	bl	800861c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a984:	3316      	adds	r3, #22
 800a986:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fd fe47 	bl	800861c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	330b      	adds	r3, #11
 800a992:	2220      	movs	r2, #32
 800a994:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a99a:	4611      	mov	r1, r2
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fe fe16 	bl	80095ce <ld_clust>
 800a9a2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fe fe2e 	bl	800960c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b2:	331c      	adds	r3, #28
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fd fe30 	bl	800861c <st_dword>
					fs->wflag = 1;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a9c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d037      	beq.n	800aa38 <f_open+0x1d4>
						dw = fs->winsect;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9cc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a9ce:	f107 0318 	add.w	r3, r7, #24
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe fb1e 	bl	8009018 <remove_chain>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a9e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d126      	bne.n	800aa38 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fe f86e 	bl	8008ad0 <move_window>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9fe:	3a01      	subs	r2, #1
 800aa00:	615a      	str	r2, [r3, #20]
 800aa02:	e019      	b.n	800aa38 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aa04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d115      	bne.n	800aa38 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aa0c:	7fbb      	ldrb	r3, [r7, #30]
 800aa0e:	f003 0310 	and.w	r3, r3, #16
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d003      	beq.n	800aa1e <f_open+0x1ba>
					res = FR_NO_FILE;
 800aa16:	2304      	movs	r3, #4
 800aa18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aa1c:	e00c      	b.n	800aa38 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800aa1e:	79fb      	ldrb	r3, [r7, #7]
 800aa20:	f003 0302 	and.w	r3, r3, #2
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d007      	beq.n	800aa38 <f_open+0x1d4>
 800aa28:	7fbb      	ldrb	r3, [r7, #30]
 800aa2a:	f003 0301 	and.w	r3, r3, #1
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d002      	beq.n	800aa38 <f_open+0x1d4>
						res = FR_DENIED;
 800aa32:	2307      	movs	r3, #7
 800aa34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800aa38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d128      	bne.n	800aa92 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aa40:	79fb      	ldrb	r3, [r7, #7]
 800aa42:	f003 0308 	and.w	r3, r3, #8
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d003      	beq.n	800aa52 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800aa4a:	79fb      	ldrb	r3, [r7, #7]
 800aa4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa50:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800aa5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	f023 0301 	bic.w	r3, r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bf14      	ite	ne
 800aa6a:	2301      	movne	r3, #1
 800aa6c:	2300      	moveq	r3, #0
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	461a      	mov	r2, r3
 800aa72:	f107 0318 	add.w	r3, r7, #24
 800aa76:	4611      	mov	r1, r2
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fd fef7 	bl	800886c <inc_lock>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d102      	bne.n	800aa92 <f_open+0x22e>
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aa92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f040 80a3 	bne.w	800abe2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fe fd93 	bl	80095ce <ld_clust>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aaae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab0:	331c      	adds	r3, #28
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fd fd74 	bl	80085a0 <ld_dword>
 800aab8:	4602      	mov	r2, r0
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	88da      	ldrh	r2, [r3, #6]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	79fa      	ldrb	r2, [r7, #7]
 800aad6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3330      	adds	r3, #48	; 0x30
 800aaee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fd fdde 	bl	80086b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aafa:	79fb      	ldrb	r3, [r7, #7]
 800aafc:	f003 0320 	and.w	r3, r3, #32
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d06e      	beq.n	800abe2 <f_open+0x37e>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d06a      	beq.n	800abe2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	68da      	ldr	r2, [r3, #12]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	895b      	ldrh	r3, [r3, #10]
 800ab18:	461a      	mov	r2, r3
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	899b      	ldrh	r3, [r3, #12]
 800ab1e:	fb03 f302 	mul.w	r3, r3, r2
 800ab22:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab30:	e016      	b.n	800ab60 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fe f887 	bl	8008c4a <get_fat>
 800ab3c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ab3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d802      	bhi.n	800ab4a <f_open+0x2e6>
 800ab44:	2302      	movs	r3, #2
 800ab46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ab4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab50:	d102      	bne.n	800ab58 <f_open+0x2f4>
 800ab52:	2301      	movs	r3, #1
 800ab54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ab58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d103      	bne.n	800ab70 <f_open+0x30c>
 800ab68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d8e0      	bhi.n	800ab32 <f_open+0x2ce>
				}
				fp->clust = clst;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab74:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ab76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d131      	bne.n	800abe2 <f_open+0x37e>
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	899b      	ldrh	r3, [r3, #12]
 800ab82:	461a      	mov	r2, r3
 800ab84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab86:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab8a:	fb02 f201 	mul.w	r2, r2, r1
 800ab8e:	1a9b      	subs	r3, r3, r2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d026      	beq.n	800abe2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fe f837 	bl	8008c0c <clust2sect>
 800ab9e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800aba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d103      	bne.n	800abae <f_open+0x34a>
						res = FR_INT_ERR;
 800aba6:	2302      	movs	r3, #2
 800aba8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800abac:	e019      	b.n	800abe2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	899b      	ldrh	r3, [r3, #12]
 800abb2:	461a      	mov	r2, r3
 800abb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abb6:	fbb3 f2f2 	udiv	r2, r3, r2
 800abba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abbc:	441a      	add	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	7858      	ldrb	r0, [r3, #1]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6a1a      	ldr	r2, [r3, #32]
 800abd0:	2301      	movs	r3, #1
 800abd2:	f7fd fc6f 	bl	80084b4 <disk_read>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <f_open+0x37e>
 800abdc:	2301      	movs	r3, #1
 800abde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800abe2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d002      	beq.n	800abf0 <f_open+0x38c>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800abf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3768      	adds	r7, #104	; 0x68
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b08e      	sub	sp, #56	; 0x38
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
 800ac08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2200      	movs	r2, #0
 800ac12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f107 0214 	add.w	r2, r7, #20
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7ff fda5 	bl	800a76c <validate>
 800ac22:	4603      	mov	r3, r0
 800ac24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d107      	bne.n	800ac40 <f_read+0x44>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	7d5b      	ldrb	r3, [r3, #21]
 800ac34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ac38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <f_read+0x4a>
 800ac40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac44:	e135      	b.n	800aeb2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	7d1b      	ldrb	r3, [r3, #20]
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <f_read+0x5a>
 800ac52:	2307      	movs	r3, #7
 800ac54:	e12d      	b.n	800aeb2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	68da      	ldr	r2, [r3, #12]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	6a3b      	ldr	r3, [r7, #32]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	f240 811e 	bls.w	800aea8 <f_read+0x2ac>
 800ac6c:	6a3b      	ldr	r3, [r7, #32]
 800ac6e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ac70:	e11a      	b.n	800aea8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	8992      	ldrh	r2, [r2, #12]
 800ac7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac7e:	fb02 f201 	mul.w	r2, r2, r1
 800ac82:	1a9b      	subs	r3, r3, r2
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f040 80d5 	bne.w	800ae34 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	8992      	ldrh	r2, [r2, #12]
 800ac92:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	8952      	ldrh	r2, [r2, #10]
 800ac9a:	3a01      	subs	r2, #1
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d12f      	bne.n	800ad06 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d103      	bne.n	800acb6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	633b      	str	r3, [r7, #48]	; 0x30
 800acb4:	e013      	b.n	800acde <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d007      	beq.n	800acce <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	4619      	mov	r1, r3
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f7fe faa4 	bl	8009212 <clmt_clust>
 800acca:	6338      	str	r0, [r7, #48]	; 0x30
 800accc:	e007      	b.n	800acde <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	4619      	mov	r1, r3
 800acd6:	4610      	mov	r0, r2
 800acd8:	f7fd ffb7 	bl	8008c4a <get_fat>
 800acdc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800acde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d804      	bhi.n	800acee <f_read+0xf2>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2202      	movs	r2, #2
 800ace8:	755a      	strb	r2, [r3, #21]
 800acea:	2302      	movs	r3, #2
 800acec:	e0e1      	b.n	800aeb2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf4:	d104      	bne.n	800ad00 <f_read+0x104>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2201      	movs	r2, #1
 800acfa:	755a      	strb	r2, [r3, #21]
 800acfc:	2301      	movs	r3, #1
 800acfe:	e0d8      	b.n	800aeb2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad04:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	4610      	mov	r0, r2
 800ad10:	f7fd ff7c 	bl	8008c0c <clust2sect>
 800ad14:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d104      	bne.n	800ad26 <f_read+0x12a>
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2202      	movs	r2, #2
 800ad20:	755a      	strb	r2, [r3, #21]
 800ad22:	2302      	movs	r3, #2
 800ad24:	e0c5      	b.n	800aeb2 <f_read+0x2b6>
			sect += csect;
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	899b      	ldrh	r3, [r3, #12]
 800ad32:	461a      	mov	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad3a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ad3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d041      	beq.n	800adc6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad42:	69fa      	ldr	r2, [r7, #28]
 800ad44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad46:	4413      	add	r3, r2
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	8952      	ldrh	r2, [r2, #10]
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d905      	bls.n	800ad5c <f_read+0x160>
					cc = fs->csize - csect;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	895b      	ldrh	r3, [r3, #10]
 800ad54:	461a      	mov	r2, r3
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	7858      	ldrb	r0, [r3, #1]
 800ad60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad62:	69ba      	ldr	r2, [r7, #24]
 800ad64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad66:	f7fd fba5 	bl	80084b4 <disk_read>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d004      	beq.n	800ad7a <f_read+0x17e>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2201      	movs	r2, #1
 800ad74:	755a      	strb	r2, [r3, #21]
 800ad76:	2301      	movs	r3, #1
 800ad78:	e09b      	b.n	800aeb2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	7d1b      	ldrb	r3, [r3, #20]
 800ad7e:	b25b      	sxtb	r3, r3
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	da18      	bge.n	800adb6 <f_read+0x1ba>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6a1a      	ldr	r2, [r3, #32]
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d911      	bls.n	800adb6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6a1a      	ldr	r2, [r3, #32]
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	8992      	ldrh	r2, [r2, #12]
 800ad9e:	fb02 f303 	mul.w	r3, r2, r3
 800ada2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ada4:	18d0      	adds	r0, r2, r3
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	899b      	ldrh	r3, [r3, #12]
 800adb0:	461a      	mov	r2, r3
 800adb2:	f7fd fc5f 	bl	8008674 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	899b      	ldrh	r3, [r3, #12]
 800adba:	461a      	mov	r2, r3
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	fb02 f303 	mul.w	r3, r2, r3
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800adc4:	e05c      	b.n	800ae80 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	69ba      	ldr	r2, [r7, #24]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d02e      	beq.n	800ae2e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	7d1b      	ldrb	r3, [r3, #20]
 800add4:	b25b      	sxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	da18      	bge.n	800ae0c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	7858      	ldrb	r0, [r3, #1]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6a1a      	ldr	r2, [r3, #32]
 800ade8:	2301      	movs	r3, #1
 800adea:	f7fd fb83 	bl	80084f4 <disk_write>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d004      	beq.n	800adfe <f_read+0x202>
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2201      	movs	r2, #1
 800adf8:	755a      	strb	r2, [r3, #21]
 800adfa:	2301      	movs	r3, #1
 800adfc:	e059      	b.n	800aeb2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	7d1b      	ldrb	r3, [r3, #20]
 800ae02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	7858      	ldrb	r0, [r3, #1]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae16:	2301      	movs	r3, #1
 800ae18:	69ba      	ldr	r2, [r7, #24]
 800ae1a:	f7fd fb4b 	bl	80084b4 <disk_read>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d004      	beq.n	800ae2e <f_read+0x232>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2201      	movs	r2, #1
 800ae28:	755a      	strb	r2, [r3, #21]
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e041      	b.n	800aeb2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	69ba      	ldr	r2, [r7, #24]
 800ae32:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	899b      	ldrh	r3, [r3, #12]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	8992      	ldrh	r2, [r2, #12]
 800ae42:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae46:	fb02 f201 	mul.w	r2, r2, r1
 800ae4a:	1a9b      	subs	r3, r3, r2
 800ae4c:	1ac3      	subs	r3, r0, r3
 800ae4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ae50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d901      	bls.n	800ae5c <f_read+0x260>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	699b      	ldr	r3, [r3, #24]
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	8992      	ldrh	r2, [r2, #12]
 800ae6a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae6e:	fb02 f200 	mul.w	r2, r2, r0
 800ae72:	1a9b      	subs	r3, r3, r2
 800ae74:	440b      	add	r3, r1
 800ae76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae7c:	f7fd fbfa 	bl	8008674 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ae80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	4413      	add	r3, r2
 800ae86:	627b      	str	r3, [r7, #36]	; 0x24
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	699a      	ldr	r2, [r3, #24]
 800ae8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8e:	441a      	add	r2, r3
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	619a      	str	r2, [r3, #24]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9a:	441a      	add	r2, r3
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	601a      	str	r2, [r3, #0]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f47f aee1 	bne.w	800ac72 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3738      	adds	r7, #56	; 0x38
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b08c      	sub	sp, #48	; 0x30
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	60f8      	str	r0, [r7, #12]
 800aec2:	60b9      	str	r1, [r7, #8]
 800aec4:	607a      	str	r2, [r7, #4]
 800aec6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	2200      	movs	r2, #0
 800aed0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f107 0210 	add.w	r2, r7, #16
 800aed8:	4611      	mov	r1, r2
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff fc46 	bl	800a76c <validate>
 800aee0:	4603      	mov	r3, r0
 800aee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d107      	bne.n	800aefe <f_write+0x44>
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	7d5b      	ldrb	r3, [r3, #21]
 800aef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d002      	beq.n	800af04 <f_write+0x4a>
 800aefe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af02:	e16a      	b.n	800b1da <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	7d1b      	ldrb	r3, [r3, #20]
 800af08:	f003 0302 	and.w	r3, r3, #2
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <f_write+0x5a>
 800af10:	2307      	movs	r3, #7
 800af12:	e162      	b.n	800b1da <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	699a      	ldr	r2, [r3, #24]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	441a      	add	r2, r3
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	429a      	cmp	r2, r3
 800af22:	f080 814c 	bcs.w	800b1be <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	43db      	mvns	r3, r3
 800af2c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800af2e:	e146      	b.n	800b1be <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	699b      	ldr	r3, [r3, #24]
 800af34:	693a      	ldr	r2, [r7, #16]
 800af36:	8992      	ldrh	r2, [r2, #12]
 800af38:	fbb3 f1f2 	udiv	r1, r3, r2
 800af3c:	fb02 f201 	mul.w	r2, r2, r1
 800af40:	1a9b      	subs	r3, r3, r2
 800af42:	2b00      	cmp	r3, #0
 800af44:	f040 80f1 	bne.w	800b12a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	699b      	ldr	r3, [r3, #24]
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	8992      	ldrh	r2, [r2, #12]
 800af50:	fbb3 f3f2 	udiv	r3, r3, r2
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	8952      	ldrh	r2, [r2, #10]
 800af58:	3a01      	subs	r2, #1
 800af5a:	4013      	ands	r3, r2
 800af5c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d143      	bne.n	800afec <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10c      	bne.n	800af86 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af74:	2b00      	cmp	r3, #0
 800af76:	d11a      	bne.n	800afae <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2100      	movs	r1, #0
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fe f8b0 	bl	80090e2 <create_chain>
 800af82:	62b8      	str	r0, [r7, #40]	; 0x28
 800af84:	e013      	b.n	800afae <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d007      	beq.n	800af9e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	4619      	mov	r1, r3
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f7fe f93c 	bl	8009212 <clmt_clust>
 800af9a:	62b8      	str	r0, [r7, #40]	; 0x28
 800af9c:	e007      	b.n	800afae <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	69db      	ldr	r3, [r3, #28]
 800afa4:	4619      	mov	r1, r3
 800afa6:	4610      	mov	r0, r2
 800afa8:	f7fe f89b 	bl	80090e2 <create_chain>
 800afac:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800afae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 8109 	beq.w	800b1c8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d104      	bne.n	800afc6 <f_write+0x10c>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2202      	movs	r2, #2
 800afc0:	755a      	strb	r2, [r3, #21]
 800afc2:	2302      	movs	r3, #2
 800afc4:	e109      	b.n	800b1da <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800afc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afcc:	d104      	bne.n	800afd8 <f_write+0x11e>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2201      	movs	r2, #1
 800afd2:	755a      	strb	r2, [r3, #21]
 800afd4:	2301      	movs	r3, #1
 800afd6:	e100      	b.n	800b1da <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afdc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d102      	bne.n	800afec <f_write+0x132>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	7d1b      	ldrb	r3, [r3, #20]
 800aff0:	b25b      	sxtb	r3, r3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	da18      	bge.n	800b028 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	7858      	ldrb	r0, [r3, #1]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6a1a      	ldr	r2, [r3, #32]
 800b004:	2301      	movs	r3, #1
 800b006:	f7fd fa75 	bl	80084f4 <disk_write>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d004      	beq.n	800b01a <f_write+0x160>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2201      	movs	r2, #1
 800b014:	755a      	strb	r2, [r3, #21]
 800b016:	2301      	movs	r3, #1
 800b018:	e0df      	b.n	800b1da <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	7d1b      	ldrb	r3, [r3, #20]
 800b01e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b022:	b2da      	uxtb	r2, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	69db      	ldr	r3, [r3, #28]
 800b02e:	4619      	mov	r1, r3
 800b030:	4610      	mov	r0, r2
 800b032:	f7fd fdeb 	bl	8008c0c <clust2sect>
 800b036:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d104      	bne.n	800b048 <f_write+0x18e>
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2202      	movs	r2, #2
 800b042:	755a      	strb	r2, [r3, #21]
 800b044:	2302      	movs	r3, #2
 800b046:	e0c8      	b.n	800b1da <f_write+0x320>
			sect += csect;
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	4413      	add	r3, r2
 800b04e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	899b      	ldrh	r3, [r3, #12]
 800b054:	461a      	mov	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	fbb3 f3f2 	udiv	r3, r3, r2
 800b05c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b05e:	6a3b      	ldr	r3, [r7, #32]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d043      	beq.n	800b0ec <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b064:	69ba      	ldr	r2, [r7, #24]
 800b066:	6a3b      	ldr	r3, [r7, #32]
 800b068:	4413      	add	r3, r2
 800b06a:	693a      	ldr	r2, [r7, #16]
 800b06c:	8952      	ldrh	r2, [r2, #10]
 800b06e:	4293      	cmp	r3, r2
 800b070:	d905      	bls.n	800b07e <f_write+0x1c4>
					cc = fs->csize - csect;
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	895b      	ldrh	r3, [r3, #10]
 800b076:	461a      	mov	r2, r3
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	7858      	ldrb	r0, [r3, #1]
 800b082:	6a3b      	ldr	r3, [r7, #32]
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	69f9      	ldr	r1, [r7, #28]
 800b088:	f7fd fa34 	bl	80084f4 <disk_write>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d004      	beq.n	800b09c <f_write+0x1e2>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2201      	movs	r2, #1
 800b096:	755a      	strb	r2, [r3, #21]
 800b098:	2301      	movs	r3, #1
 800b09a:	e09e      	b.n	800b1da <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6a1a      	ldr	r2, [r3, #32]
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	6a3a      	ldr	r2, [r7, #32]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d918      	bls.n	800b0dc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6a1a      	ldr	r2, [r3, #32]
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	8992      	ldrh	r2, [r2, #12]
 800b0bc:	fb02 f303 	mul.w	r3, r2, r3
 800b0c0:	69fa      	ldr	r2, [r7, #28]
 800b0c2:	18d1      	adds	r1, r2, r3
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	899b      	ldrh	r3, [r3, #12]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	f7fd fad3 	bl	8008674 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	7d1b      	ldrb	r3, [r3, #20]
 800b0d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	899b      	ldrh	r3, [r3, #12]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	6a3b      	ldr	r3, [r7, #32]
 800b0e4:	fb02 f303 	mul.w	r3, r2, r3
 800b0e8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b0ea:	e04b      	b.n	800b184 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6a1b      	ldr	r3, [r3, #32]
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d016      	beq.n	800b124 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	699a      	ldr	r2, [r3, #24]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d210      	bcs.n	800b124 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	7858      	ldrb	r0, [r3, #1]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b10c:	2301      	movs	r3, #1
 800b10e:	697a      	ldr	r2, [r7, #20]
 800b110:	f7fd f9d0 	bl	80084b4 <disk_read>
 800b114:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b116:	2b00      	cmp	r3, #0
 800b118:	d004      	beq.n	800b124 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2201      	movs	r2, #1
 800b11e:	755a      	strb	r2, [r3, #21]
 800b120:	2301      	movs	r3, #1
 800b122:	e05a      	b.n	800b1da <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	899b      	ldrh	r3, [r3, #12]
 800b12e:	4618      	mov	r0, r3
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	8992      	ldrh	r2, [r2, #12]
 800b138:	fbb3 f1f2 	udiv	r1, r3, r2
 800b13c:	fb02 f201 	mul.w	r2, r2, r1
 800b140:	1a9b      	subs	r3, r3, r2
 800b142:	1ac3      	subs	r3, r0, r3
 800b144:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d901      	bls.n	800b152 <f_write+0x298>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	8992      	ldrh	r2, [r2, #12]
 800b160:	fbb3 f0f2 	udiv	r0, r3, r2
 800b164:	fb02 f200 	mul.w	r2, r2, r0
 800b168:	1a9b      	subs	r3, r3, r2
 800b16a:	440b      	add	r3, r1
 800b16c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b16e:	69f9      	ldr	r1, [r7, #28]
 800b170:	4618      	mov	r0, r3
 800b172:	f7fd fa7f 	bl	8008674 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	7d1b      	ldrb	r3, [r3, #20]
 800b17a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b184:	69fa      	ldr	r2, [r7, #28]
 800b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b188:	4413      	add	r3, r2
 800b18a:	61fb      	str	r3, [r7, #28]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	699a      	ldr	r2, [r3, #24]
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	441a      	add	r2, r3
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	619a      	str	r2, [r3, #24]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	68da      	ldr	r2, [r3, #12]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	bf38      	it	cc
 800b1a4:	461a      	movcc	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	60da      	str	r2, [r3, #12]
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b0:	441a      	add	r2, r3
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	601a      	str	r2, [r3, #0]
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f47f aeb5 	bne.w	800af30 <f_write+0x76>
 800b1c6:	e000      	b.n	800b1ca <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b1c8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	7d1b      	ldrb	r3, [r3, #20]
 800b1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1d2:	b2da      	uxtb	r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3730      	adds	r7, #48	; 0x30
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b086      	sub	sp, #24
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f107 0208 	add.w	r2, r7, #8
 800b1f0:	4611      	mov	r1, r2
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7ff faba 	bl	800a76c <validate>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b1fc:	7dfb      	ldrb	r3, [r7, #23]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d168      	bne.n	800b2d4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	7d1b      	ldrb	r3, [r3, #20]
 800b206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d062      	beq.n	800b2d4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	7d1b      	ldrb	r3, [r3, #20]
 800b212:	b25b      	sxtb	r3, r3
 800b214:	2b00      	cmp	r3, #0
 800b216:	da15      	bge.n	800b244 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	7858      	ldrb	r0, [r3, #1]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a1a      	ldr	r2, [r3, #32]
 800b226:	2301      	movs	r3, #1
 800b228:	f7fd f964 	bl	80084f4 <disk_write>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <f_sync+0x54>
 800b232:	2301      	movs	r3, #1
 800b234:	e04f      	b.n	800b2d6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	7d1b      	ldrb	r3, [r3, #20]
 800b23a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b244:	f7fd f894 	bl	8008370 <get_fattime>
 800b248:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b24a:	68ba      	ldr	r2, [r7, #8]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b250:	4619      	mov	r1, r3
 800b252:	4610      	mov	r0, r2
 800b254:	f7fd fc3c 	bl	8008ad0 <move_window>
 800b258:	4603      	mov	r3, r0
 800b25a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b25c:	7dfb      	ldrb	r3, [r7, #23]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d138      	bne.n	800b2d4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b266:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	330b      	adds	r3, #11
 800b26c:	781a      	ldrb	r2, [r3, #0]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	330b      	adds	r3, #11
 800b272:	f042 0220 	orr.w	r2, r2, #32
 800b276:	b2d2      	uxtb	r2, r2
 800b278:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6818      	ldr	r0, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	461a      	mov	r2, r3
 800b284:	68f9      	ldr	r1, [r7, #12]
 800b286:	f7fe f9c1 	bl	800960c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f103 021c 	add.w	r2, r3, #28
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	4619      	mov	r1, r3
 800b296:	4610      	mov	r0, r2
 800b298:	f7fd f9c0 	bl	800861c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	3316      	adds	r3, #22
 800b2a0:	6939      	ldr	r1, [r7, #16]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fd f9ba 	bl	800861c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	3312      	adds	r3, #18
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fd f999 	bl	80085e6 <st_word>
					fs->wflag = 1;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7fd fc35 	bl	8008b2c <sync_fs>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	7d1b      	ldrb	r3, [r3, #20]
 800b2ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2ce:	b2da      	uxtb	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b084      	sub	sp, #16
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7ff ff7b 	bl	800b1e2 <f_sync>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d118      	bne.n	800b328 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f107 0208 	add.w	r2, r7, #8
 800b2fc:	4611      	mov	r1, r2
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7ff fa34 	bl	800a76c <validate>
 800b304:	4603      	mov	r3, r0
 800b306:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b308:	7bfb      	ldrb	r3, [r7, #15]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10c      	bne.n	800b328 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	4618      	mov	r0, r3
 800b314:	f7fd fb38 	bl	8008988 <dec_lock>
 800b318:	4603      	mov	r3, r0
 800b31a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d102      	bne.n	800b328 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b328:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b092      	sub	sp, #72	; 0x48
 800b336:	af00      	add	r7, sp, #0
 800b338:	60f8      	str	r0, [r7, #12]
 800b33a:	60b9      	str	r1, [r7, #8]
 800b33c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b33e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b342:	f107 030c 	add.w	r3, r7, #12
 800b346:	2200      	movs	r2, #0
 800b348:	4618      	mov	r0, r3
 800b34a:	f7fe ff87 	bl	800a25c <find_volume>
 800b34e:	4603      	mov	r3, r0
 800b350:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b354:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f040 8099 	bne.w	800b490 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b35e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	699a      	ldr	r2, [r3, #24]
 800b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36a:	69db      	ldr	r3, [r3, #28]
 800b36c:	3b02      	subs	r3, #2
 800b36e:	429a      	cmp	r2, r3
 800b370:	d804      	bhi.n	800b37c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b374:	699a      	ldr	r2, [r3, #24]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	e089      	b.n	800b490 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b37c:	2300      	movs	r3, #0
 800b37e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d128      	bne.n	800b3da <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b388:	2302      	movs	r3, #2
 800b38a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b390:	f107 0314 	add.w	r3, r7, #20
 800b394:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b396:	4618      	mov	r0, r3
 800b398:	f7fd fc57 	bl	8008c4a <get_fat>
 800b39c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a4:	d103      	bne.n	800b3ae <f_getfree+0x7c>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b3ac:	e063      	b.n	800b476 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d103      	bne.n	800b3bc <f_getfree+0x8a>
 800b3b4:	2302      	movs	r3, #2
 800b3b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b3ba:	e05c      	b.n	800b476 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d102      	bne.n	800b3c8 <f_getfree+0x96>
 800b3c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d0:	69db      	ldr	r3, [r3, #28]
 800b3d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d3db      	bcc.n	800b390 <f_getfree+0x5e>
 800b3d8:	e04d      	b.n	800b476 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3dc:	69db      	ldr	r3, [r3, #28]
 800b3de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d113      	bne.n	800b41c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f8:	1c5a      	adds	r2, r3, #1
 800b3fa:	63ba      	str	r2, [r7, #56]	; 0x38
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	f7fd fb67 	bl	8008ad0 <move_window>
 800b402:	4603      	mov	r3, r0
 800b404:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b408:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d131      	bne.n	800b474 <f_getfree+0x142>
							p = fs->win;
 800b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b412:	3338      	adds	r3, #56	; 0x38
 800b414:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b418:	899b      	ldrh	r3, [r3, #12]
 800b41a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	2b02      	cmp	r3, #2
 800b422:	d10f      	bne.n	800b444 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b426:	f7fd f8a3 	bl	8008570 <ld_word>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d102      	bne.n	800b436 <f_getfree+0x104>
 800b430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b432:	3301      	adds	r3, #1
 800b434:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b438:	3302      	adds	r3, #2
 800b43a:	633b      	str	r3, [r7, #48]	; 0x30
 800b43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b43e:	3b02      	subs	r3, #2
 800b440:	637b      	str	r3, [r7, #52]	; 0x34
 800b442:	e010      	b.n	800b466 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b446:	f7fd f8ab 	bl	80085a0 <ld_dword>
 800b44a:	4603      	mov	r3, r0
 800b44c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b450:	2b00      	cmp	r3, #0
 800b452:	d102      	bne.n	800b45a <f_getfree+0x128>
 800b454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b456:	3301      	adds	r3, #1
 800b458:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45c:	3304      	adds	r3, #4
 800b45e:	633b      	str	r3, [r7, #48]	; 0x30
 800b460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b462:	3b04      	subs	r3, #4
 800b464:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b468:	3b01      	subs	r3, #1
 800b46a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1bd      	bne.n	800b3ee <f_getfree+0xbc>
 800b472:	e000      	b.n	800b476 <f_getfree+0x144>
							if (res != FR_OK) break;
 800b474:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b47a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b480:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b484:	791a      	ldrb	r2, [r3, #4]
 800b486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b488:	f042 0201 	orr.w	r2, r2, #1
 800b48c:	b2d2      	uxtb	r2, r2
 800b48e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b490:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b494:	4618      	mov	r0, r3
 800b496:	3748      	adds	r7, #72	; 0x48
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b088      	sub	sp, #32
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
	int n = 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b4b0:	e01b      	b.n	800b4ea <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800b4b2:	f107 0310 	add.w	r3, r7, #16
 800b4b6:	f107 0114 	add.w	r1, r7, #20
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7ff fb9d 	bl	800abfc <f_read>
		if (rc != 1) break;
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d116      	bne.n	800b4f6 <f_gets+0x5a>
		c = s[0];
 800b4c8:	7d3b      	ldrb	r3, [r7, #20]
 800b4ca:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800b4cc:	7dfb      	ldrb	r3, [r7, #23]
 800b4ce:	2b0d      	cmp	r3, #13
 800b4d0:	d100      	bne.n	800b4d4 <f_gets+0x38>
 800b4d2:	e00a      	b.n	800b4ea <f_gets+0x4e>
		*p++ = c;
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	1c5a      	adds	r2, r3, #1
 800b4d8:	61ba      	str	r2, [r7, #24]
 800b4da:	7dfa      	ldrb	r2, [r7, #23]
 800b4dc:	701a      	strb	r2, [r3, #0]
		n++;
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800b4e4:	7dfb      	ldrb	r3, [r7, #23]
 800b4e6:	2b0a      	cmp	r3, #10
 800b4e8:	d007      	beq.n	800b4fa <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	69fa      	ldr	r2, [r7, #28]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	dbde      	blt.n	800b4b2 <f_gets+0x16>
 800b4f4:	e002      	b.n	800b4fc <f_gets+0x60>
		if (rc != 1) break;
 800b4f6:	bf00      	nop
 800b4f8:	e000      	b.n	800b4fc <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800b4fa:	bf00      	nop
	}
	*p = 0;
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	2200      	movs	r2, #0
 800b500:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d001      	beq.n	800b50c <f_gets+0x70>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	e000      	b.n	800b50e <f_gets+0x72>
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3720      	adds	r7, #32
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
	...

0800b518 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b518:	b480      	push	{r7}
 800b51a:	b087      	sub	sp, #28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	4613      	mov	r3, r2
 800b524:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b526:	2301      	movs	r3, #1
 800b528:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b52e:	4b1f      	ldr	r3, [pc, #124]	; (800b5ac <FATFS_LinkDriverEx+0x94>)
 800b530:	7a5b      	ldrb	r3, [r3, #9]
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b00      	cmp	r3, #0
 800b536:	d131      	bne.n	800b59c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b538:	4b1c      	ldr	r3, [pc, #112]	; (800b5ac <FATFS_LinkDriverEx+0x94>)
 800b53a:	7a5b      	ldrb	r3, [r3, #9]
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	461a      	mov	r2, r3
 800b540:	4b1a      	ldr	r3, [pc, #104]	; (800b5ac <FATFS_LinkDriverEx+0x94>)
 800b542:	2100      	movs	r1, #0
 800b544:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b546:	4b19      	ldr	r3, [pc, #100]	; (800b5ac <FATFS_LinkDriverEx+0x94>)
 800b548:	7a5b      	ldrb	r3, [r3, #9]
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	4a17      	ldr	r2, [pc, #92]	; (800b5ac <FATFS_LinkDriverEx+0x94>)
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	4413      	add	r3, r2
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b556:	4b15      	ldr	r3, [pc, #84]	; (800b5ac <FATFS_LinkDriverEx+0x94>)
 800b558:	7a5b      	ldrb	r3, [r3, #9]
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	461a      	mov	r2, r3
 800b55e:	4b13      	ldr	r3, [pc, #76]	; (800b5ac <FATFS_LinkDriverEx+0x94>)
 800b560:	4413      	add	r3, r2
 800b562:	79fa      	ldrb	r2, [r7, #7]
 800b564:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b566:	4b11      	ldr	r3, [pc, #68]	; (800b5ac <FATFS_LinkDriverEx+0x94>)
 800b568:	7a5b      	ldrb	r3, [r3, #9]
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	1c5a      	adds	r2, r3, #1
 800b56e:	b2d1      	uxtb	r1, r2
 800b570:	4a0e      	ldr	r2, [pc, #56]	; (800b5ac <FATFS_LinkDriverEx+0x94>)
 800b572:	7251      	strb	r1, [r2, #9]
 800b574:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b576:	7dbb      	ldrb	r3, [r7, #22]
 800b578:	3330      	adds	r3, #48	; 0x30
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	3301      	adds	r3, #1
 800b584:	223a      	movs	r2, #58	; 0x3a
 800b586:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	3302      	adds	r3, #2
 800b58c:	222f      	movs	r2, #47	; 0x2f
 800b58e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	3303      	adds	r3, #3
 800b594:	2200      	movs	r2, #0
 800b596:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b598:	2300      	movs	r3, #0
 800b59a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	371c      	adds	r7, #28
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	20000330 	.word	0x20000330

0800b5b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7ff ffaa 	bl	800b518 <FATFS_LinkDriverEx>
 800b5c4:	4603      	mov	r3, r0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
	...

0800b5d0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	6039      	str	r1, [r7, #0]
 800b5da:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b5dc:	88fb      	ldrh	r3, [r7, #6]
 800b5de:	2b7f      	cmp	r3, #127	; 0x7f
 800b5e0:	d802      	bhi.n	800b5e8 <ff_convert+0x18>
		c = chr;
 800b5e2:	88fb      	ldrh	r3, [r7, #6]
 800b5e4:	81fb      	strh	r3, [r7, #14]
 800b5e6:	e025      	b.n	800b634 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00b      	beq.n	800b606 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b5ee:	88fb      	ldrh	r3, [r7, #6]
 800b5f0:	2bff      	cmp	r3, #255	; 0xff
 800b5f2:	d805      	bhi.n	800b600 <ff_convert+0x30>
 800b5f4:	88fb      	ldrh	r3, [r7, #6]
 800b5f6:	3b80      	subs	r3, #128	; 0x80
 800b5f8:	4a12      	ldr	r2, [pc, #72]	; (800b644 <ff_convert+0x74>)
 800b5fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5fe:	e000      	b.n	800b602 <ff_convert+0x32>
 800b600:	2300      	movs	r3, #0
 800b602:	81fb      	strh	r3, [r7, #14]
 800b604:	e016      	b.n	800b634 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b606:	2300      	movs	r3, #0
 800b608:	81fb      	strh	r3, [r7, #14]
 800b60a:	e009      	b.n	800b620 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b60c:	89fb      	ldrh	r3, [r7, #14]
 800b60e:	4a0d      	ldr	r2, [pc, #52]	; (800b644 <ff_convert+0x74>)
 800b610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b614:	88fa      	ldrh	r2, [r7, #6]
 800b616:	429a      	cmp	r2, r3
 800b618:	d006      	beq.n	800b628 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b61a:	89fb      	ldrh	r3, [r7, #14]
 800b61c:	3301      	adds	r3, #1
 800b61e:	81fb      	strh	r3, [r7, #14]
 800b620:	89fb      	ldrh	r3, [r7, #14]
 800b622:	2b7f      	cmp	r3, #127	; 0x7f
 800b624:	d9f2      	bls.n	800b60c <ff_convert+0x3c>
 800b626:	e000      	b.n	800b62a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b628:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b62a:	89fb      	ldrh	r3, [r7, #14]
 800b62c:	3380      	adds	r3, #128	; 0x80
 800b62e:	b29b      	uxth	r3, r3
 800b630:	b2db      	uxtb	r3, r3
 800b632:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b634:	89fb      	ldrh	r3, [r7, #14]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	0800c2a0 	.word	0x0800c2a0

0800b648 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b652:	88fb      	ldrh	r3, [r7, #6]
 800b654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b658:	d201      	bcs.n	800b65e <ff_wtoupper+0x16>
 800b65a:	4b3e      	ldr	r3, [pc, #248]	; (800b754 <ff_wtoupper+0x10c>)
 800b65c:	e000      	b.n	800b660 <ff_wtoupper+0x18>
 800b65e:	4b3e      	ldr	r3, [pc, #248]	; (800b758 <ff_wtoupper+0x110>)
 800b660:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	1c9a      	adds	r2, r3, #2
 800b666:	617a      	str	r2, [r7, #20]
 800b668:	881b      	ldrh	r3, [r3, #0]
 800b66a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b66c:	8a7b      	ldrh	r3, [r7, #18]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d068      	beq.n	800b744 <ff_wtoupper+0xfc>
 800b672:	88fa      	ldrh	r2, [r7, #6]
 800b674:	8a7b      	ldrh	r3, [r7, #18]
 800b676:	429a      	cmp	r2, r3
 800b678:	d364      	bcc.n	800b744 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	1c9a      	adds	r2, r3, #2
 800b67e:	617a      	str	r2, [r7, #20]
 800b680:	881b      	ldrh	r3, [r3, #0]
 800b682:	823b      	strh	r3, [r7, #16]
 800b684:	8a3b      	ldrh	r3, [r7, #16]
 800b686:	0a1b      	lsrs	r3, r3, #8
 800b688:	81fb      	strh	r3, [r7, #14]
 800b68a:	8a3b      	ldrh	r3, [r7, #16]
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b690:	88fa      	ldrh	r2, [r7, #6]
 800b692:	8a79      	ldrh	r1, [r7, #18]
 800b694:	8a3b      	ldrh	r3, [r7, #16]
 800b696:	440b      	add	r3, r1
 800b698:	429a      	cmp	r2, r3
 800b69a:	da49      	bge.n	800b730 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b69c:	89fb      	ldrh	r3, [r7, #14]
 800b69e:	2b08      	cmp	r3, #8
 800b6a0:	d84f      	bhi.n	800b742 <ff_wtoupper+0xfa>
 800b6a2:	a201      	add	r2, pc, #4	; (adr r2, 800b6a8 <ff_wtoupper+0x60>)
 800b6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a8:	0800b6cd 	.word	0x0800b6cd
 800b6ac:	0800b6df 	.word	0x0800b6df
 800b6b0:	0800b6f5 	.word	0x0800b6f5
 800b6b4:	0800b6fd 	.word	0x0800b6fd
 800b6b8:	0800b705 	.word	0x0800b705
 800b6bc:	0800b70d 	.word	0x0800b70d
 800b6c0:	0800b715 	.word	0x0800b715
 800b6c4:	0800b71d 	.word	0x0800b71d
 800b6c8:	0800b725 	.word	0x0800b725
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b6cc:	88fa      	ldrh	r2, [r7, #6]
 800b6ce:	8a7b      	ldrh	r3, [r7, #18]
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	005b      	lsls	r3, r3, #1
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	881b      	ldrh	r3, [r3, #0]
 800b6da:	80fb      	strh	r3, [r7, #6]
 800b6dc:	e027      	b.n	800b72e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b6de:	88fa      	ldrh	r2, [r7, #6]
 800b6e0:	8a7b      	ldrh	r3, [r7, #18]
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	f003 0301 	and.w	r3, r3, #1
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	88fa      	ldrh	r2, [r7, #6]
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	80fb      	strh	r3, [r7, #6]
 800b6f2:	e01c      	b.n	800b72e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b6f4:	88fb      	ldrh	r3, [r7, #6]
 800b6f6:	3b10      	subs	r3, #16
 800b6f8:	80fb      	strh	r3, [r7, #6]
 800b6fa:	e018      	b.n	800b72e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b6fc:	88fb      	ldrh	r3, [r7, #6]
 800b6fe:	3b20      	subs	r3, #32
 800b700:	80fb      	strh	r3, [r7, #6]
 800b702:	e014      	b.n	800b72e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b704:	88fb      	ldrh	r3, [r7, #6]
 800b706:	3b30      	subs	r3, #48	; 0x30
 800b708:	80fb      	strh	r3, [r7, #6]
 800b70a:	e010      	b.n	800b72e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b70c:	88fb      	ldrh	r3, [r7, #6]
 800b70e:	3b1a      	subs	r3, #26
 800b710:	80fb      	strh	r3, [r7, #6]
 800b712:	e00c      	b.n	800b72e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b714:	88fb      	ldrh	r3, [r7, #6]
 800b716:	3308      	adds	r3, #8
 800b718:	80fb      	strh	r3, [r7, #6]
 800b71a:	e008      	b.n	800b72e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b71c:	88fb      	ldrh	r3, [r7, #6]
 800b71e:	3b50      	subs	r3, #80	; 0x50
 800b720:	80fb      	strh	r3, [r7, #6]
 800b722:	e004      	b.n	800b72e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b724:	88fb      	ldrh	r3, [r7, #6]
 800b726:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b72a:	80fb      	strh	r3, [r7, #6]
 800b72c:	bf00      	nop
			}
			break;
 800b72e:	e008      	b.n	800b742 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b730:	89fb      	ldrh	r3, [r7, #14]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d195      	bne.n	800b662 <ff_wtoupper+0x1a>
 800b736:	8a3b      	ldrh	r3, [r7, #16]
 800b738:	005b      	lsls	r3, r3, #1
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	4413      	add	r3, r2
 800b73e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b740:	e78f      	b.n	800b662 <ff_wtoupper+0x1a>
			break;
 800b742:	bf00      	nop
	}

	return chr;
 800b744:	88fb      	ldrh	r3, [r7, #6]
}
 800b746:	4618      	mov	r0, r3
 800b748:	371c      	adds	r7, #28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	0800c3a0 	.word	0x0800c3a0
 800b758:	0800c594 	.word	0x0800c594

0800b75c <__errno>:
 800b75c:	4b01      	ldr	r3, [pc, #4]	; (800b764 <__errno+0x8>)
 800b75e:	6818      	ldr	r0, [r3, #0]
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	20000028 	.word	0x20000028

0800b768 <__libc_init_array>:
 800b768:	b570      	push	{r4, r5, r6, lr}
 800b76a:	4e0d      	ldr	r6, [pc, #52]	; (800b7a0 <__libc_init_array+0x38>)
 800b76c:	4c0d      	ldr	r4, [pc, #52]	; (800b7a4 <__libc_init_array+0x3c>)
 800b76e:	1ba4      	subs	r4, r4, r6
 800b770:	10a4      	asrs	r4, r4, #2
 800b772:	2500      	movs	r5, #0
 800b774:	42a5      	cmp	r5, r4
 800b776:	d109      	bne.n	800b78c <__libc_init_array+0x24>
 800b778:	4e0b      	ldr	r6, [pc, #44]	; (800b7a8 <__libc_init_array+0x40>)
 800b77a:	4c0c      	ldr	r4, [pc, #48]	; (800b7ac <__libc_init_array+0x44>)
 800b77c:	f000 fc98 	bl	800c0b0 <_init>
 800b780:	1ba4      	subs	r4, r4, r6
 800b782:	10a4      	asrs	r4, r4, #2
 800b784:	2500      	movs	r5, #0
 800b786:	42a5      	cmp	r5, r4
 800b788:	d105      	bne.n	800b796 <__libc_init_array+0x2e>
 800b78a:	bd70      	pop	{r4, r5, r6, pc}
 800b78c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b790:	4798      	blx	r3
 800b792:	3501      	adds	r5, #1
 800b794:	e7ee      	b.n	800b774 <__libc_init_array+0xc>
 800b796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b79a:	4798      	blx	r3
 800b79c:	3501      	adds	r5, #1
 800b79e:	e7f2      	b.n	800b786 <__libc_init_array+0x1e>
 800b7a0:	0800c68c 	.word	0x0800c68c
 800b7a4:	0800c68c 	.word	0x0800c68c
 800b7a8:	0800c68c 	.word	0x0800c68c
 800b7ac:	0800c690 	.word	0x0800c690

0800b7b0 <memset>:
 800b7b0:	4402      	add	r2, r0
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d100      	bne.n	800b7ba <memset+0xa>
 800b7b8:	4770      	bx	lr
 800b7ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b7be:	e7f9      	b.n	800b7b4 <memset+0x4>

0800b7c0 <siprintf>:
 800b7c0:	b40e      	push	{r1, r2, r3}
 800b7c2:	b500      	push	{lr}
 800b7c4:	b09c      	sub	sp, #112	; 0x70
 800b7c6:	ab1d      	add	r3, sp, #116	; 0x74
 800b7c8:	9002      	str	r0, [sp, #8]
 800b7ca:	9006      	str	r0, [sp, #24]
 800b7cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7d0:	4809      	ldr	r0, [pc, #36]	; (800b7f8 <siprintf+0x38>)
 800b7d2:	9107      	str	r1, [sp, #28]
 800b7d4:	9104      	str	r1, [sp, #16]
 800b7d6:	4909      	ldr	r1, [pc, #36]	; (800b7fc <siprintf+0x3c>)
 800b7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7dc:	9105      	str	r1, [sp, #20]
 800b7de:	6800      	ldr	r0, [r0, #0]
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	a902      	add	r1, sp, #8
 800b7e4:	f000 f980 	bl	800bae8 <_svfiprintf_r>
 800b7e8:	9b02      	ldr	r3, [sp, #8]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	701a      	strb	r2, [r3, #0]
 800b7ee:	b01c      	add	sp, #112	; 0x70
 800b7f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7f4:	b003      	add	sp, #12
 800b7f6:	4770      	bx	lr
 800b7f8:	20000028 	.word	0x20000028
 800b7fc:	ffff0208 	.word	0xffff0208

0800b800 <strncpy>:
 800b800:	b570      	push	{r4, r5, r6, lr}
 800b802:	3901      	subs	r1, #1
 800b804:	4604      	mov	r4, r0
 800b806:	b902      	cbnz	r2, 800b80a <strncpy+0xa>
 800b808:	bd70      	pop	{r4, r5, r6, pc}
 800b80a:	4623      	mov	r3, r4
 800b80c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800b810:	f803 5b01 	strb.w	r5, [r3], #1
 800b814:	1e56      	subs	r6, r2, #1
 800b816:	b92d      	cbnz	r5, 800b824 <strncpy+0x24>
 800b818:	4414      	add	r4, r2
 800b81a:	42a3      	cmp	r3, r4
 800b81c:	d0f4      	beq.n	800b808 <strncpy+0x8>
 800b81e:	f803 5b01 	strb.w	r5, [r3], #1
 800b822:	e7fa      	b.n	800b81a <strncpy+0x1a>
 800b824:	461c      	mov	r4, r3
 800b826:	4632      	mov	r2, r6
 800b828:	e7ed      	b.n	800b806 <strncpy+0x6>
	...

0800b82c <strtok>:
 800b82c:	4b13      	ldr	r3, [pc, #76]	; (800b87c <strtok+0x50>)
 800b82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b832:	681d      	ldr	r5, [r3, #0]
 800b834:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800b836:	4606      	mov	r6, r0
 800b838:	460f      	mov	r7, r1
 800b83a:	b9b4      	cbnz	r4, 800b86a <strtok+0x3e>
 800b83c:	2050      	movs	r0, #80	; 0x50
 800b83e:	f000 f849 	bl	800b8d4 <malloc>
 800b842:	65a8      	str	r0, [r5, #88]	; 0x58
 800b844:	e9c0 4400 	strd	r4, r4, [r0]
 800b848:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b84c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b850:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b854:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b858:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b85c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b860:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b864:	6184      	str	r4, [r0, #24]
 800b866:	7704      	strb	r4, [r0, #28]
 800b868:	6244      	str	r4, [r0, #36]	; 0x24
 800b86a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800b86c:	4639      	mov	r1, r7
 800b86e:	4630      	mov	r0, r6
 800b870:	2301      	movs	r3, #1
 800b872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b876:	f000 b803 	b.w	800b880 <__strtok_r>
 800b87a:	bf00      	nop
 800b87c:	20000028 	.word	0x20000028

0800b880 <__strtok_r>:
 800b880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b882:	b918      	cbnz	r0, 800b88c <__strtok_r+0xc>
 800b884:	6810      	ldr	r0, [r2, #0]
 800b886:	b908      	cbnz	r0, 800b88c <__strtok_r+0xc>
 800b888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b88a:	4620      	mov	r0, r4
 800b88c:	4604      	mov	r4, r0
 800b88e:	460f      	mov	r7, r1
 800b890:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b894:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b898:	b91e      	cbnz	r6, 800b8a2 <__strtok_r+0x22>
 800b89a:	b96d      	cbnz	r5, 800b8b8 <__strtok_r+0x38>
 800b89c:	6015      	str	r5, [r2, #0]
 800b89e:	4628      	mov	r0, r5
 800b8a0:	e7f2      	b.n	800b888 <__strtok_r+0x8>
 800b8a2:	42b5      	cmp	r5, r6
 800b8a4:	d1f6      	bne.n	800b894 <__strtok_r+0x14>
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1ef      	bne.n	800b88a <__strtok_r+0xa>
 800b8aa:	6014      	str	r4, [r2, #0]
 800b8ac:	7003      	strb	r3, [r0, #0]
 800b8ae:	e7eb      	b.n	800b888 <__strtok_r+0x8>
 800b8b0:	462b      	mov	r3, r5
 800b8b2:	e00d      	b.n	800b8d0 <__strtok_r+0x50>
 800b8b4:	b926      	cbnz	r6, 800b8c0 <__strtok_r+0x40>
 800b8b6:	461c      	mov	r4, r3
 800b8b8:	4623      	mov	r3, r4
 800b8ba:	460f      	mov	r7, r1
 800b8bc:	f813 5b01 	ldrb.w	r5, [r3], #1
 800b8c0:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b8c4:	42b5      	cmp	r5, r6
 800b8c6:	d1f5      	bne.n	800b8b4 <__strtok_r+0x34>
 800b8c8:	2d00      	cmp	r5, #0
 800b8ca:	d0f1      	beq.n	800b8b0 <__strtok_r+0x30>
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	7021      	strb	r1, [r4, #0]
 800b8d0:	6013      	str	r3, [r2, #0]
 800b8d2:	e7d9      	b.n	800b888 <__strtok_r+0x8>

0800b8d4 <malloc>:
 800b8d4:	4b02      	ldr	r3, [pc, #8]	; (800b8e0 <malloc+0xc>)
 800b8d6:	4601      	mov	r1, r0
 800b8d8:	6818      	ldr	r0, [r3, #0]
 800b8da:	f000 b851 	b.w	800b980 <_malloc_r>
 800b8de:	bf00      	nop
 800b8e0:	20000028 	.word	0x20000028

0800b8e4 <_free_r>:
 800b8e4:	b538      	push	{r3, r4, r5, lr}
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	d045      	beq.n	800b978 <_free_r+0x94>
 800b8ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8f0:	1f0c      	subs	r4, r1, #4
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	bfb8      	it	lt
 800b8f6:	18e4      	addlt	r4, r4, r3
 800b8f8:	f000 fbaa 	bl	800c050 <__malloc_lock>
 800b8fc:	4a1f      	ldr	r2, [pc, #124]	; (800b97c <_free_r+0x98>)
 800b8fe:	6813      	ldr	r3, [r2, #0]
 800b900:	4610      	mov	r0, r2
 800b902:	b933      	cbnz	r3, 800b912 <_free_r+0x2e>
 800b904:	6063      	str	r3, [r4, #4]
 800b906:	6014      	str	r4, [r2, #0]
 800b908:	4628      	mov	r0, r5
 800b90a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b90e:	f000 bba0 	b.w	800c052 <__malloc_unlock>
 800b912:	42a3      	cmp	r3, r4
 800b914:	d90c      	bls.n	800b930 <_free_r+0x4c>
 800b916:	6821      	ldr	r1, [r4, #0]
 800b918:	1862      	adds	r2, r4, r1
 800b91a:	4293      	cmp	r3, r2
 800b91c:	bf04      	itt	eq
 800b91e:	681a      	ldreq	r2, [r3, #0]
 800b920:	685b      	ldreq	r3, [r3, #4]
 800b922:	6063      	str	r3, [r4, #4]
 800b924:	bf04      	itt	eq
 800b926:	1852      	addeq	r2, r2, r1
 800b928:	6022      	streq	r2, [r4, #0]
 800b92a:	6004      	str	r4, [r0, #0]
 800b92c:	e7ec      	b.n	800b908 <_free_r+0x24>
 800b92e:	4613      	mov	r3, r2
 800b930:	685a      	ldr	r2, [r3, #4]
 800b932:	b10a      	cbz	r2, 800b938 <_free_r+0x54>
 800b934:	42a2      	cmp	r2, r4
 800b936:	d9fa      	bls.n	800b92e <_free_r+0x4a>
 800b938:	6819      	ldr	r1, [r3, #0]
 800b93a:	1858      	adds	r0, r3, r1
 800b93c:	42a0      	cmp	r0, r4
 800b93e:	d10b      	bne.n	800b958 <_free_r+0x74>
 800b940:	6820      	ldr	r0, [r4, #0]
 800b942:	4401      	add	r1, r0
 800b944:	1858      	adds	r0, r3, r1
 800b946:	4282      	cmp	r2, r0
 800b948:	6019      	str	r1, [r3, #0]
 800b94a:	d1dd      	bne.n	800b908 <_free_r+0x24>
 800b94c:	6810      	ldr	r0, [r2, #0]
 800b94e:	6852      	ldr	r2, [r2, #4]
 800b950:	605a      	str	r2, [r3, #4]
 800b952:	4401      	add	r1, r0
 800b954:	6019      	str	r1, [r3, #0]
 800b956:	e7d7      	b.n	800b908 <_free_r+0x24>
 800b958:	d902      	bls.n	800b960 <_free_r+0x7c>
 800b95a:	230c      	movs	r3, #12
 800b95c:	602b      	str	r3, [r5, #0]
 800b95e:	e7d3      	b.n	800b908 <_free_r+0x24>
 800b960:	6820      	ldr	r0, [r4, #0]
 800b962:	1821      	adds	r1, r4, r0
 800b964:	428a      	cmp	r2, r1
 800b966:	bf04      	itt	eq
 800b968:	6811      	ldreq	r1, [r2, #0]
 800b96a:	6852      	ldreq	r2, [r2, #4]
 800b96c:	6062      	str	r2, [r4, #4]
 800b96e:	bf04      	itt	eq
 800b970:	1809      	addeq	r1, r1, r0
 800b972:	6021      	streq	r1, [r4, #0]
 800b974:	605c      	str	r4, [r3, #4]
 800b976:	e7c7      	b.n	800b908 <_free_r+0x24>
 800b978:	bd38      	pop	{r3, r4, r5, pc}
 800b97a:	bf00      	nop
 800b97c:	2000033c 	.word	0x2000033c

0800b980 <_malloc_r>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	1ccd      	adds	r5, r1, #3
 800b984:	f025 0503 	bic.w	r5, r5, #3
 800b988:	3508      	adds	r5, #8
 800b98a:	2d0c      	cmp	r5, #12
 800b98c:	bf38      	it	cc
 800b98e:	250c      	movcc	r5, #12
 800b990:	2d00      	cmp	r5, #0
 800b992:	4606      	mov	r6, r0
 800b994:	db01      	blt.n	800b99a <_malloc_r+0x1a>
 800b996:	42a9      	cmp	r1, r5
 800b998:	d903      	bls.n	800b9a2 <_malloc_r+0x22>
 800b99a:	230c      	movs	r3, #12
 800b99c:	6033      	str	r3, [r6, #0]
 800b99e:	2000      	movs	r0, #0
 800b9a0:	bd70      	pop	{r4, r5, r6, pc}
 800b9a2:	f000 fb55 	bl	800c050 <__malloc_lock>
 800b9a6:	4a21      	ldr	r2, [pc, #132]	; (800ba2c <_malloc_r+0xac>)
 800b9a8:	6814      	ldr	r4, [r2, #0]
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	b991      	cbnz	r1, 800b9d4 <_malloc_r+0x54>
 800b9ae:	4c20      	ldr	r4, [pc, #128]	; (800ba30 <_malloc_r+0xb0>)
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	b91b      	cbnz	r3, 800b9bc <_malloc_r+0x3c>
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f000 fb17 	bl	800bfe8 <_sbrk_r>
 800b9ba:	6020      	str	r0, [r4, #0]
 800b9bc:	4629      	mov	r1, r5
 800b9be:	4630      	mov	r0, r6
 800b9c0:	f000 fb12 	bl	800bfe8 <_sbrk_r>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d124      	bne.n	800ba12 <_malloc_r+0x92>
 800b9c8:	230c      	movs	r3, #12
 800b9ca:	6033      	str	r3, [r6, #0]
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	f000 fb40 	bl	800c052 <__malloc_unlock>
 800b9d2:	e7e4      	b.n	800b99e <_malloc_r+0x1e>
 800b9d4:	680b      	ldr	r3, [r1, #0]
 800b9d6:	1b5b      	subs	r3, r3, r5
 800b9d8:	d418      	bmi.n	800ba0c <_malloc_r+0x8c>
 800b9da:	2b0b      	cmp	r3, #11
 800b9dc:	d90f      	bls.n	800b9fe <_malloc_r+0x7e>
 800b9de:	600b      	str	r3, [r1, #0]
 800b9e0:	50cd      	str	r5, [r1, r3]
 800b9e2:	18cc      	adds	r4, r1, r3
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	f000 fb34 	bl	800c052 <__malloc_unlock>
 800b9ea:	f104 000b 	add.w	r0, r4, #11
 800b9ee:	1d23      	adds	r3, r4, #4
 800b9f0:	f020 0007 	bic.w	r0, r0, #7
 800b9f4:	1ac3      	subs	r3, r0, r3
 800b9f6:	d0d3      	beq.n	800b9a0 <_malloc_r+0x20>
 800b9f8:	425a      	negs	r2, r3
 800b9fa:	50e2      	str	r2, [r4, r3]
 800b9fc:	e7d0      	b.n	800b9a0 <_malloc_r+0x20>
 800b9fe:	428c      	cmp	r4, r1
 800ba00:	684b      	ldr	r3, [r1, #4]
 800ba02:	bf16      	itet	ne
 800ba04:	6063      	strne	r3, [r4, #4]
 800ba06:	6013      	streq	r3, [r2, #0]
 800ba08:	460c      	movne	r4, r1
 800ba0a:	e7eb      	b.n	800b9e4 <_malloc_r+0x64>
 800ba0c:	460c      	mov	r4, r1
 800ba0e:	6849      	ldr	r1, [r1, #4]
 800ba10:	e7cc      	b.n	800b9ac <_malloc_r+0x2c>
 800ba12:	1cc4      	adds	r4, r0, #3
 800ba14:	f024 0403 	bic.w	r4, r4, #3
 800ba18:	42a0      	cmp	r0, r4
 800ba1a:	d005      	beq.n	800ba28 <_malloc_r+0xa8>
 800ba1c:	1a21      	subs	r1, r4, r0
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f000 fae2 	bl	800bfe8 <_sbrk_r>
 800ba24:	3001      	adds	r0, #1
 800ba26:	d0cf      	beq.n	800b9c8 <_malloc_r+0x48>
 800ba28:	6025      	str	r5, [r4, #0]
 800ba2a:	e7db      	b.n	800b9e4 <_malloc_r+0x64>
 800ba2c:	2000033c 	.word	0x2000033c
 800ba30:	20000340 	.word	0x20000340

0800ba34 <__ssputs_r>:
 800ba34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba38:	688e      	ldr	r6, [r1, #8]
 800ba3a:	429e      	cmp	r6, r3
 800ba3c:	4682      	mov	sl, r0
 800ba3e:	460c      	mov	r4, r1
 800ba40:	4690      	mov	r8, r2
 800ba42:	4699      	mov	r9, r3
 800ba44:	d837      	bhi.n	800bab6 <__ssputs_r+0x82>
 800ba46:	898a      	ldrh	r2, [r1, #12]
 800ba48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba4c:	d031      	beq.n	800bab2 <__ssputs_r+0x7e>
 800ba4e:	6825      	ldr	r5, [r4, #0]
 800ba50:	6909      	ldr	r1, [r1, #16]
 800ba52:	1a6f      	subs	r7, r5, r1
 800ba54:	6965      	ldr	r5, [r4, #20]
 800ba56:	2302      	movs	r3, #2
 800ba58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba5c:	fb95 f5f3 	sdiv	r5, r5, r3
 800ba60:	f109 0301 	add.w	r3, r9, #1
 800ba64:	443b      	add	r3, r7
 800ba66:	429d      	cmp	r5, r3
 800ba68:	bf38      	it	cc
 800ba6a:	461d      	movcc	r5, r3
 800ba6c:	0553      	lsls	r3, r2, #21
 800ba6e:	d530      	bpl.n	800bad2 <__ssputs_r+0x9e>
 800ba70:	4629      	mov	r1, r5
 800ba72:	f7ff ff85 	bl	800b980 <_malloc_r>
 800ba76:	4606      	mov	r6, r0
 800ba78:	b950      	cbnz	r0, 800ba90 <__ssputs_r+0x5c>
 800ba7a:	230c      	movs	r3, #12
 800ba7c:	f8ca 3000 	str.w	r3, [sl]
 800ba80:	89a3      	ldrh	r3, [r4, #12]
 800ba82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba86:	81a3      	strh	r3, [r4, #12]
 800ba88:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba90:	463a      	mov	r2, r7
 800ba92:	6921      	ldr	r1, [r4, #16]
 800ba94:	f000 fab8 	bl	800c008 <memcpy>
 800ba98:	89a3      	ldrh	r3, [r4, #12]
 800ba9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baa2:	81a3      	strh	r3, [r4, #12]
 800baa4:	6126      	str	r6, [r4, #16]
 800baa6:	6165      	str	r5, [r4, #20]
 800baa8:	443e      	add	r6, r7
 800baaa:	1bed      	subs	r5, r5, r7
 800baac:	6026      	str	r6, [r4, #0]
 800baae:	60a5      	str	r5, [r4, #8]
 800bab0:	464e      	mov	r6, r9
 800bab2:	454e      	cmp	r6, r9
 800bab4:	d900      	bls.n	800bab8 <__ssputs_r+0x84>
 800bab6:	464e      	mov	r6, r9
 800bab8:	4632      	mov	r2, r6
 800baba:	4641      	mov	r1, r8
 800babc:	6820      	ldr	r0, [r4, #0]
 800babe:	f000 faae 	bl	800c01e <memmove>
 800bac2:	68a3      	ldr	r3, [r4, #8]
 800bac4:	1b9b      	subs	r3, r3, r6
 800bac6:	60a3      	str	r3, [r4, #8]
 800bac8:	6823      	ldr	r3, [r4, #0]
 800baca:	441e      	add	r6, r3
 800bacc:	6026      	str	r6, [r4, #0]
 800bace:	2000      	movs	r0, #0
 800bad0:	e7dc      	b.n	800ba8c <__ssputs_r+0x58>
 800bad2:	462a      	mov	r2, r5
 800bad4:	f000 fabe 	bl	800c054 <_realloc_r>
 800bad8:	4606      	mov	r6, r0
 800bada:	2800      	cmp	r0, #0
 800badc:	d1e2      	bne.n	800baa4 <__ssputs_r+0x70>
 800bade:	6921      	ldr	r1, [r4, #16]
 800bae0:	4650      	mov	r0, sl
 800bae2:	f7ff feff 	bl	800b8e4 <_free_r>
 800bae6:	e7c8      	b.n	800ba7a <__ssputs_r+0x46>

0800bae8 <_svfiprintf_r>:
 800bae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baec:	461d      	mov	r5, r3
 800baee:	898b      	ldrh	r3, [r1, #12]
 800baf0:	061f      	lsls	r7, r3, #24
 800baf2:	b09d      	sub	sp, #116	; 0x74
 800baf4:	4680      	mov	r8, r0
 800baf6:	460c      	mov	r4, r1
 800baf8:	4616      	mov	r6, r2
 800bafa:	d50f      	bpl.n	800bb1c <_svfiprintf_r+0x34>
 800bafc:	690b      	ldr	r3, [r1, #16]
 800bafe:	b96b      	cbnz	r3, 800bb1c <_svfiprintf_r+0x34>
 800bb00:	2140      	movs	r1, #64	; 0x40
 800bb02:	f7ff ff3d 	bl	800b980 <_malloc_r>
 800bb06:	6020      	str	r0, [r4, #0]
 800bb08:	6120      	str	r0, [r4, #16]
 800bb0a:	b928      	cbnz	r0, 800bb18 <_svfiprintf_r+0x30>
 800bb0c:	230c      	movs	r3, #12
 800bb0e:	f8c8 3000 	str.w	r3, [r8]
 800bb12:	f04f 30ff 	mov.w	r0, #4294967295
 800bb16:	e0c8      	b.n	800bcaa <_svfiprintf_r+0x1c2>
 800bb18:	2340      	movs	r3, #64	; 0x40
 800bb1a:	6163      	str	r3, [r4, #20]
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb20:	2320      	movs	r3, #32
 800bb22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb26:	2330      	movs	r3, #48	; 0x30
 800bb28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb2c:	9503      	str	r5, [sp, #12]
 800bb2e:	f04f 0b01 	mov.w	fp, #1
 800bb32:	4637      	mov	r7, r6
 800bb34:	463d      	mov	r5, r7
 800bb36:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb3a:	b10b      	cbz	r3, 800bb40 <_svfiprintf_r+0x58>
 800bb3c:	2b25      	cmp	r3, #37	; 0x25
 800bb3e:	d13e      	bne.n	800bbbe <_svfiprintf_r+0xd6>
 800bb40:	ebb7 0a06 	subs.w	sl, r7, r6
 800bb44:	d00b      	beq.n	800bb5e <_svfiprintf_r+0x76>
 800bb46:	4653      	mov	r3, sl
 800bb48:	4632      	mov	r2, r6
 800bb4a:	4621      	mov	r1, r4
 800bb4c:	4640      	mov	r0, r8
 800bb4e:	f7ff ff71 	bl	800ba34 <__ssputs_r>
 800bb52:	3001      	adds	r0, #1
 800bb54:	f000 80a4 	beq.w	800bca0 <_svfiprintf_r+0x1b8>
 800bb58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5a:	4453      	add	r3, sl
 800bb5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb5e:	783b      	ldrb	r3, [r7, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 809d 	beq.w	800bca0 <_svfiprintf_r+0x1b8>
 800bb66:	2300      	movs	r3, #0
 800bb68:	f04f 32ff 	mov.w	r2, #4294967295
 800bb6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb70:	9304      	str	r3, [sp, #16]
 800bb72:	9307      	str	r3, [sp, #28]
 800bb74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb78:	931a      	str	r3, [sp, #104]	; 0x68
 800bb7a:	462f      	mov	r7, r5
 800bb7c:	2205      	movs	r2, #5
 800bb7e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bb82:	4850      	ldr	r0, [pc, #320]	; (800bcc4 <_svfiprintf_r+0x1dc>)
 800bb84:	f7f4 fb4c 	bl	8000220 <memchr>
 800bb88:	9b04      	ldr	r3, [sp, #16]
 800bb8a:	b9d0      	cbnz	r0, 800bbc2 <_svfiprintf_r+0xda>
 800bb8c:	06d9      	lsls	r1, r3, #27
 800bb8e:	bf44      	itt	mi
 800bb90:	2220      	movmi	r2, #32
 800bb92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb96:	071a      	lsls	r2, r3, #28
 800bb98:	bf44      	itt	mi
 800bb9a:	222b      	movmi	r2, #43	; 0x2b
 800bb9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bba0:	782a      	ldrb	r2, [r5, #0]
 800bba2:	2a2a      	cmp	r2, #42	; 0x2a
 800bba4:	d015      	beq.n	800bbd2 <_svfiprintf_r+0xea>
 800bba6:	9a07      	ldr	r2, [sp, #28]
 800bba8:	462f      	mov	r7, r5
 800bbaa:	2000      	movs	r0, #0
 800bbac:	250a      	movs	r5, #10
 800bbae:	4639      	mov	r1, r7
 800bbb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbb4:	3b30      	subs	r3, #48	; 0x30
 800bbb6:	2b09      	cmp	r3, #9
 800bbb8:	d94d      	bls.n	800bc56 <_svfiprintf_r+0x16e>
 800bbba:	b1b8      	cbz	r0, 800bbec <_svfiprintf_r+0x104>
 800bbbc:	e00f      	b.n	800bbde <_svfiprintf_r+0xf6>
 800bbbe:	462f      	mov	r7, r5
 800bbc0:	e7b8      	b.n	800bb34 <_svfiprintf_r+0x4c>
 800bbc2:	4a40      	ldr	r2, [pc, #256]	; (800bcc4 <_svfiprintf_r+0x1dc>)
 800bbc4:	1a80      	subs	r0, r0, r2
 800bbc6:	fa0b f000 	lsl.w	r0, fp, r0
 800bbca:	4318      	orrs	r0, r3
 800bbcc:	9004      	str	r0, [sp, #16]
 800bbce:	463d      	mov	r5, r7
 800bbd0:	e7d3      	b.n	800bb7a <_svfiprintf_r+0x92>
 800bbd2:	9a03      	ldr	r2, [sp, #12]
 800bbd4:	1d11      	adds	r1, r2, #4
 800bbd6:	6812      	ldr	r2, [r2, #0]
 800bbd8:	9103      	str	r1, [sp, #12]
 800bbda:	2a00      	cmp	r2, #0
 800bbdc:	db01      	blt.n	800bbe2 <_svfiprintf_r+0xfa>
 800bbde:	9207      	str	r2, [sp, #28]
 800bbe0:	e004      	b.n	800bbec <_svfiprintf_r+0x104>
 800bbe2:	4252      	negs	r2, r2
 800bbe4:	f043 0302 	orr.w	r3, r3, #2
 800bbe8:	9207      	str	r2, [sp, #28]
 800bbea:	9304      	str	r3, [sp, #16]
 800bbec:	783b      	ldrb	r3, [r7, #0]
 800bbee:	2b2e      	cmp	r3, #46	; 0x2e
 800bbf0:	d10c      	bne.n	800bc0c <_svfiprintf_r+0x124>
 800bbf2:	787b      	ldrb	r3, [r7, #1]
 800bbf4:	2b2a      	cmp	r3, #42	; 0x2a
 800bbf6:	d133      	bne.n	800bc60 <_svfiprintf_r+0x178>
 800bbf8:	9b03      	ldr	r3, [sp, #12]
 800bbfa:	1d1a      	adds	r2, r3, #4
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	9203      	str	r2, [sp, #12]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	bfb8      	it	lt
 800bc04:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc08:	3702      	adds	r7, #2
 800bc0a:	9305      	str	r3, [sp, #20]
 800bc0c:	4d2e      	ldr	r5, [pc, #184]	; (800bcc8 <_svfiprintf_r+0x1e0>)
 800bc0e:	7839      	ldrb	r1, [r7, #0]
 800bc10:	2203      	movs	r2, #3
 800bc12:	4628      	mov	r0, r5
 800bc14:	f7f4 fb04 	bl	8000220 <memchr>
 800bc18:	b138      	cbz	r0, 800bc2a <_svfiprintf_r+0x142>
 800bc1a:	2340      	movs	r3, #64	; 0x40
 800bc1c:	1b40      	subs	r0, r0, r5
 800bc1e:	fa03 f000 	lsl.w	r0, r3, r0
 800bc22:	9b04      	ldr	r3, [sp, #16]
 800bc24:	4303      	orrs	r3, r0
 800bc26:	3701      	adds	r7, #1
 800bc28:	9304      	str	r3, [sp, #16]
 800bc2a:	7839      	ldrb	r1, [r7, #0]
 800bc2c:	4827      	ldr	r0, [pc, #156]	; (800bccc <_svfiprintf_r+0x1e4>)
 800bc2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc32:	2206      	movs	r2, #6
 800bc34:	1c7e      	adds	r6, r7, #1
 800bc36:	f7f4 faf3 	bl	8000220 <memchr>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d038      	beq.n	800bcb0 <_svfiprintf_r+0x1c8>
 800bc3e:	4b24      	ldr	r3, [pc, #144]	; (800bcd0 <_svfiprintf_r+0x1e8>)
 800bc40:	bb13      	cbnz	r3, 800bc88 <_svfiprintf_r+0x1a0>
 800bc42:	9b03      	ldr	r3, [sp, #12]
 800bc44:	3307      	adds	r3, #7
 800bc46:	f023 0307 	bic.w	r3, r3, #7
 800bc4a:	3308      	adds	r3, #8
 800bc4c:	9303      	str	r3, [sp, #12]
 800bc4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc50:	444b      	add	r3, r9
 800bc52:	9309      	str	r3, [sp, #36]	; 0x24
 800bc54:	e76d      	b.n	800bb32 <_svfiprintf_r+0x4a>
 800bc56:	fb05 3202 	mla	r2, r5, r2, r3
 800bc5a:	2001      	movs	r0, #1
 800bc5c:	460f      	mov	r7, r1
 800bc5e:	e7a6      	b.n	800bbae <_svfiprintf_r+0xc6>
 800bc60:	2300      	movs	r3, #0
 800bc62:	3701      	adds	r7, #1
 800bc64:	9305      	str	r3, [sp, #20]
 800bc66:	4619      	mov	r1, r3
 800bc68:	250a      	movs	r5, #10
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc70:	3a30      	subs	r2, #48	; 0x30
 800bc72:	2a09      	cmp	r2, #9
 800bc74:	d903      	bls.n	800bc7e <_svfiprintf_r+0x196>
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d0c8      	beq.n	800bc0c <_svfiprintf_r+0x124>
 800bc7a:	9105      	str	r1, [sp, #20]
 800bc7c:	e7c6      	b.n	800bc0c <_svfiprintf_r+0x124>
 800bc7e:	fb05 2101 	mla	r1, r5, r1, r2
 800bc82:	2301      	movs	r3, #1
 800bc84:	4607      	mov	r7, r0
 800bc86:	e7f0      	b.n	800bc6a <_svfiprintf_r+0x182>
 800bc88:	ab03      	add	r3, sp, #12
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	4622      	mov	r2, r4
 800bc8e:	4b11      	ldr	r3, [pc, #68]	; (800bcd4 <_svfiprintf_r+0x1ec>)
 800bc90:	a904      	add	r1, sp, #16
 800bc92:	4640      	mov	r0, r8
 800bc94:	f3af 8000 	nop.w
 800bc98:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bc9c:	4681      	mov	r9, r0
 800bc9e:	d1d6      	bne.n	800bc4e <_svfiprintf_r+0x166>
 800bca0:	89a3      	ldrh	r3, [r4, #12]
 800bca2:	065b      	lsls	r3, r3, #25
 800bca4:	f53f af35 	bmi.w	800bb12 <_svfiprintf_r+0x2a>
 800bca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcaa:	b01d      	add	sp, #116	; 0x74
 800bcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb0:	ab03      	add	r3, sp, #12
 800bcb2:	9300      	str	r3, [sp, #0]
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	4b07      	ldr	r3, [pc, #28]	; (800bcd4 <_svfiprintf_r+0x1ec>)
 800bcb8:	a904      	add	r1, sp, #16
 800bcba:	4640      	mov	r0, r8
 800bcbc:	f000 f882 	bl	800bdc4 <_printf_i>
 800bcc0:	e7ea      	b.n	800bc98 <_svfiprintf_r+0x1b0>
 800bcc2:	bf00      	nop
 800bcc4:	0800c650 	.word	0x0800c650
 800bcc8:	0800c656 	.word	0x0800c656
 800bccc:	0800c65a 	.word	0x0800c65a
 800bcd0:	00000000 	.word	0x00000000
 800bcd4:	0800ba35 	.word	0x0800ba35

0800bcd8 <_printf_common>:
 800bcd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcdc:	4691      	mov	r9, r2
 800bcde:	461f      	mov	r7, r3
 800bce0:	688a      	ldr	r2, [r1, #8]
 800bce2:	690b      	ldr	r3, [r1, #16]
 800bce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bce8:	4293      	cmp	r3, r2
 800bcea:	bfb8      	it	lt
 800bcec:	4613      	movlt	r3, r2
 800bcee:	f8c9 3000 	str.w	r3, [r9]
 800bcf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	460c      	mov	r4, r1
 800bcfa:	b112      	cbz	r2, 800bd02 <_printf_common+0x2a>
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	f8c9 3000 	str.w	r3, [r9]
 800bd02:	6823      	ldr	r3, [r4, #0]
 800bd04:	0699      	lsls	r1, r3, #26
 800bd06:	bf42      	ittt	mi
 800bd08:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bd0c:	3302      	addmi	r3, #2
 800bd0e:	f8c9 3000 	strmi.w	r3, [r9]
 800bd12:	6825      	ldr	r5, [r4, #0]
 800bd14:	f015 0506 	ands.w	r5, r5, #6
 800bd18:	d107      	bne.n	800bd2a <_printf_common+0x52>
 800bd1a:	f104 0a19 	add.w	sl, r4, #25
 800bd1e:	68e3      	ldr	r3, [r4, #12]
 800bd20:	f8d9 2000 	ldr.w	r2, [r9]
 800bd24:	1a9b      	subs	r3, r3, r2
 800bd26:	42ab      	cmp	r3, r5
 800bd28:	dc28      	bgt.n	800bd7c <_printf_common+0xa4>
 800bd2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bd2e:	6822      	ldr	r2, [r4, #0]
 800bd30:	3300      	adds	r3, #0
 800bd32:	bf18      	it	ne
 800bd34:	2301      	movne	r3, #1
 800bd36:	0692      	lsls	r2, r2, #26
 800bd38:	d42d      	bmi.n	800bd96 <_printf_common+0xbe>
 800bd3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd3e:	4639      	mov	r1, r7
 800bd40:	4630      	mov	r0, r6
 800bd42:	47c0      	blx	r8
 800bd44:	3001      	adds	r0, #1
 800bd46:	d020      	beq.n	800bd8a <_printf_common+0xb2>
 800bd48:	6823      	ldr	r3, [r4, #0]
 800bd4a:	68e5      	ldr	r5, [r4, #12]
 800bd4c:	f8d9 2000 	ldr.w	r2, [r9]
 800bd50:	f003 0306 	and.w	r3, r3, #6
 800bd54:	2b04      	cmp	r3, #4
 800bd56:	bf08      	it	eq
 800bd58:	1aad      	subeq	r5, r5, r2
 800bd5a:	68a3      	ldr	r3, [r4, #8]
 800bd5c:	6922      	ldr	r2, [r4, #16]
 800bd5e:	bf0c      	ite	eq
 800bd60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd64:	2500      	movne	r5, #0
 800bd66:	4293      	cmp	r3, r2
 800bd68:	bfc4      	itt	gt
 800bd6a:	1a9b      	subgt	r3, r3, r2
 800bd6c:	18ed      	addgt	r5, r5, r3
 800bd6e:	f04f 0900 	mov.w	r9, #0
 800bd72:	341a      	adds	r4, #26
 800bd74:	454d      	cmp	r5, r9
 800bd76:	d11a      	bne.n	800bdae <_printf_common+0xd6>
 800bd78:	2000      	movs	r0, #0
 800bd7a:	e008      	b.n	800bd8e <_printf_common+0xb6>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	4652      	mov	r2, sl
 800bd80:	4639      	mov	r1, r7
 800bd82:	4630      	mov	r0, r6
 800bd84:	47c0      	blx	r8
 800bd86:	3001      	adds	r0, #1
 800bd88:	d103      	bne.n	800bd92 <_printf_common+0xba>
 800bd8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd92:	3501      	adds	r5, #1
 800bd94:	e7c3      	b.n	800bd1e <_printf_common+0x46>
 800bd96:	18e1      	adds	r1, r4, r3
 800bd98:	1c5a      	adds	r2, r3, #1
 800bd9a:	2030      	movs	r0, #48	; 0x30
 800bd9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bda0:	4422      	add	r2, r4
 800bda2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bda6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bdaa:	3302      	adds	r3, #2
 800bdac:	e7c5      	b.n	800bd3a <_printf_common+0x62>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	4622      	mov	r2, r4
 800bdb2:	4639      	mov	r1, r7
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	47c0      	blx	r8
 800bdb8:	3001      	adds	r0, #1
 800bdba:	d0e6      	beq.n	800bd8a <_printf_common+0xb2>
 800bdbc:	f109 0901 	add.w	r9, r9, #1
 800bdc0:	e7d8      	b.n	800bd74 <_printf_common+0x9c>
	...

0800bdc4 <_printf_i>:
 800bdc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bdcc:	460c      	mov	r4, r1
 800bdce:	7e09      	ldrb	r1, [r1, #24]
 800bdd0:	b085      	sub	sp, #20
 800bdd2:	296e      	cmp	r1, #110	; 0x6e
 800bdd4:	4617      	mov	r7, r2
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	4698      	mov	r8, r3
 800bdda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bddc:	f000 80b3 	beq.w	800bf46 <_printf_i+0x182>
 800bde0:	d822      	bhi.n	800be28 <_printf_i+0x64>
 800bde2:	2963      	cmp	r1, #99	; 0x63
 800bde4:	d036      	beq.n	800be54 <_printf_i+0x90>
 800bde6:	d80a      	bhi.n	800bdfe <_printf_i+0x3a>
 800bde8:	2900      	cmp	r1, #0
 800bdea:	f000 80b9 	beq.w	800bf60 <_printf_i+0x19c>
 800bdee:	2958      	cmp	r1, #88	; 0x58
 800bdf0:	f000 8083 	beq.w	800befa <_printf_i+0x136>
 800bdf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdf8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bdfc:	e032      	b.n	800be64 <_printf_i+0xa0>
 800bdfe:	2964      	cmp	r1, #100	; 0x64
 800be00:	d001      	beq.n	800be06 <_printf_i+0x42>
 800be02:	2969      	cmp	r1, #105	; 0x69
 800be04:	d1f6      	bne.n	800bdf4 <_printf_i+0x30>
 800be06:	6820      	ldr	r0, [r4, #0]
 800be08:	6813      	ldr	r3, [r2, #0]
 800be0a:	0605      	lsls	r5, r0, #24
 800be0c:	f103 0104 	add.w	r1, r3, #4
 800be10:	d52a      	bpl.n	800be68 <_printf_i+0xa4>
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	6011      	str	r1, [r2, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	da03      	bge.n	800be22 <_printf_i+0x5e>
 800be1a:	222d      	movs	r2, #45	; 0x2d
 800be1c:	425b      	negs	r3, r3
 800be1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800be22:	486f      	ldr	r0, [pc, #444]	; (800bfe0 <_printf_i+0x21c>)
 800be24:	220a      	movs	r2, #10
 800be26:	e039      	b.n	800be9c <_printf_i+0xd8>
 800be28:	2973      	cmp	r1, #115	; 0x73
 800be2a:	f000 809d 	beq.w	800bf68 <_printf_i+0x1a4>
 800be2e:	d808      	bhi.n	800be42 <_printf_i+0x7e>
 800be30:	296f      	cmp	r1, #111	; 0x6f
 800be32:	d020      	beq.n	800be76 <_printf_i+0xb2>
 800be34:	2970      	cmp	r1, #112	; 0x70
 800be36:	d1dd      	bne.n	800bdf4 <_printf_i+0x30>
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	f043 0320 	orr.w	r3, r3, #32
 800be3e:	6023      	str	r3, [r4, #0]
 800be40:	e003      	b.n	800be4a <_printf_i+0x86>
 800be42:	2975      	cmp	r1, #117	; 0x75
 800be44:	d017      	beq.n	800be76 <_printf_i+0xb2>
 800be46:	2978      	cmp	r1, #120	; 0x78
 800be48:	d1d4      	bne.n	800bdf4 <_printf_i+0x30>
 800be4a:	2378      	movs	r3, #120	; 0x78
 800be4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be50:	4864      	ldr	r0, [pc, #400]	; (800bfe4 <_printf_i+0x220>)
 800be52:	e055      	b.n	800bf00 <_printf_i+0x13c>
 800be54:	6813      	ldr	r3, [r2, #0]
 800be56:	1d19      	adds	r1, r3, #4
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6011      	str	r1, [r2, #0]
 800be5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be64:	2301      	movs	r3, #1
 800be66:	e08c      	b.n	800bf82 <_printf_i+0x1be>
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	6011      	str	r1, [r2, #0]
 800be6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be70:	bf18      	it	ne
 800be72:	b21b      	sxthne	r3, r3
 800be74:	e7cf      	b.n	800be16 <_printf_i+0x52>
 800be76:	6813      	ldr	r3, [r2, #0]
 800be78:	6825      	ldr	r5, [r4, #0]
 800be7a:	1d18      	adds	r0, r3, #4
 800be7c:	6010      	str	r0, [r2, #0]
 800be7e:	0628      	lsls	r0, r5, #24
 800be80:	d501      	bpl.n	800be86 <_printf_i+0xc2>
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	e002      	b.n	800be8c <_printf_i+0xc8>
 800be86:	0668      	lsls	r0, r5, #25
 800be88:	d5fb      	bpl.n	800be82 <_printf_i+0xbe>
 800be8a:	881b      	ldrh	r3, [r3, #0]
 800be8c:	4854      	ldr	r0, [pc, #336]	; (800bfe0 <_printf_i+0x21c>)
 800be8e:	296f      	cmp	r1, #111	; 0x6f
 800be90:	bf14      	ite	ne
 800be92:	220a      	movne	r2, #10
 800be94:	2208      	moveq	r2, #8
 800be96:	2100      	movs	r1, #0
 800be98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be9c:	6865      	ldr	r5, [r4, #4]
 800be9e:	60a5      	str	r5, [r4, #8]
 800bea0:	2d00      	cmp	r5, #0
 800bea2:	f2c0 8095 	blt.w	800bfd0 <_printf_i+0x20c>
 800bea6:	6821      	ldr	r1, [r4, #0]
 800bea8:	f021 0104 	bic.w	r1, r1, #4
 800beac:	6021      	str	r1, [r4, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d13d      	bne.n	800bf2e <_printf_i+0x16a>
 800beb2:	2d00      	cmp	r5, #0
 800beb4:	f040 808e 	bne.w	800bfd4 <_printf_i+0x210>
 800beb8:	4665      	mov	r5, ip
 800beba:	2a08      	cmp	r2, #8
 800bebc:	d10b      	bne.n	800bed6 <_printf_i+0x112>
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	07db      	lsls	r3, r3, #31
 800bec2:	d508      	bpl.n	800bed6 <_printf_i+0x112>
 800bec4:	6923      	ldr	r3, [r4, #16]
 800bec6:	6862      	ldr	r2, [r4, #4]
 800bec8:	429a      	cmp	r2, r3
 800beca:	bfde      	ittt	le
 800becc:	2330      	movle	r3, #48	; 0x30
 800bece:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bed2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bed6:	ebac 0305 	sub.w	r3, ip, r5
 800beda:	6123      	str	r3, [r4, #16]
 800bedc:	f8cd 8000 	str.w	r8, [sp]
 800bee0:	463b      	mov	r3, r7
 800bee2:	aa03      	add	r2, sp, #12
 800bee4:	4621      	mov	r1, r4
 800bee6:	4630      	mov	r0, r6
 800bee8:	f7ff fef6 	bl	800bcd8 <_printf_common>
 800beec:	3001      	adds	r0, #1
 800beee:	d14d      	bne.n	800bf8c <_printf_i+0x1c8>
 800bef0:	f04f 30ff 	mov.w	r0, #4294967295
 800bef4:	b005      	add	sp, #20
 800bef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800befa:	4839      	ldr	r0, [pc, #228]	; (800bfe0 <_printf_i+0x21c>)
 800befc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bf00:	6813      	ldr	r3, [r2, #0]
 800bf02:	6821      	ldr	r1, [r4, #0]
 800bf04:	1d1d      	adds	r5, r3, #4
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6015      	str	r5, [r2, #0]
 800bf0a:	060a      	lsls	r2, r1, #24
 800bf0c:	d50b      	bpl.n	800bf26 <_printf_i+0x162>
 800bf0e:	07ca      	lsls	r2, r1, #31
 800bf10:	bf44      	itt	mi
 800bf12:	f041 0120 	orrmi.w	r1, r1, #32
 800bf16:	6021      	strmi	r1, [r4, #0]
 800bf18:	b91b      	cbnz	r3, 800bf22 <_printf_i+0x15e>
 800bf1a:	6822      	ldr	r2, [r4, #0]
 800bf1c:	f022 0220 	bic.w	r2, r2, #32
 800bf20:	6022      	str	r2, [r4, #0]
 800bf22:	2210      	movs	r2, #16
 800bf24:	e7b7      	b.n	800be96 <_printf_i+0xd2>
 800bf26:	064d      	lsls	r5, r1, #25
 800bf28:	bf48      	it	mi
 800bf2a:	b29b      	uxthmi	r3, r3
 800bf2c:	e7ef      	b.n	800bf0e <_printf_i+0x14a>
 800bf2e:	4665      	mov	r5, ip
 800bf30:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf34:	fb02 3311 	mls	r3, r2, r1, r3
 800bf38:	5cc3      	ldrb	r3, [r0, r3]
 800bf3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bf3e:	460b      	mov	r3, r1
 800bf40:	2900      	cmp	r1, #0
 800bf42:	d1f5      	bne.n	800bf30 <_printf_i+0x16c>
 800bf44:	e7b9      	b.n	800beba <_printf_i+0xf6>
 800bf46:	6813      	ldr	r3, [r2, #0]
 800bf48:	6825      	ldr	r5, [r4, #0]
 800bf4a:	6961      	ldr	r1, [r4, #20]
 800bf4c:	1d18      	adds	r0, r3, #4
 800bf4e:	6010      	str	r0, [r2, #0]
 800bf50:	0628      	lsls	r0, r5, #24
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	d501      	bpl.n	800bf5a <_printf_i+0x196>
 800bf56:	6019      	str	r1, [r3, #0]
 800bf58:	e002      	b.n	800bf60 <_printf_i+0x19c>
 800bf5a:	066a      	lsls	r2, r5, #25
 800bf5c:	d5fb      	bpl.n	800bf56 <_printf_i+0x192>
 800bf5e:	8019      	strh	r1, [r3, #0]
 800bf60:	2300      	movs	r3, #0
 800bf62:	6123      	str	r3, [r4, #16]
 800bf64:	4665      	mov	r5, ip
 800bf66:	e7b9      	b.n	800bedc <_printf_i+0x118>
 800bf68:	6813      	ldr	r3, [r2, #0]
 800bf6a:	1d19      	adds	r1, r3, #4
 800bf6c:	6011      	str	r1, [r2, #0]
 800bf6e:	681d      	ldr	r5, [r3, #0]
 800bf70:	6862      	ldr	r2, [r4, #4]
 800bf72:	2100      	movs	r1, #0
 800bf74:	4628      	mov	r0, r5
 800bf76:	f7f4 f953 	bl	8000220 <memchr>
 800bf7a:	b108      	cbz	r0, 800bf80 <_printf_i+0x1bc>
 800bf7c:	1b40      	subs	r0, r0, r5
 800bf7e:	6060      	str	r0, [r4, #4]
 800bf80:	6863      	ldr	r3, [r4, #4]
 800bf82:	6123      	str	r3, [r4, #16]
 800bf84:	2300      	movs	r3, #0
 800bf86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf8a:	e7a7      	b.n	800bedc <_printf_i+0x118>
 800bf8c:	6923      	ldr	r3, [r4, #16]
 800bf8e:	462a      	mov	r2, r5
 800bf90:	4639      	mov	r1, r7
 800bf92:	4630      	mov	r0, r6
 800bf94:	47c0      	blx	r8
 800bf96:	3001      	adds	r0, #1
 800bf98:	d0aa      	beq.n	800bef0 <_printf_i+0x12c>
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	079b      	lsls	r3, r3, #30
 800bf9e:	d413      	bmi.n	800bfc8 <_printf_i+0x204>
 800bfa0:	68e0      	ldr	r0, [r4, #12]
 800bfa2:	9b03      	ldr	r3, [sp, #12]
 800bfa4:	4298      	cmp	r0, r3
 800bfa6:	bfb8      	it	lt
 800bfa8:	4618      	movlt	r0, r3
 800bfaa:	e7a3      	b.n	800bef4 <_printf_i+0x130>
 800bfac:	2301      	movs	r3, #1
 800bfae:	464a      	mov	r2, r9
 800bfb0:	4639      	mov	r1, r7
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	47c0      	blx	r8
 800bfb6:	3001      	adds	r0, #1
 800bfb8:	d09a      	beq.n	800bef0 <_printf_i+0x12c>
 800bfba:	3501      	adds	r5, #1
 800bfbc:	68e3      	ldr	r3, [r4, #12]
 800bfbe:	9a03      	ldr	r2, [sp, #12]
 800bfc0:	1a9b      	subs	r3, r3, r2
 800bfc2:	42ab      	cmp	r3, r5
 800bfc4:	dcf2      	bgt.n	800bfac <_printf_i+0x1e8>
 800bfc6:	e7eb      	b.n	800bfa0 <_printf_i+0x1dc>
 800bfc8:	2500      	movs	r5, #0
 800bfca:	f104 0919 	add.w	r9, r4, #25
 800bfce:	e7f5      	b.n	800bfbc <_printf_i+0x1f8>
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1ac      	bne.n	800bf2e <_printf_i+0x16a>
 800bfd4:	7803      	ldrb	r3, [r0, #0]
 800bfd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfde:	e76c      	b.n	800beba <_printf_i+0xf6>
 800bfe0:	0800c661 	.word	0x0800c661
 800bfe4:	0800c672 	.word	0x0800c672

0800bfe8 <_sbrk_r>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	4c06      	ldr	r4, [pc, #24]	; (800c004 <_sbrk_r+0x1c>)
 800bfec:	2300      	movs	r3, #0
 800bfee:	4605      	mov	r5, r0
 800bff0:	4608      	mov	r0, r1
 800bff2:	6023      	str	r3, [r4, #0]
 800bff4:	f7f6 ff22 	bl	8002e3c <_sbrk>
 800bff8:	1c43      	adds	r3, r0, #1
 800bffa:	d102      	bne.n	800c002 <_sbrk_r+0x1a>
 800bffc:	6823      	ldr	r3, [r4, #0]
 800bffe:	b103      	cbz	r3, 800c002 <_sbrk_r+0x1a>
 800c000:	602b      	str	r3, [r5, #0]
 800c002:	bd38      	pop	{r3, r4, r5, pc}
 800c004:	20005398 	.word	0x20005398

0800c008 <memcpy>:
 800c008:	b510      	push	{r4, lr}
 800c00a:	1e43      	subs	r3, r0, #1
 800c00c:	440a      	add	r2, r1
 800c00e:	4291      	cmp	r1, r2
 800c010:	d100      	bne.n	800c014 <memcpy+0xc>
 800c012:	bd10      	pop	{r4, pc}
 800c014:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c018:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c01c:	e7f7      	b.n	800c00e <memcpy+0x6>

0800c01e <memmove>:
 800c01e:	4288      	cmp	r0, r1
 800c020:	b510      	push	{r4, lr}
 800c022:	eb01 0302 	add.w	r3, r1, r2
 800c026:	d807      	bhi.n	800c038 <memmove+0x1a>
 800c028:	1e42      	subs	r2, r0, #1
 800c02a:	4299      	cmp	r1, r3
 800c02c:	d00a      	beq.n	800c044 <memmove+0x26>
 800c02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c032:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c036:	e7f8      	b.n	800c02a <memmove+0xc>
 800c038:	4283      	cmp	r3, r0
 800c03a:	d9f5      	bls.n	800c028 <memmove+0xa>
 800c03c:	1881      	adds	r1, r0, r2
 800c03e:	1ad2      	subs	r2, r2, r3
 800c040:	42d3      	cmn	r3, r2
 800c042:	d100      	bne.n	800c046 <memmove+0x28>
 800c044:	bd10      	pop	{r4, pc}
 800c046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c04a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c04e:	e7f7      	b.n	800c040 <memmove+0x22>

0800c050 <__malloc_lock>:
 800c050:	4770      	bx	lr

0800c052 <__malloc_unlock>:
 800c052:	4770      	bx	lr

0800c054 <_realloc_r>:
 800c054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c056:	4607      	mov	r7, r0
 800c058:	4614      	mov	r4, r2
 800c05a:	460e      	mov	r6, r1
 800c05c:	b921      	cbnz	r1, 800c068 <_realloc_r+0x14>
 800c05e:	4611      	mov	r1, r2
 800c060:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c064:	f7ff bc8c 	b.w	800b980 <_malloc_r>
 800c068:	b922      	cbnz	r2, 800c074 <_realloc_r+0x20>
 800c06a:	f7ff fc3b 	bl	800b8e4 <_free_r>
 800c06e:	4625      	mov	r5, r4
 800c070:	4628      	mov	r0, r5
 800c072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c074:	f000 f814 	bl	800c0a0 <_malloc_usable_size_r>
 800c078:	42a0      	cmp	r0, r4
 800c07a:	d20f      	bcs.n	800c09c <_realloc_r+0x48>
 800c07c:	4621      	mov	r1, r4
 800c07e:	4638      	mov	r0, r7
 800c080:	f7ff fc7e 	bl	800b980 <_malloc_r>
 800c084:	4605      	mov	r5, r0
 800c086:	2800      	cmp	r0, #0
 800c088:	d0f2      	beq.n	800c070 <_realloc_r+0x1c>
 800c08a:	4631      	mov	r1, r6
 800c08c:	4622      	mov	r2, r4
 800c08e:	f7ff ffbb 	bl	800c008 <memcpy>
 800c092:	4631      	mov	r1, r6
 800c094:	4638      	mov	r0, r7
 800c096:	f7ff fc25 	bl	800b8e4 <_free_r>
 800c09a:	e7e9      	b.n	800c070 <_realloc_r+0x1c>
 800c09c:	4635      	mov	r5, r6
 800c09e:	e7e7      	b.n	800c070 <_realloc_r+0x1c>

0800c0a0 <_malloc_usable_size_r>:
 800c0a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0a4:	1f18      	subs	r0, r3, #4
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	bfbc      	itt	lt
 800c0aa:	580b      	ldrlt	r3, [r1, r0]
 800c0ac:	18c0      	addlt	r0, r0, r3
 800c0ae:	4770      	bx	lr

0800c0b0 <_init>:
 800c0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b2:	bf00      	nop
 800c0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b6:	bc08      	pop	{r3}
 800c0b8:	469e      	mov	lr, r3
 800c0ba:	4770      	bx	lr

0800c0bc <_fini>:
 800c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0be:	bf00      	nop
 800c0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0c2:	bc08      	pop	{r3}
 800c0c4:	469e      	mov	lr, r3
 800c0c6:	4770      	bx	lr
