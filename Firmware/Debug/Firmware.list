
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007710  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  080078e0  080078e0  000178e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e14  08007e14  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e1c  08007e1c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e1c  08007e1c  00017e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e20  08007e20  00017e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047f8  20000088  08007eac  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004880  08007eac  00024880  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d47  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002686  00000000  00000000  00030dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c60  00000000  00000000  00033488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b28  00000000  00000000  000340e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022cb2  00000000  00000000  00034c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c8b2  00000000  00000000  000578c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb363  00000000  00000000  00064174  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012f4d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003600  00000000  00000000  0012f554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080078c8 	.word	0x080078c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080078c8 	.word	0x080078c8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da6:	4802      	ldr	r0, [pc, #8]	; (8000db0 <SELECT+0x14>)
 8000da8:	f001 fb6a 	bl	8002480 <HAL_GPIO_WritePin>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40020c00 	.word	0x40020c00

08000db4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dbe:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <DESELECT+0x14>)
 8000dc0:	f001 fb5e 	bl	8002480 <HAL_GPIO_WritePin>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40020c00 	.word	0x40020c00

08000dcc <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000dd6:	bf00      	nop
 8000dd8:	4808      	ldr	r0, [pc, #32]	; (8000dfc <SPI_TxByte+0x30>)
 8000dda:	f002 fb6b 	bl	80034b4 <HAL_SPI_GetState>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d1f9      	bne.n	8000dd8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000de4:	1df9      	adds	r1, r7, #7
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	2201      	movs	r2, #1
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <SPI_TxByte+0x30>)
 8000dee:	f002 f88b 	bl	8002f08 <HAL_SPI_Transmit>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20001778 	.word	0x20001778

08000e00 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000e06:	23ff      	movs	r3, #255	; 0xff
 8000e08:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000e0e:	bf00      	nop
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <SPI_RxByte+0x38>)
 8000e12:	f002 fb4f 	bl	80034b4 <HAL_SPI_GetState>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d1f9      	bne.n	8000e10 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000e1c:	1dba      	adds	r2, r7, #6
 8000e1e:	1df9      	adds	r1, r7, #7
 8000e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2301      	movs	r3, #1
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <SPI_RxByte+0x38>)
 8000e2a:	f002 f9a1 	bl	8003170 <HAL_SPI_TransmitReceive>
  
  return data;
 8000e2e:	79bb      	ldrb	r3, [r7, #6]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20001778 	.word	0x20001778

08000e3c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000e44:	f7ff ffdc 	bl	8000e00 <SPI_RxByte>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	701a      	strb	r2, [r3, #0]
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <SD_ReadyWait+0x34>)
 8000e60:	2232      	movs	r2, #50	; 0x32
 8000e62:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000e64:	f7ff ffcc 	bl	8000e00 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000e68:	f7ff ffca 	bl	8000e00 <SPI_RxByte>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2bff      	cmp	r3, #255	; 0xff
 8000e74:	d004      	beq.n	8000e80 <SD_ReadyWait+0x28>
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SD_ReadyWait+0x34>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f3      	bne.n	8000e68 <SD_ReadyWait+0x10>
  
  return res;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20002804 	.word	0x20002804

08000e90 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000e96:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e9a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000e9c:	f7ff ff8a 	bl	8000db4 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	e005      	b.n	8000eb2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000ea6:	20ff      	movs	r0, #255	; 0xff
 8000ea8:	f7ff ff90 	bl	8000dcc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	2b09      	cmp	r3, #9
 8000eb6:	ddf6      	ble.n	8000ea6 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000eb8:	f7ff ff70 	bl	8000d9c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000ebc:	2340      	movs	r3, #64	; 0x40
 8000ebe:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000ed0:	2395      	movs	r3, #149	; 0x95
 8000ed2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	e009      	b.n	8000eee <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000eda:	1d3a      	adds	r2, r7, #4
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff72 	bl	8000dcc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	ddf2      	ble.n	8000eda <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000ef4:	e002      	b.n	8000efc <SD_PowerOn+0x6c>
  {
    Count--;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000efc:	f7ff ff80 	bl	8000e00 <SPI_RxByte>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d002      	beq.n	8000f0c <SD_PowerOn+0x7c>
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1f4      	bne.n	8000ef6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000f0c:	f7ff ff52 	bl	8000db4 <DESELECT>
  SPI_TxByte(0XFF);
 8000f10:	20ff      	movs	r0, #255	; 0xff
 8000f12:	f7ff ff5b 	bl	8000dcc <SPI_TxByte>
  
  PowerFlag = 1;
 8000f16:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <SD_PowerOn+0x94>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200000a5 	.word	0x200000a5

08000f28 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <SD_PowerOff+0x14>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	200000a5 	.word	0x200000a5

08000f40 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <SD_CheckPower+0x14>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200000a5 	.word	0x200000a5

08000f58 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <SD_RxDataBlock+0x68>)
 8000f64:	220a      	movs	r2, #10
 8000f66:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000f68:	f7ff ff4a 	bl	8000e00 <SPI_RxByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2bff      	cmp	r3, #255	; 0xff
 8000f74:	d104      	bne.n	8000f80 <SD_RxDataBlock+0x28>
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <SD_RxDataBlock+0x68>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f3      	bne.n	8000f68 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2bfe      	cmp	r3, #254	; 0xfe
 8000f84:	d001      	beq.n	8000f8a <SD_RxDataBlock+0x32>
    return FALSE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e016      	b.n	8000fb8 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff53 	bl	8000e3c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff4d 	bl	8000e3c <SPI_RxBytePtr>
  } while(btr -= 2);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1ed      	bne.n	8000f8a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000fae:	f7ff ff27 	bl	8000e00 <SPI_RxByte>
  SPI_RxByte();
 8000fb2:	f7ff ff25 	bl	8000e00 <SPI_RxByte>
  
  return TRUE;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20002805 	.word	0x20002805

08000fc4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000fd4:	f7ff ff40 	bl	8000e58 <SD_ReadyWait>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2bff      	cmp	r3, #255	; 0xff
 8000fdc:	d001      	beq.n	8000fe2 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e040      	b.n	8001064 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fef1 	bl	8000dcc <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	2bfd      	cmp	r3, #253	; 0xfd
 8000fee:	d031      	beq.n	8001054 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fee5 	bl	8000dcc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fede 	bl	8000dcc <SPI_TxByte>
    } while (--wc);
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	3b01      	subs	r3, #1
 8001014:	73bb      	strb	r3, [r7, #14]
 8001016:	7bbb      	ldrb	r3, [r7, #14]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1eb      	bne.n	8000ff4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 800101c:	f7ff fef0 	bl	8000e00 <SPI_RxByte>
    SPI_RxByte();
 8001020:	f7ff feee 	bl	8000e00 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001024:	e00b      	b.n	800103e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001026:	f7ff feeb 	bl	8000e00 <SPI_RxByte>
 800102a:	4603      	mov	r3, r0
 800102c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	2b05      	cmp	r3, #5
 8001036:	d006      	beq.n	8001046 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	3301      	adds	r3, #1
 800103c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	2b40      	cmp	r3, #64	; 0x40
 8001042:	d9f0      	bls.n	8001026 <SD_TxDataBlock+0x62>
 8001044:	e000      	b.n	8001048 <SD_TxDataBlock+0x84>
        break;
 8001046:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001048:	bf00      	nop
 800104a:	f7ff fed9 	bl	8000e00 <SPI_RxByte>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0fa      	beq.n	800104a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	2b05      	cmp	r3, #5
 800105c:	d101      	bne.n	8001062 <SD_TxDataBlock+0x9e>
    return TRUE;
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001078:	f7ff feee 	bl	8000e58 <SD_ReadyWait>
 800107c:	4603      	mov	r3, r0
 800107e:	2bff      	cmp	r3, #255	; 0xff
 8001080:	d001      	beq.n	8001086 <SD_SendCmd+0x1a>
    return 0xFF;
 8001082:	23ff      	movs	r3, #255	; 0xff
 8001084:	e040      	b.n	8001108 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fe9f 	bl	8000dcc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	0e1b      	lsrs	r3, r3, #24
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe99 	bl	8000dcc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	0c1b      	lsrs	r3, r3, #16
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fe93 	bl	8000dcc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fe8d 	bl	8000dcc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fe88 	bl	8000dcc <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b40      	cmp	r3, #64	; 0x40
 80010c4:	d101      	bne.n	80010ca <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80010c6:	2395      	movs	r3, #149	; 0x95
 80010c8:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b48      	cmp	r3, #72	; 0x48
 80010ce:	d101      	bne.n	80010d4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80010d0:	2387      	movs	r3, #135	; 0x87
 80010d2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fe78 	bl	8000dcc <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b4c      	cmp	r3, #76	; 0x4c
 80010e0:	d101      	bne.n	80010e6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80010e2:	f7ff fe8d 	bl	8000e00 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80010e6:	230a      	movs	r3, #10
 80010e8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80010ea:	f7ff fe89 	bl	8000e00 <SPI_RxByte>
 80010ee:	4603      	mov	r3, r0
 80010f0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80010f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da05      	bge.n	8001106 <SD_SendCmd+0x9a>
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	73bb      	strb	r3, [r7, #14]
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f1      	bne.n	80010ea <SD_SendCmd+0x7e>
  
  return res;
 8001106:	7b7b      	ldrb	r3, [r7, #13]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001120:	2301      	movs	r3, #1
 8001122:	e0d5      	b.n	80012d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001124:	4b6c      	ldr	r3, [pc, #432]	; (80012d8 <SD_disk_initialize+0x1c8>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <SD_disk_initialize+0x2a>
    return Stat;        
 8001132:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <SD_disk_initialize+0x1c8>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	e0ca      	b.n	80012d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800113a:	f7ff fea9 	bl	8000e90 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800113e:	f7ff fe2d 	bl	8000d9c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001146:	2100      	movs	r1, #0
 8001148:	2040      	movs	r0, #64	; 0x40
 800114a:	f7ff ff8f 	bl	800106c <SD_SendCmd>
 800114e:	4603      	mov	r3, r0
 8001150:	2b01      	cmp	r3, #1
 8001152:	f040 80a5 	bne.w	80012a0 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001156:	4b61      	ldr	r3, [pc, #388]	; (80012dc <SD_disk_initialize+0x1cc>)
 8001158:	2264      	movs	r2, #100	; 0x64
 800115a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800115c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001160:	2048      	movs	r0, #72	; 0x48
 8001162:	f7ff ff83 	bl	800106c <SD_SendCmd>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d158      	bne.n	800121e <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e00c      	b.n	800118c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001172:	7bfc      	ldrb	r4, [r7, #15]
 8001174:	f7ff fe44 	bl	8000e00 <SPI_RxByte>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4423      	add	r3, r4
 8001182:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	3301      	adds	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2b03      	cmp	r3, #3
 8001190:	d9ef      	bls.n	8001172 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001192:	7abb      	ldrb	r3, [r7, #10]
 8001194:	2b01      	cmp	r3, #1
 8001196:	f040 8083 	bne.w	80012a0 <SD_disk_initialize+0x190>
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	2baa      	cmp	r3, #170	; 0xaa
 800119e:	d17f      	bne.n	80012a0 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80011a0:	2100      	movs	r1, #0
 80011a2:	2077      	movs	r0, #119	; 0x77
 80011a4:	f7ff ff62 	bl	800106c <SD_SendCmd>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d807      	bhi.n	80011be <SD_disk_initialize+0xae>
 80011ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011b2:	2069      	movs	r0, #105	; 0x69
 80011b4:	f7ff ff5a 	bl	800106c <SD_SendCmd>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <SD_disk_initialize+0x1cc>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1eb      	bne.n	80011a0 <SD_disk_initialize+0x90>
 80011c8:	e000      	b.n	80011cc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80011ca:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <SD_disk_initialize+0x1cc>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d064      	beq.n	80012a0 <SD_disk_initialize+0x190>
 80011d6:	2100      	movs	r1, #0
 80011d8:	207a      	movs	r0, #122	; 0x7a
 80011da:	f7ff ff47 	bl	800106c <SD_SendCmd>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d15d      	bne.n	80012a0 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e00c      	b.n	8001204 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80011ea:	7bfc      	ldrb	r4, [r7, #15]
 80011ec:	f7ff fe08 	bl	8000e00 <SPI_RxByte>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4423      	add	r3, r4
 80011fa:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	3301      	adds	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d9ef      	bls.n	80011ea <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800120a:	7a3b      	ldrb	r3, [r7, #8]
 800120c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SD_disk_initialize+0x108>
 8001214:	2306      	movs	r3, #6
 8001216:	e000      	b.n	800121a <SD_disk_initialize+0x10a>
 8001218:	2302      	movs	r3, #2
 800121a:	73bb      	strb	r3, [r7, #14]
 800121c:	e040      	b.n	80012a0 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800121e:	2100      	movs	r1, #0
 8001220:	2077      	movs	r0, #119	; 0x77
 8001222:	f7ff ff23 	bl	800106c <SD_SendCmd>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d808      	bhi.n	800123e <SD_disk_initialize+0x12e>
 800122c:	2100      	movs	r1, #0
 800122e:	2069      	movs	r0, #105	; 0x69
 8001230:	f7ff ff1c 	bl	800106c <SD_SendCmd>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d801      	bhi.n	800123e <SD_disk_initialize+0x12e>
 800123a:	2302      	movs	r3, #2
 800123c:	e000      	b.n	8001240 <SD_disk_initialize+0x130>
 800123e:	2301      	movs	r3, #1
 8001240:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001242:	7bbb      	ldrb	r3, [r7, #14]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d10e      	bne.n	8001266 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001248:	2100      	movs	r1, #0
 800124a:	2077      	movs	r0, #119	; 0x77
 800124c:	f7ff ff0e 	bl	800106c <SD_SendCmd>
 8001250:	4603      	mov	r3, r0
 8001252:	2b01      	cmp	r3, #1
 8001254:	d80e      	bhi.n	8001274 <SD_disk_initialize+0x164>
 8001256:	2100      	movs	r1, #0
 8001258:	2069      	movs	r0, #105	; 0x69
 800125a:	f7ff ff07 	bl	800106c <SD_SendCmd>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d107      	bne.n	8001274 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001264:	e00d      	b.n	8001282 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001266:	2100      	movs	r1, #0
 8001268:	2041      	movs	r0, #65	; 0x41
 800126a:	f7ff feff 	bl	800106c <SD_SendCmd>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <SD_disk_initialize+0x1cc>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1e1      	bne.n	8001242 <SD_disk_initialize+0x132>
 800127e:	e000      	b.n	8001282 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001280:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <SD_disk_initialize+0x1cc>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d007      	beq.n	800129c <SD_disk_initialize+0x18c>
 800128c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001290:	2050      	movs	r0, #80	; 0x50
 8001292:	f7ff feeb 	bl	800106c <SD_SendCmd>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80012a0:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <SD_disk_initialize+0x1d0>)
 80012a2:	7bbb      	ldrb	r3, [r7, #14]
 80012a4:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80012a6:	f7ff fd85 	bl	8000db4 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80012aa:	f7ff fda9 	bl	8000e00 <SPI_RxByte>
  
  if (type) 
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d008      	beq.n	80012c6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <SD_disk_initialize+0x1c8>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SD_disk_initialize+0x1c8>)
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e001      	b.n	80012ca <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80012c6:	f7ff fe2f 	bl	8000f28 <SD_PowerOff>
  }
  
  return Stat;
 80012ca:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <SD_disk_initialize+0x1c8>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2db      	uxtb	r3, r3
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20002805 	.word	0x20002805
 80012e0:	200000a4 	.word	0x200000a4

080012e4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80012f4:	2301      	movs	r3, #1
 80012f6:	e002      	b.n	80012fe <SD_disk_status+0x1a>
  
  return Stat;
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <SD_disk_status+0x28>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000000 	.word	0x20000000

08001310 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <SD_disk_read+0x1c>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <SD_disk_read+0x20>
    return RES_PARERR;
 800132c:	2304      	movs	r3, #4
 800132e:	e051      	b.n	80013d4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <SD_disk_read+0xcc>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800133e:	2303      	movs	r3, #3
 8001340:	e048      	b.n	80013d4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001342:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <SD_disk_read+0xd0>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	025b      	lsls	r3, r3, #9
 8001352:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001354:	f7ff fd22 	bl	8000d9c <SELECT>
  
  if (count == 1) 
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d111      	bne.n	8001382 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	2051      	movs	r0, #81	; 0x51
 8001362:	f7ff fe83 	bl	800106c <SD_SendCmd>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d129      	bne.n	80013c0 <SD_disk_read+0xb0>
 800136c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001370:	68b8      	ldr	r0, [r7, #8]
 8001372:	f7ff fdf1 	bl	8000f58 <SD_RxDataBlock>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d021      	beq.n	80013c0 <SD_disk_read+0xb0>
      count = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	e01e      	b.n	80013c0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	2052      	movs	r0, #82	; 0x52
 8001386:	f7ff fe71 	bl	800106c <SD_SendCmd>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d117      	bne.n	80013c0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f7ff fddf 	bl	8000f58 <SD_RxDataBlock>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00a      	beq.n	80013b6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013a6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1ed      	bne.n	8001390 <SD_disk_read+0x80>
 80013b4:	e000      	b.n	80013b8 <SD_disk_read+0xa8>
          break;
 80013b6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80013b8:	2100      	movs	r1, #0
 80013ba:	204c      	movs	r0, #76	; 0x4c
 80013bc:	f7ff fe56 	bl	800106c <SD_SendCmd>
    }
  }
  
  DESELECT();
 80013c0:	f7ff fcf8 	bl	8000db4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80013c4:	f7ff fd1c 	bl	8000e00 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	bf14      	ite	ne
 80013ce:	2301      	movne	r3, #1
 80013d0:	2300      	moveq	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000000 	.word	0x20000000
 80013e0:	200000a4 	.word	0x200000a4

080013e4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <SD_disk_write+0x1c>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <SD_disk_write+0x20>
    return RES_PARERR;
 8001400:	2304      	movs	r3, #4
 8001402:	e06b      	b.n	80014dc <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001404:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <SD_disk_write+0x100>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001412:	2303      	movs	r3, #3
 8001414:	e062      	b.n	80014dc <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001416:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <SD_disk_write+0x100>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001424:	2302      	movs	r3, #2
 8001426:	e059      	b.n	80014dc <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <SD_disk_write+0x104>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	025b      	lsls	r3, r3, #9
 8001438:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800143a:	f7ff fcaf 	bl	8000d9c <SELECT>
  
  if (count == 1) 
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d110      	bne.n	8001466 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	2058      	movs	r0, #88	; 0x58
 8001448:	f7ff fe10 	bl	800106c <SD_SendCmd>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d13a      	bne.n	80014c8 <SD_disk_write+0xe4>
 8001452:	21fe      	movs	r1, #254	; 0xfe
 8001454:	68b8      	ldr	r0, [r7, #8]
 8001456:	f7ff fdb5 	bl	8000fc4 <SD_TxDataBlock>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d033      	beq.n	80014c8 <SD_disk_write+0xe4>
      count = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	e030      	b.n	80014c8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <SD_disk_write+0x104>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001472:	2100      	movs	r1, #0
 8001474:	2077      	movs	r0, #119	; 0x77
 8001476:	f7ff fdf9 	bl	800106c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	2057      	movs	r0, #87	; 0x57
 800147e:	f7ff fdf5 	bl	800106c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	2059      	movs	r0, #89	; 0x59
 8001486:	f7ff fdf1 	bl	800106c <SD_SendCmd>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d11b      	bne.n	80014c8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001490:	21fc      	movs	r1, #252	; 0xfc
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	f7ff fd96 	bl	8000fc4 <SD_TxDataBlock>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00a      	beq.n	80014b4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014a4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1ee      	bne.n	8001490 <SD_disk_write+0xac>
 80014b2:	e000      	b.n	80014b6 <SD_disk_write+0xd2>
          break;
 80014b4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80014b6:	21fd      	movs	r1, #253	; 0xfd
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff fd83 	bl	8000fc4 <SD_TxDataBlock>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80014c8:	f7ff fc74 	bl	8000db4 <DESELECT>
  SPI_RxByte();
 80014cc:	f7ff fc98 	bl	8000e00 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bf14      	ite	ne
 80014d6:	2301      	movne	r3, #1
 80014d8:	2300      	moveq	r3, #0
 80014da:	b2db      	uxtb	r3, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000000 	.word	0x20000000
 80014e8:	200000a4 	.word	0x200000a4

080014ec <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b08b      	sub	sp, #44	; 0x2c
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	603a      	str	r2, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	460b      	mov	r3, r1
 80014fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001506:	2304      	movs	r3, #4
 8001508:	e117      	b.n	800173a <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001510:	79bb      	ldrb	r3, [r7, #6]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d126      	bne.n	8001564 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d00e      	beq.n	800153c <SD_disk_ioctl+0x50>
 800151e:	2b02      	cmp	r3, #2
 8001520:	d012      	beq.n	8001548 <SD_disk_ioctl+0x5c>
 8001522:	2b00      	cmp	r3, #0
 8001524:	d11a      	bne.n	800155c <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8001526:	f7ff fd0b 	bl	8000f40 <SD_CheckPower>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8001530:	f7ff fcfa 	bl	8000f28 <SD_PowerOff>
      res = RES_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800153a:	e0fc      	b.n	8001736 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 800153c:	f7ff fca8 	bl	8000e90 <SD_PowerOn>
      res = RES_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001546:	e0f6      	b.n	8001736 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	1c5c      	adds	r4, r3, #1
 800154c:	f7ff fcf8 	bl	8000f40 <SD_CheckPower>
 8001550:	4603      	mov	r3, r0
 8001552:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001554:	2300      	movs	r3, #0
 8001556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800155a:	e0ec      	b.n	8001736 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 800155c:	2304      	movs	r3, #4
 800155e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001562:	e0e8      	b.n	8001736 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001564:	4b77      	ldr	r3, [pc, #476]	; (8001744 <SD_disk_ioctl+0x258>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8001572:	2303      	movs	r3, #3
 8001574:	e0e1      	b.n	800173a <SD_disk_ioctl+0x24e>
    
    SELECT();
 8001576:	f7ff fc11 	bl	8000d9c <SELECT>
    
    switch (ctrl) 
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	2b0d      	cmp	r3, #13
 800157e:	f200 80cb 	bhi.w	8001718 <SD_disk_ioctl+0x22c>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <SD_disk_ioctl+0x9c>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001683 	.word	0x08001683
 800158c:	080015c1 	.word	0x080015c1
 8001590:	08001673 	.word	0x08001673
 8001594:	08001719 	.word	0x08001719
 8001598:	08001719 	.word	0x08001719
 800159c:	08001719 	.word	0x08001719
 80015a0:	08001719 	.word	0x08001719
 80015a4:	08001719 	.word	0x08001719
 80015a8:	08001719 	.word	0x08001719
 80015ac:	08001719 	.word	0x08001719
 80015b0:	08001719 	.word	0x08001719
 80015b4:	08001695 	.word	0x08001695
 80015b8:	080016b9 	.word	0x080016b9
 80015bc:	080016dd 	.word	0x080016dd
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80015c0:	2100      	movs	r1, #0
 80015c2:	2049      	movs	r0, #73	; 0x49
 80015c4:	f7ff fd52 	bl	800106c <SD_SendCmd>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 80a8 	bne.w	8001720 <SD_disk_ioctl+0x234>
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2110      	movs	r1, #16
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fcbe 	bl	8000f58 <SD_RxDataBlock>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 809e 	beq.w	8001720 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	099b      	lsrs	r3, r3, #6
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d10e      	bne.n	800160c <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80015ee:	7d7b      	ldrb	r3, [r7, #21]
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	7d3b      	ldrb	r3, [r7, #20]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001602:	8bfb      	ldrh	r3, [r7, #30]
 8001604:	029a      	lsls	r2, r3, #10
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e02e      	b.n	800166a <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800160c:	7c7b      	ldrb	r3, [r7, #17]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	b2da      	uxtb	r2, r3
 8001614:	7dbb      	ldrb	r3, [r7, #22]
 8001616:	09db      	lsrs	r3, r3, #7
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4413      	add	r3, r2
 800161c:	b2da      	uxtb	r2, r3
 800161e:	7d7b      	ldrb	r3, [r7, #21]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f003 0306 	and.w	r3, r3, #6
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b2db      	uxtb	r3, r3
 800162e:	3302      	adds	r3, #2
 8001630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001634:	7d3b      	ldrb	r3, [r7, #20]
 8001636:	099b      	lsrs	r3, r3, #6
 8001638:	b2db      	uxtb	r3, r3
 800163a:	b29a      	uxth	r2, r3
 800163c:	7cfb      	ldrb	r3, [r7, #19]
 800163e:	b29b      	uxth	r3, r3
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	b29b      	uxth	r3, r3
 8001644:	4413      	add	r3, r2
 8001646:	b29a      	uxth	r2, r3
 8001648:	7cbb      	ldrb	r3, [r7, #18]
 800164a:	029b      	lsls	r3, r3, #10
 800164c:	b29b      	uxth	r3, r3
 800164e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001652:	b29b      	uxth	r3, r3
 8001654:	4413      	add	r3, r2
 8001656:	b29b      	uxth	r3, r3
 8001658:	3301      	adds	r3, #1
 800165a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800165c:	8bfa      	ldrh	r2, [r7, #30]
 800165e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001662:	3b09      	subs	r3, #9
 8001664:	409a      	lsls	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001670:	e056      	b.n	8001720 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001678:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001680:	e055      	b.n	800172e <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001682:	f7ff fbe9 	bl	8000e58 <SD_ReadyWait>
 8001686:	4603      	mov	r3, r0
 8001688:	2bff      	cmp	r3, #255	; 0xff
 800168a:	d14b      	bne.n	8001724 <SD_disk_ioctl+0x238>
        res = RES_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001692:	e047      	b.n	8001724 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001694:	2100      	movs	r1, #0
 8001696:	2049      	movs	r0, #73	; 0x49
 8001698:	f7ff fce8 	bl	800106c <SD_SendCmd>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d142      	bne.n	8001728 <SD_disk_ioctl+0x23c>
 80016a2:	2110      	movs	r1, #16
 80016a4:	6a38      	ldr	r0, [r7, #32]
 80016a6:	f7ff fc57 	bl	8000f58 <SD_RxDataBlock>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d03b      	beq.n	8001728 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016b6:	e037      	b.n	8001728 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80016b8:	2100      	movs	r1, #0
 80016ba:	204a      	movs	r0, #74	; 0x4a
 80016bc:	f7ff fcd6 	bl	800106c <SD_SendCmd>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d132      	bne.n	800172c <SD_disk_ioctl+0x240>
 80016c6:	2110      	movs	r1, #16
 80016c8:	6a38      	ldr	r0, [r7, #32]
 80016ca:	f7ff fc45 	bl	8000f58 <SD_RxDataBlock>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d02b      	beq.n	800172c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016da:	e027      	b.n	800172c <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80016dc:	2100      	movs	r1, #0
 80016de:	207a      	movs	r0, #122	; 0x7a
 80016e0:	f7ff fcc4 	bl	800106c <SD_SendCmd>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d116      	bne.n	8001718 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016f0:	e00b      	b.n	800170a <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 80016f2:	6a3c      	ldr	r4, [r7, #32]
 80016f4:	1c63      	adds	r3, r4, #1
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	f7ff fb82 	bl	8000e00 <SPI_RxByte>
 80016fc:	4603      	mov	r3, r0
 80016fe:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001700:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001704:	3301      	adds	r3, #1
 8001706:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800170a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800170e:	2b03      	cmp	r3, #3
 8001710:	d9ef      	bls.n	80016f2 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001718:	2304      	movs	r3, #4
 800171a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800171e:	e006      	b.n	800172e <SD_disk_ioctl+0x242>
      break;
 8001720:	bf00      	nop
 8001722:	e004      	b.n	800172e <SD_disk_ioctl+0x242>
      break;
 8001724:	bf00      	nop
 8001726:	e002      	b.n	800172e <SD_disk_ioctl+0x242>
      break;
 8001728:	bf00      	nop
 800172a:	e000      	b.n	800172e <SD_disk_ioctl+0x242>
      break;
 800172c:	bf00      	nop
    }
    
    DESELECT();
 800172e:	f7ff fb41 	bl	8000db4 <DESELECT>
    SPI_RxByte();
 8001732:	f7ff fb65 	bl	8000e00 <SPI_RxByte>
  }
  
  return res;
 8001736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800173a:	4618      	mov	r0, r3
 800173c:	372c      	adds	r7, #44	; 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}
 8001742:	bf00      	nop
 8001744:	20000000 	.word	0x20000000

08001748 <send_uart>:

FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void send_uart(char *string){
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7fe fd5d 	bl	8000210 <strlen>
 8001756:	4603      	mov	r3, r0
 8001758:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	b29a      	uxth	r2, r3
 800175e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4803      	ldr	r0, [pc, #12]	; (8001774 <send_uart+0x2c>)
 8001766:	f001 ffac 	bl	80036c2 <HAL_UART_Transmit>
}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000132c 	.word	0x2000132c

08001778 <bufclear>:
	int i = 0;
	while (*buf++ != '\0') i++;
	return i;
}

void bufclear (void){
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++){
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	e007      	b.n	8001794 <bufclear+0x1c>
		buffer[i] = '\0';
 8001784:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <bufclear+0x30>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++){
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3301      	adds	r3, #1
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179a:	dbf3      	blt.n	8001784 <bufclear+0xc>
	}
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	2000136c 	.word	0x2000136c

080017ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b6:	f000 fb79 	bl	8001eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ba:	f000 f8c9 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017be:	f000 f993 	bl	8001ae8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80017c2:	f000 f931 	bl	8001a28 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80017c6:	f000 f965 	bl	8001a94 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80017ca:	f002 fbd9 	bl	8003f80 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  //Mount SD Card
  fresult = f_mount(&fs, "", 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	494f      	ldr	r1, [pc, #316]	; (8001910 <main+0x164>)
 80017d2:	4850      	ldr	r0, [pc, #320]	; (8001914 <main+0x168>)
 80017d4:	f004 fe1a 	bl	800640c <f_mount>
 80017d8:	4603      	mov	r3, r0
 80017da:	461a      	mov	r2, r3
 80017dc:	4b4e      	ldr	r3, [pc, #312]	; (8001918 <main+0x16c>)
 80017de:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) send_uart("error mounting SD CARD.... \n");
 80017e0:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <main+0x16c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <main+0x44>
 80017e8:	484c      	ldr	r0, [pc, #304]	; (800191c <main+0x170>)
 80017ea:	f7ff ffad 	bl	8001748 <send_uart>
 80017ee:	e002      	b.n	80017f6 <main+0x4a>
  else send_uart("SD CARD mounted....\n");
 80017f0:	484b      	ldr	r0, [pc, #300]	; (8001920 <main+0x174>)
 80017f2:	f7ff ffa9 	bl	8001748 <send_uart>

  //Get total and free space
  f_getfree("", &fre_clust, &pfs);
 80017f6:	4a4b      	ldr	r2, [pc, #300]	; (8001924 <main+0x178>)
 80017f8:	494b      	ldr	r1, [pc, #300]	; (8001928 <main+0x17c>)
 80017fa:	4845      	ldr	r0, [pc, #276]	; (8001910 <main+0x164>)
 80017fc:	f005 fa54 	bl	8006ca8 <f_getfree>
  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001800:	4b48      	ldr	r3, [pc, #288]	; (8001924 <main+0x178>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	3b02      	subs	r3, #2
 8001808:	4a46      	ldr	r2, [pc, #280]	; (8001924 <main+0x178>)
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	8952      	ldrh	r2, [r2, #10]
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe96 	bl	8000544 <__aeabi_ui2d>
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <main+0x180>)
 800181e:	f7fe ff0b 	bl	8000638 <__aeabi_dmul>
 8001822:	4603      	mov	r3, r0
 8001824:	460c      	mov	r4, r1
 8001826:	4618      	mov	r0, r3
 8001828:	4621      	mov	r1, r4
 800182a:	f7ff f917 	bl	8000a5c <__aeabi_d2uiz>
 800182e:	4602      	mov	r2, r0
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <main+0x184>)
 8001832:	601a      	str	r2, [r3, #0]
  bufclear();
 8001834:	f7ff ffa0 	bl	8001778 <bufclear>
  free_space = (uint32_t)(fre_clust * pfs->csize*0.5);
 8001838:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <main+0x178>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	895b      	ldrh	r3, [r3, #10]
 800183e:	461a      	mov	r2, r3
 8001840:	4b39      	ldr	r3, [pc, #228]	; (8001928 <main+0x17c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	fb03 f302 	mul.w	r3, r3, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe7b 	bl	8000544 <__aeabi_ui2d>
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b36      	ldr	r3, [pc, #216]	; (800192c <main+0x180>)
 8001854:	f7fe fef0 	bl	8000638 <__aeabi_dmul>
 8001858:	4603      	mov	r3, r0
 800185a:	460c      	mov	r4, r1
 800185c:	4618      	mov	r0, r3
 800185e:	4621      	mov	r1, r4
 8001860:	f7ff f8fc 	bl	8000a5c <__aeabi_d2uiz>
 8001864:	4602      	mov	r2, r0
 8001866:	4b33      	ldr	r3, [pc, #204]	; (8001934 <main+0x188>)
 8001868:	601a      	str	r2, [r3, #0]

  fresult = f_open(&fil, "file5.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800186a:	2213      	movs	r2, #19
 800186c:	4932      	ldr	r1, [pc, #200]	; (8001938 <main+0x18c>)
 800186e:	4833      	ldr	r0, [pc, #204]	; (800193c <main+0x190>)
 8001870:	f004 fe12 	bl	8006498 <f_open>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	4b27      	ldr	r3, [pc, #156]	; (8001918 <main+0x16c>)
 800187a:	701a      	strb	r2, [r3, #0]
  fresult  = f_write(&fil, "testing", 7, &bw);
 800187c:	4b30      	ldr	r3, [pc, #192]	; (8001940 <main+0x194>)
 800187e:	2207      	movs	r2, #7
 8001880:	4930      	ldr	r1, [pc, #192]	; (8001944 <main+0x198>)
 8001882:	482e      	ldr	r0, [pc, #184]	; (800193c <main+0x190>)
 8001884:	f004 ffd4 	bl	8006830 <f_write>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <main+0x16c>)
 800188e:	701a      	strb	r2, [r3, #0]
  f_close(&fil);
 8001890:	482a      	ldr	r0, [pc, #168]	; (800193c <main+0x190>)
 8001892:	f005 f9df 	bl	8006c54 <f_close>

  int count = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800189c:	f102 0204 	add.w	r2, r2, #4
 80018a0:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  sprintf(test, "%d\n", count);
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	3b04      	subs	r3, #4
 80018a8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80018ac:	f102 0204 	add.w	r2, r2, #4
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	4925      	ldr	r1, [pc, #148]	; (8001948 <main+0x19c>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f005 fc01 	bl	80070bc <siprintf>
	  fresult = f_open(&fil, "test7.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE);
 80018ba:	2233      	movs	r2, #51	; 0x33
 80018bc:	4923      	ldr	r1, [pc, #140]	; (800194c <main+0x1a0>)
 80018be:	481f      	ldr	r0, [pc, #124]	; (800193c <main+0x190>)
 80018c0:	f004 fdea 	bl	8006498 <f_open>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <main+0x16c>)
 80018ca:	701a      	strb	r2, [r3, #0]
	  fresult  = f_write(&fil, test, strlen(test), &bw);
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	3b04      	subs	r3, #4
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fc9c 	bl	8000210 <strlen>
 80018d8:	4602      	mov	r2, r0
 80018da:	f107 0108 	add.w	r1, r7, #8
 80018de:	3904      	subs	r1, #4
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <main+0x194>)
 80018e2:	4816      	ldr	r0, [pc, #88]	; (800193c <main+0x190>)
 80018e4:	f004 ffa4 	bl	8006830 <f_write>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <main+0x16c>)
 80018ee:	701a      	strb	r2, [r3, #0]
	  f_close(&fil);
 80018f0:	4812      	ldr	r0, [pc, #72]	; (800193c <main+0x190>)
 80018f2:	f005 f9af 	bl	8006c54 <f_close>
	  count ++;
 80018f6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80018fa:	f103 0304 	add.w	r3, r3, #4
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8001906:	f102 0204 	add.w	r2, r2, #4
 800190a:	6013      	str	r3, [r2, #0]
  {
 800190c:	e7c9      	b.n	80018a2 <main+0xf6>
 800190e:	bf00      	nop
 8001910:	080078e0 	.word	0x080078e0
 8001914:	200002ec 	.word	0x200002ec
 8001918:	20001774 	.word	0x20001774
 800191c:	080078e4 	.word	0x080078e4
 8001920:	08007904 	.word	0x08007904
 8001924:	20001770 	.word	0x20001770
 8001928:	200002e8 	.word	0x200002e8
 800192c:	3fe00000 	.word	0x3fe00000
 8001930:	200017d0 	.word	0x200017d0
 8001934:	20001328 	.word	0x20001328
 8001938:	0800791c 	.word	0x0800791c
 800193c:	200017d4 	.word	0x200017d4
 8001940:	2000176c 	.word	0x2000176c
 8001944:	08007928 	.word	0x08007928
 8001948:	08007930 	.word	0x08007930
 800194c:	08007934 	.word	0x08007934

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b094      	sub	sp, #80	; 0x50
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	2234      	movs	r2, #52	; 0x34
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f005 fba4 	bl	80070ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <SystemClock_Config+0xd0>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	4a28      	ldr	r2, [pc, #160]	; (8001a20 <SystemClock_Config+0xd0>)
 800197e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001982:	6413      	str	r3, [r2, #64]	; 0x40
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <SystemClock_Config+0xd0>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001990:	2300      	movs	r3, #0
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <SystemClock_Config+0xd4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <SystemClock_Config+0xd4>)
 800199e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <SystemClock_Config+0xd4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ba:	2302      	movs	r3, #2
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80019c4:	2319      	movs	r3, #25
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 80019c8:	2390      	movs	r3, #144	; 0x90
 80019ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019cc:	2302      	movs	r3, #2
 80019ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019d0:	2302      	movs	r3, #2
 80019d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019d4:	2302      	movs	r3, #2
 80019d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 ffd5 	bl	800298c <HAL_RCC_OscConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019e8:	f000 f8ce 	bl	8001b88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ec:	230f      	movs	r3, #15
 80019ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f0:	2302      	movs	r3, #2
 80019f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	2102      	movs	r1, #2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fd53 	bl	80024b4 <HAL_RCC_ClockConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a14:	f000 f8b8 	bl	8001b88 <Error_Handler>
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3750      	adds	r7, #80	; 0x50
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000

08001a28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <MX_SPI1_Init+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a5c:	2210      	movs	r2, #16
 8001a5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a74:	220a      	movs	r2, #10
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <MX_SPI1_Init+0x64>)
 8001a7a:	f001 f9e1 	bl	8002e40 <HAL_SPI_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a84:	f000 f880 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20001778 	.word	0x20001778
 8001a90:	40013000 	.word	0x40013000

08001a94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <MX_USART1_UART_Init+0x50>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_USART1_UART_Init+0x4c>)
 8001acc:	f001 fdac 	bl	8003628 <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ad6:	f000 f857 	bl	8001b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000132c 	.word	0x2000132c
 8001ae4:	40011000 	.word	0x40011000

08001ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_GPIO_Init+0x98>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <MX_GPIO_Init+0x98>)
 8001b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_GPIO_Init+0x98>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <MX_GPIO_Init+0x98>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <MX_GPIO_Init+0x98>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_GPIO_Init+0x98>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_GPIO_Init+0x98>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <MX_GPIO_Init+0x98>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_GPIO_Init+0x98>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2110      	movs	r1, #16
 8001b56:	480b      	ldr	r0, [pc, #44]	; (8001b84 <MX_GPIO_Init+0x9c>)
 8001b58:	f000 fc92 	bl	8002480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b5c:	2310      	movs	r3, #16
 8001b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_GPIO_Init+0x9c>)
 8001b74:	f000 faf2 	bl	800215c <HAL_GPIO_Init>

}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020800 	.word	0x40020800

08001b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_MspInit+0x4c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <HAL_MspInit+0x4c>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_MspInit+0x4c>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_MspInit+0x4c>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <HAL_MspInit+0x4c>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_MspInit+0x4c>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_SPI_MspInit+0x84>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d12b      	bne.n	8001c62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_SPI_MspInit+0x88>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <HAL_SPI_MspInit+0x88>)
 8001c14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <HAL_SPI_MspInit+0x88>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_SPI_MspInit+0x88>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <HAL_SPI_MspInit+0x88>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_SPI_MspInit+0x88>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c42:	23e0      	movs	r3, #224	; 0xe0
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c52:	2305      	movs	r3, #5
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <HAL_SPI_MspInit+0x8c>)
 8001c5e:	f000 fa7d 	bl	800215c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	; 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40013000 	.word	0x40013000
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020000 	.word	0x40020000

08001c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_UART_MspInit+0x84>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d12c      	bne.n	8001cf4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_UART_MspInit+0x88>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <HAL_UART_MspInit+0x88>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_UART_MspInit+0x88>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_UART_MspInit+0x88>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a10      	ldr	r2, [pc, #64]	; (8001d00 <HAL_UART_MspInit+0x88>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_UART_MspInit+0x88>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ce4:	2307      	movs	r3, #7
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <HAL_UART_MspInit+0x8c>)
 8001cf0:	f000 fa34 	bl	800215c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40011000 	.word	0x40011000
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000

08001d08 <SDTimerHandler>:
/* USER CODE BEGIN 0 */

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimerHandler(void) {
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <SDTimerHandler+0x40>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <SDTimerHandler+0x1c>
		Timer1--;
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <SDTimerHandler+0x40>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <SDTimerHandler+0x40>)
 8001d22:	701a      	strb	r2, [r3, #0]
	if (Timer2 > 0)
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <SDTimerHandler+0x44>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d006      	beq.n	8001d3c <SDTimerHandler+0x34>
		Timer2--;
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <SDTimerHandler+0x44>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <SDTimerHandler+0x44>)
 8001d3a:	701a      	strb	r2, [r3, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20002805 	.word	0x20002805
 8001d4c:	20002804 	.word	0x20002804

08001d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <SysTick_Handler+0x30>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	3301      	adds	r3, #1
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <SysTick_Handler+0x30>)
 8001db0:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10){
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <SysTick_Handler+0x30>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b09      	cmp	r3, #9
 8001dba:	d904      	bls.n	8001dc6 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Handler+0x30>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
		SDTimerHandler();
 8001dc2:	f7ff ffa1 	bl	8001d08 <SDTimerHandler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc6:	f000 f8c3 	bl	8001f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200000a6 	.word	0x200000a6

08001dd4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <_sbrk+0x50>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <_sbrk+0x16>
		heap_end = &end;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <_sbrk+0x50>)
 8001de6:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <_sbrk+0x54>)
 8001de8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <_sbrk+0x50>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <_sbrk+0x50>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	466a      	mov	r2, sp
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d907      	bls.n	8001e0e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001dfe:	f005 f92b 	bl	8007058 <__errno>
 8001e02:	4602      	mov	r2, r0
 8001e04:	230c      	movs	r3, #12
 8001e06:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0c:	e006      	b.n	8001e1c <_sbrk+0x48>
	}

	heap_end += incr;
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <_sbrk+0x50>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	4a03      	ldr	r2, [pc, #12]	; (8001e24 <_sbrk+0x50>)
 8001e18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200000a8 	.word	0x200000a8
 8001e28:	20004880 	.word	0x20004880

08001e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <SystemInit+0x28>)
 8001e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <SystemInit+0x28>)
 8001e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <SystemInit+0x28>)
 8001e42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e46:	609a      	str	r2, [r3, #8]
#endif
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e5e:	e003      	b.n	8001e68 <LoopCopyDataInit>

08001e60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e66:	3104      	adds	r1, #4

08001e68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e68:	480b      	ldr	r0, [pc, #44]	; (8001e98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e70:	d3f6      	bcc.n	8001e60 <CopyDataInit>
  ldr  r2, =_sbss
 8001e72:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e74:	e002      	b.n	8001e7c <LoopFillZerobss>

08001e76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e78:	f842 3b04 	str.w	r3, [r2], #4

08001e7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e80:	d3f9      	bcc.n	8001e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e82:	f7ff ffd3 	bl	8001e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e86:	f005 f8ed 	bl	8007064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e8a:	f7ff fc8f 	bl	80017ac <main>
  bx  lr    
 8001e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e94:	08007e24 	.word	0x08007e24
  ldr  r0, =_sdata
 8001e98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e9c:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001ea0:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001ea4:	20004880 	.word	0x20004880

08001ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC_IRQHandler>
	...

08001eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <HAL_Init+0x40>)
 8001eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_Init+0x40>)
 8001ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_Init+0x40>)
 8001ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f000 f90d 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f000 f808 	bl	8001ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee0:	f7ff fe5a 	bl	8001b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023c00 	.word	0x40023c00

08001ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_InitTick+0x54>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_InitTick+0x58>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4619      	mov	r1, r3
 8001f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f917 	bl	8002142 <HAL_SYSTICK_Config>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00e      	b.n	8001f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b0f      	cmp	r3, #15
 8001f22:	d80a      	bhi.n	8001f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f24:	2200      	movs	r2, #0
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f000 f8ed 	bl	800210a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f30:	4a06      	ldr	r2, [pc, #24]	; (8001f4c <HAL_InitTick+0x5c>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e000      	b.n	8001f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000004 	.word	0x20000004
 8001f48:	2000000c 	.word	0x2000000c
 8001f4c:	20000008 	.word	0x20000008

08001f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_IncTick+0x20>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_IncTick+0x24>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_IncTick+0x24>)
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	20002808 	.word	0x20002808

08001f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_GetTick+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20002808 	.word	0x20002808

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	; (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
         );
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c0:	d301      	bcc.n	80020c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00f      	b.n	80020e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <SysTick_Config+0x40>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ce:	210f      	movs	r1, #15
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f7ff ff8e 	bl	8001ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <SysTick_Config+0x40>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <SysTick_Config+0x40>)
 80020e0:	2207      	movs	r2, #7
 80020e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	e000e010 	.word	0xe000e010

080020f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff47 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800211c:	f7ff ff5c 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 8002120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff ff8e 	bl	8002048 <NVIC_EncodePriority>
 800212c:	4602      	mov	r2, r0
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff5d 	bl	8001ff4 <__NVIC_SetPriority>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ffb0 	bl	80020b0 <SysTick_Config>
 8002150:	4603      	mov	r3, r0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e165      	b.n	8002444 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	f040 8154 	bne.w	800243e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d00b      	beq.n	80021b6 <HAL_GPIO_Init+0x5a>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d007      	beq.n	80021b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021aa:	2b11      	cmp	r3, #17
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b12      	cmp	r3, #18
 80021b4:	d130      	bne.n	8002218 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0201 	and.w	r2, r3, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0xfc>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b12      	cmp	r3, #18
 8002256:	d123      	bne.n	80022a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	69b9      	ldr	r1, [r7, #24]
 800229c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80ae 	beq.w	800243e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b5c      	ldr	r3, [pc, #368]	; (8002458 <HAL_GPIO_Init+0x2fc>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a5b      	ldr	r2, [pc, #364]	; (8002458 <HAL_GPIO_Init+0x2fc>)
 80022ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b59      	ldr	r3, [pc, #356]	; (8002458 <HAL_GPIO_Init+0x2fc>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fe:	4a57      	ldr	r2, [pc, #348]	; (800245c <HAL_GPIO_Init+0x300>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4e      	ldr	r2, [pc, #312]	; (8002460 <HAL_GPIO_Init+0x304>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d025      	beq.n	8002376 <HAL_GPIO_Init+0x21a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4d      	ldr	r2, [pc, #308]	; (8002464 <HAL_GPIO_Init+0x308>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01f      	beq.n	8002372 <HAL_GPIO_Init+0x216>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4c      	ldr	r2, [pc, #304]	; (8002468 <HAL_GPIO_Init+0x30c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <HAL_GPIO_Init+0x212>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4b      	ldr	r2, [pc, #300]	; (800246c <HAL_GPIO_Init+0x310>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0x20e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4a      	ldr	r2, [pc, #296]	; (8002470 <HAL_GPIO_Init+0x314>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x20a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a49      	ldr	r2, [pc, #292]	; (8002474 <HAL_GPIO_Init+0x318>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x206>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a48      	ldr	r2, [pc, #288]	; (8002478 <HAL_GPIO_Init+0x31c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x202>
 800235a:	2306      	movs	r3, #6
 800235c:	e00c      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 800235e:	2307      	movs	r3, #7
 8002360:	e00a      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 8002362:	2305      	movs	r3, #5
 8002364:	e008      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 8002366:	2304      	movs	r3, #4
 8002368:	e006      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 800236a:	2303      	movs	r3, #3
 800236c:	e004      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 800236e:	2302      	movs	r3, #2
 8002370:	e002      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 8002376:	2300      	movs	r3, #0
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	f002 0203 	and.w	r2, r2, #3
 800237e:	0092      	lsls	r2, r2, #2
 8002380:	4093      	lsls	r3, r2
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002388:	4934      	ldr	r1, [pc, #208]	; (800245c <HAL_GPIO_Init+0x300>)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002396:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_GPIO_Init+0x320>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ba:	4a30      	ldr	r2, [pc, #192]	; (800247c <HAL_GPIO_Init+0x320>)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023c0:	4b2e      	ldr	r3, [pc, #184]	; (800247c <HAL_GPIO_Init+0x320>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023e4:	4a25      	ldr	r2, [pc, #148]	; (800247c <HAL_GPIO_Init+0x320>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ea:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_GPIO_Init+0x320>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800240e:	4a1b      	ldr	r2, [pc, #108]	; (800247c <HAL_GPIO_Init+0x320>)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <HAL_GPIO_Init+0x320>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002438:	4a10      	ldr	r2, [pc, #64]	; (800247c <HAL_GPIO_Init+0x320>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3301      	adds	r3, #1
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2b0f      	cmp	r3, #15
 8002448:	f67f ae96 	bls.w	8002178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800244c:	bf00      	nop
 800244e:	3724      	adds	r7, #36	; 0x24
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40023800 	.word	0x40023800
 800245c:	40013800 	.word	0x40013800
 8002460:	40020000 	.word	0x40020000
 8002464:	40020400 	.word	0x40020400
 8002468:	40020800 	.word	0x40020800
 800246c:	40020c00 	.word	0x40020c00
 8002470:	40021000 	.word	0x40021000
 8002474:	40021400 	.word	0x40021400
 8002478:	40021800 	.word	0x40021800
 800247c:	40013c00 	.word	0x40013c00

08002480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	807b      	strh	r3, [r7, #2]
 800248c:	4613      	mov	r3, r2
 800248e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002490:	787b      	ldrb	r3, [r7, #1]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002496:	887a      	ldrh	r2, [r7, #2]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800249c:	e003      	b.n	80024a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800249e:	887b      	ldrh	r3, [r7, #2]
 80024a0:	041a      	lsls	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	619a      	str	r2, [r3, #24]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0cc      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b68      	ldr	r3, [pc, #416]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d90c      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b65      	ldr	r3, [pc, #404]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b63      	ldr	r3, [pc, #396]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b8      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002508:	4b59      	ldr	r3, [pc, #356]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a58      	ldr	r2, [pc, #352]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002520:	4b53      	ldr	r3, [pc, #332]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a52      	ldr	r2, [pc, #328]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800252a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252c:	4b50      	ldr	r3, [pc, #320]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	494d      	ldr	r1, [pc, #308]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d044      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d119      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e07f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d003      	beq.n	8002572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256e:	2b03      	cmp	r3, #3
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b3f      	ldr	r3, [pc, #252]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e06f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e067      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b37      	ldr	r3, [pc, #220]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4934      	ldr	r1, [pc, #208]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a4:	f7ff fce8 	bl	8001f78 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7ff fce4 	bl	8001f78 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e04f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 020c 	and.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1eb      	bne.n	80025ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b25      	ldr	r3, [pc, #148]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d20c      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b22      	ldr	r3, [pc, #136]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e032      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4916      	ldr	r1, [pc, #88]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	490e      	ldr	r1, [pc, #56]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800263a:	f000 f855 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 800263e:	4601      	mov	r1, r0
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	5cd3      	ldrb	r3, [r2, r3]
 800264e:	fa21 f303 	lsr.w	r3, r1, r3
 8002652:	4a09      	ldr	r2, [pc, #36]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fc48 	bl	8001ef0 <HAL_InitTick>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00
 8002670:	40023800 	.word	0x40023800
 8002674:	08007988 	.word	0x08007988
 8002678:	20000004 	.word	0x20000004
 800267c:	20000008 	.word	0x20000008

08002680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_RCC_GetHCLKFreq+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000004 	.word	0x20000004

08002698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800269c:	f7ff fff0 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026a0:	4601      	mov	r1, r0
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0a9b      	lsrs	r3, r3, #10
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4a03      	ldr	r2, [pc, #12]	; (80026bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ae:	5cd3      	ldrb	r3, [r2, r3]
 80026b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40023800 	.word	0x40023800
 80026bc:	08007998 	.word	0x08007998

080026c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026c4:	f7ff ffdc 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026c8:	4601      	mov	r1, r0
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0b5b      	lsrs	r3, r3, #13
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4a03      	ldr	r2, [pc, #12]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08007998 	.word	0x08007998

080026e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002702:	4b9f      	ldr	r3, [pc, #636]	; (8002980 <HAL_RCC_GetSysClockFreq+0x298>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b0c      	cmp	r3, #12
 800270c:	f200 8130 	bhi.w	8002970 <HAL_RCC_GetSysClockFreq+0x288>
 8002710:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <HAL_RCC_GetSysClockFreq+0x30>)
 8002712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002716:	bf00      	nop
 8002718:	0800274d 	.word	0x0800274d
 800271c:	08002971 	.word	0x08002971
 8002720:	08002971 	.word	0x08002971
 8002724:	08002971 	.word	0x08002971
 8002728:	08002753 	.word	0x08002753
 800272c:	08002971 	.word	0x08002971
 8002730:	08002971 	.word	0x08002971
 8002734:	08002971 	.word	0x08002971
 8002738:	08002759 	.word	0x08002759
 800273c:	08002971 	.word	0x08002971
 8002740:	08002971 	.word	0x08002971
 8002744:	08002971 	.word	0x08002971
 8002748:	08002867 	.word	0x08002867
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800274c:	4b8d      	ldr	r3, [pc, #564]	; (8002984 <HAL_RCC_GetSysClockFreq+0x29c>)
 800274e:	613b      	str	r3, [r7, #16]
       break;
 8002750:	e111      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002752:	4b8d      	ldr	r3, [pc, #564]	; (8002988 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002754:	613b      	str	r3, [r7, #16]
      break;
 8002756:	e10e      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002758:	4b89      	ldr	r3, [pc, #548]	; (8002980 <HAL_RCC_GetSysClockFreq+0x298>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002760:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002762:	4b87      	ldr	r3, [pc, #540]	; (8002980 <HAL_RCC_GetSysClockFreq+0x298>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d023      	beq.n	80027b6 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276e:	4b84      	ldr	r3, [pc, #528]	; (8002980 <HAL_RCC_GetSysClockFreq+0x298>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	099b      	lsrs	r3, r3, #6
 8002774:	f04f 0400 	mov.w	r4, #0
 8002778:	f240 11ff 	movw	r1, #511	; 0x1ff
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	ea03 0501 	and.w	r5, r3, r1
 8002784:	ea04 0602 	and.w	r6, r4, r2
 8002788:	4a7f      	ldr	r2, [pc, #508]	; (8002988 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800278a:	fb02 f106 	mul.w	r1, r2, r6
 800278e:	2200      	movs	r2, #0
 8002790:	fb02 f205 	mul.w	r2, r2, r5
 8002794:	440a      	add	r2, r1
 8002796:	497c      	ldr	r1, [pc, #496]	; (8002988 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002798:	fba5 0101 	umull	r0, r1, r5, r1
 800279c:	1853      	adds	r3, r2, r1
 800279e:	4619      	mov	r1, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f04f 0400 	mov.w	r4, #0
 80027a6:	461a      	mov	r2, r3
 80027a8:	4623      	mov	r3, r4
 80027aa:	f7fe f977 	bl	8000a9c <__aeabi_uldivmod>
 80027ae:	4603      	mov	r3, r0
 80027b0:	460c      	mov	r4, r1
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e049      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b6:	4b72      	ldr	r3, [pc, #456]	; (8002980 <HAL_RCC_GetSysClockFreq+0x298>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	099b      	lsrs	r3, r3, #6
 80027bc:	f04f 0400 	mov.w	r4, #0
 80027c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	ea03 0501 	and.w	r5, r3, r1
 80027cc:	ea04 0602 	and.w	r6, r4, r2
 80027d0:	4629      	mov	r1, r5
 80027d2:	4632      	mov	r2, r6
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	f04f 0400 	mov.w	r4, #0
 80027dc:	0154      	lsls	r4, r2, #5
 80027de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027e2:	014b      	lsls	r3, r1, #5
 80027e4:	4619      	mov	r1, r3
 80027e6:	4622      	mov	r2, r4
 80027e8:	1b49      	subs	r1, r1, r5
 80027ea:	eb62 0206 	sbc.w	r2, r2, r6
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	f04f 0400 	mov.w	r4, #0
 80027f6:	0194      	lsls	r4, r2, #6
 80027f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027fc:	018b      	lsls	r3, r1, #6
 80027fe:	1a5b      	subs	r3, r3, r1
 8002800:	eb64 0402 	sbc.w	r4, r4, r2
 8002804:	f04f 0100 	mov.w	r1, #0
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	00e2      	lsls	r2, r4, #3
 800280e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002812:	00d9      	lsls	r1, r3, #3
 8002814:	460b      	mov	r3, r1
 8002816:	4614      	mov	r4, r2
 8002818:	195b      	adds	r3, r3, r5
 800281a:	eb44 0406 	adc.w	r4, r4, r6
 800281e:	f04f 0100 	mov.w	r1, #0
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	02a2      	lsls	r2, r4, #10
 8002828:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800282c:	0299      	lsls	r1, r3, #10
 800282e:	460b      	mov	r3, r1
 8002830:	4614      	mov	r4, r2
 8002832:	4618      	mov	r0, r3
 8002834:	4621      	mov	r1, r4
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f04f 0400 	mov.w	r4, #0
 800283c:	461a      	mov	r2, r3
 800283e:	4623      	mov	r3, r4
 8002840:	f7fe f92c 	bl	8000a9c <__aeabi_uldivmod>
 8002844:	4603      	mov	r3, r0
 8002846:	460c      	mov	r4, r1
 8002848:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800284a:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <HAL_RCC_GetSysClockFreq+0x298>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	0c1b      	lsrs	r3, r3, #16
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	3301      	adds	r3, #1
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	613b      	str	r3, [r7, #16]
      break;
 8002864:	e087      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002866:	4b46      	ldr	r3, [pc, #280]	; (8002980 <HAL_RCC_GetSysClockFreq+0x298>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800286e:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002870:	4b43      	ldr	r3, [pc, #268]	; (8002980 <HAL_RCC_GetSysClockFreq+0x298>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d023      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287c:	4b40      	ldr	r3, [pc, #256]	; (8002980 <HAL_RCC_GetSysClockFreq+0x298>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	f04f 0400 	mov.w	r4, #0
 8002886:	f240 11ff 	movw	r1, #511	; 0x1ff
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	ea03 0501 	and.w	r5, r3, r1
 8002892:	ea04 0602 	and.w	r6, r4, r2
 8002896:	4a3c      	ldr	r2, [pc, #240]	; (8002988 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002898:	fb02 f106 	mul.w	r1, r2, r6
 800289c:	2200      	movs	r2, #0
 800289e:	fb02 f205 	mul.w	r2, r2, r5
 80028a2:	440a      	add	r2, r1
 80028a4:	4938      	ldr	r1, [pc, #224]	; (8002988 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80028a6:	fba5 0101 	umull	r0, r1, r5, r1
 80028aa:	1853      	adds	r3, r2, r1
 80028ac:	4619      	mov	r1, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f04f 0400 	mov.w	r4, #0
 80028b4:	461a      	mov	r2, r3
 80028b6:	4623      	mov	r3, r4
 80028b8:	f7fe f8f0 	bl	8000a9c <__aeabi_uldivmod>
 80028bc:	4603      	mov	r3, r0
 80028be:	460c      	mov	r4, r1
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e049      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c4:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <HAL_RCC_GetSysClockFreq+0x298>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	099b      	lsrs	r3, r3, #6
 80028ca:	f04f 0400 	mov.w	r4, #0
 80028ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	ea03 0501 	and.w	r5, r3, r1
 80028da:	ea04 0602 	and.w	r6, r4, r2
 80028de:	4629      	mov	r1, r5
 80028e0:	4632      	mov	r2, r6
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	f04f 0400 	mov.w	r4, #0
 80028ea:	0154      	lsls	r4, r2, #5
 80028ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028f0:	014b      	lsls	r3, r1, #5
 80028f2:	4619      	mov	r1, r3
 80028f4:	4622      	mov	r2, r4
 80028f6:	1b49      	subs	r1, r1, r5
 80028f8:	eb62 0206 	sbc.w	r2, r2, r6
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	f04f 0400 	mov.w	r4, #0
 8002904:	0194      	lsls	r4, r2, #6
 8002906:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800290a:	018b      	lsls	r3, r1, #6
 800290c:	1a5b      	subs	r3, r3, r1
 800290e:	eb64 0402 	sbc.w	r4, r4, r2
 8002912:	f04f 0100 	mov.w	r1, #0
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	00e2      	lsls	r2, r4, #3
 800291c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002920:	00d9      	lsls	r1, r3, #3
 8002922:	460b      	mov	r3, r1
 8002924:	4614      	mov	r4, r2
 8002926:	195b      	adds	r3, r3, r5
 8002928:	eb44 0406 	adc.w	r4, r4, r6
 800292c:	f04f 0100 	mov.w	r1, #0
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	02a2      	lsls	r2, r4, #10
 8002936:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800293a:	0299      	lsls	r1, r3, #10
 800293c:	460b      	mov	r3, r1
 800293e:	4614      	mov	r4, r2
 8002940:	4618      	mov	r0, r3
 8002942:	4621      	mov	r1, r4
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f04f 0400 	mov.w	r4, #0
 800294a:	461a      	mov	r2, r3
 800294c:	4623      	mov	r3, r4
 800294e:	f7fe f8a5 	bl	8000a9c <__aeabi_uldivmod>
 8002952:	4603      	mov	r3, r0
 8002954:	460c      	mov	r4, r1
 8002956:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002958:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_RCC_GetSysClockFreq+0x298>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	0f1b      	lsrs	r3, r3, #28
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	613b      	str	r3, [r7, #16]
      break;
 800296e:	e002      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002972:	613b      	str	r3, [r7, #16]
      break;
 8002974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002976:	693b      	ldr	r3, [r7, #16]
}
 8002978:	4618      	mov	r0, r3
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002980:	40023800 	.word	0x40023800
 8002984:	00f42400 	.word	0x00f42400
 8002988:	017d7840 	.word	0x017d7840

0800298c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8083 	beq.w	8002aac <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029a6:	4b95      	ldr	r3, [pc, #596]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d019      	beq.n	80029e6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029b2:	4b92      	ldr	r3, [pc, #584]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d106      	bne.n	80029cc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029be:	4b8f      	ldr	r3, [pc, #572]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ca:	d00c      	beq.n	80029e6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029cc:	4b8b      	ldr	r3, [pc, #556]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	d112      	bne.n	80029fe <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d8:	4b88      	ldr	r3, [pc, #544]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e4:	d10b      	bne.n	80029fe <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e6:	4b85      	ldr	r3, [pc, #532]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d05b      	beq.n	8002aaa <HAL_RCC_OscConfig+0x11e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d157      	bne.n	8002aaa <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e216      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x8a>
 8002a08:	4b7c      	ldr	r3, [pc, #496]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a7b      	ldr	r2, [pc, #492]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	e01d      	b.n	8002a52 <HAL_RCC_OscConfig+0xc6>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCC_OscConfig+0xae>
 8002a20:	4b76      	ldr	r3, [pc, #472]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a75      	ldr	r2, [pc, #468]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b73      	ldr	r3, [pc, #460]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a72      	ldr	r2, [pc, #456]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	e00b      	b.n	8002a52 <HAL_RCC_OscConfig+0xc6>
 8002a3a:	4b70      	ldr	r3, [pc, #448]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a6f      	ldr	r2, [pc, #444]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6c      	ldr	r2, [pc, #432]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d013      	beq.n	8002a82 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7ff fa8d 	bl	8001f78 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a62:	f7ff fa89 	bl	8001f78 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	; 0x64
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1db      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a74:	4b61      	ldr	r3, [pc, #388]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0xd6>
 8002a80:	e014      	b.n	8002aac <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7ff fa79 	bl	8001f78 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8a:	f7ff fa75 	bl	8001f78 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b64      	cmp	r3, #100	; 0x64
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e1c7      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9c:	4b57      	ldr	r3, [pc, #348]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f0      	bne.n	8002a8a <HAL_RCC_OscConfig+0xfe>
 8002aa8:	e000      	b.n	8002aac <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aaa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d06f      	beq.n	8002b98 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ab8:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d017      	beq.n	8002af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ac4:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d105      	bne.n	8002adc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ad0:	4b4a      	ldr	r3, [pc, #296]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002adc:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	d11c      	bne.n	8002b22 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae8:	4b44      	ldr	r3, [pc, #272]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d116      	bne.n	8002b22 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af4:	4b41      	ldr	r3, [pc, #260]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_OscConfig+0x180>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e18f      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4938      	ldr	r1, [pc, #224]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b20:	e03a      	b.n	8002b98 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d020      	beq.n	8002b6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2a:	4b35      	ldr	r3, [pc, #212]	; (8002c00 <HAL_RCC_OscConfig+0x274>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7ff fa22 	bl	8001f78 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b38:	f7ff fa1e 	bl	8001f78 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e170      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4a:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b56:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4925      	ldr	r1, [pc, #148]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
 8002b6a:	e015      	b.n	8002b98 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6c:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCC_OscConfig+0x274>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7ff fa01 	bl	8001f78 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7ff f9fd 	bl	8001f78 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e14f      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d037      	beq.n	8002c14 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d016      	beq.n	8002bda <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bac:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_RCC_OscConfig+0x278>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7ff f9e1 	bl	8001f78 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bba:	f7ff f9dd 	bl	8001f78 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e12f      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x22e>
 8002bd8:	e01c      	b.n	8002c14 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_RCC_OscConfig+0x278>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be0:	f7ff f9ca 	bl	8001f78 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be6:	e00f      	b.n	8002c08 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be8:	f7ff f9c6 	bl	8001f78 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d908      	bls.n	8002c08 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e118      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	42470000 	.word	0x42470000
 8002c04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c08:	4b8a      	ldr	r3, [pc, #552]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e9      	bne.n	8002be8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8097 	beq.w	8002d50 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c26:	4b83      	ldr	r3, [pc, #524]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10f      	bne.n	8002c52 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b7f      	ldr	r3, [pc, #508]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a7e      	ldr	r2, [pc, #504]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b7c      	ldr	r3, [pc, #496]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b79      	ldr	r3, [pc, #484]	; (8002e38 <HAL_RCC_OscConfig+0x4ac>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x4ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a75      	ldr	r2, [pc, #468]	; (8002e38 <HAL_RCC_OscConfig+0x4ac>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7ff f985 	bl	8001f78 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7ff f981 	bl	8001f78 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e0d3      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b6c      	ldr	r3, [pc, #432]	; (8002e38 <HAL_RCC_OscConfig+0x4ac>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x31a>
 8002c98:	4b66      	ldr	r3, [pc, #408]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	4a65      	ldr	r2, [pc, #404]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca4:	e01c      	b.n	8002ce0 <HAL_RCC_OscConfig+0x354>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x33c>
 8002cae:	4b61      	ldr	r3, [pc, #388]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	4a60      	ldr	r2, [pc, #384]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cba:	4b5e      	ldr	r3, [pc, #376]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4a5d      	ldr	r2, [pc, #372]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc6:	e00b      	b.n	8002ce0 <HAL_RCC_OscConfig+0x354>
 8002cc8:	4b5a      	ldr	r3, [pc, #360]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	4a59      	ldr	r2, [pc, #356]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd4:	4b57      	ldr	r3, [pc, #348]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a56      	ldr	r2, [pc, #344]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002cda:	f023 0304 	bic.w	r3, r3, #4
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d015      	beq.n	8002d14 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7ff f946 	bl	8001f78 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7ff f942 	bl	8001f78 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e092      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d06:	4b4b      	ldr	r3, [pc, #300]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0ee      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x364>
 8002d12:	e014      	b.n	8002d3e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d14:	f7ff f930 	bl	8001f78 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7ff f92c 	bl	8001f78 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e07c      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d32:	4b40      	ldr	r3, [pc, #256]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1ee      	bne.n	8002d1c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d105      	bne.n	8002d50 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d44:	4b3b      	ldr	r3, [pc, #236]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	4a3a      	ldr	r2, [pc, #232]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d068      	beq.n	8002e2a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d58:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d060      	beq.n	8002e26 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d145      	bne.n	8002df8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6c:	4b33      	ldr	r3, [pc, #204]	; (8002e3c <HAL_RCC_OscConfig+0x4b0>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7ff f901 	bl	8001f78 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7ff f8fd 	bl	8001f78 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e04f      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8c:	4b29      	ldr	r3, [pc, #164]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	019b      	lsls	r3, r3, #6
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	3b01      	subs	r3, #1
 8002db2:	041b      	lsls	r3, r3, #16
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	061b      	lsls	r3, r3, #24
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	071b      	lsls	r3, r3, #28
 8002dc4:	491b      	ldr	r1, [pc, #108]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dca:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <HAL_RCC_OscConfig+0x4b0>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7ff f8d2 	bl	8001f78 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7ff f8ce 	bl	8001f78 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e020      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x44c>
 8002df6:	e018      	b.n	8002e2a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df8:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <HAL_RCC_OscConfig+0x4b0>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7ff f8bb 	bl	8001f78 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e06:	f7ff f8b7 	bl	8001f78 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e009      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_RCC_OscConfig+0x4a8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f0      	bne.n	8002e06 <HAL_RCC_OscConfig+0x47a>
 8002e24:	e001      	b.n	8002e2a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40007000 	.word	0x40007000
 8002e3c:	42470060 	.word	0x42470060

08002e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e056      	b.n	8002f00 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7fe febb 	bl	8001be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	ea42 0103 	orr.w	r1, r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	f003 0104 	and.w	r1, r3, #4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	4613      	mov	r3, r2
 8002f16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_SPI_Transmit+0x22>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e11e      	b.n	8003168 <HAL_SPI_Transmit+0x260>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f32:	f7ff f821 	bl	8001f78 <HAL_GetTick>
 8002f36:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d002      	beq.n	8002f4e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f4c:	e103      	b.n	8003156 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <HAL_SPI_Transmit+0x52>
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f5e:	e0fa      	b.n	8003156 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2203      	movs	r2, #3
 8002f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	88fa      	ldrh	r2, [r7, #6]
 8002f78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	88fa      	ldrh	r2, [r7, #6]
 8002f7e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa6:	d107      	bne.n	8002fb8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc2:	2b40      	cmp	r3, #64	; 0x40
 8002fc4:	d007      	beq.n	8002fd6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fde:	d14b      	bne.n	8003078 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_SPI_Transmit+0xe6>
 8002fe8:	8afb      	ldrh	r3, [r7, #22]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d13e      	bne.n	800306c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	881a      	ldrh	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	1c9a      	adds	r2, r3, #2
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003012:	e02b      	b.n	800306c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b02      	cmp	r3, #2
 8003020:	d112      	bne.n	8003048 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	1c9a      	adds	r2, r3, #2
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	86da      	strh	r2, [r3, #54]	; 0x36
 8003046:	e011      	b.n	800306c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003048:	f7fe ff96 	bl	8001f78 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d803      	bhi.n	8003060 <HAL_SPI_Transmit+0x158>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305e:	d102      	bne.n	8003066 <HAL_SPI_Transmit+0x15e>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	77fb      	strb	r3, [r7, #31]
          goto error;
 800306a:	e074      	b.n	8003156 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ce      	bne.n	8003014 <HAL_SPI_Transmit+0x10c>
 8003076:	e04c      	b.n	8003112 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_SPI_Transmit+0x17e>
 8003080:	8afb      	ldrh	r3, [r7, #22]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d140      	bne.n	8003108 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030ac:	e02c      	b.n	8003108 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d113      	bne.n	80030e4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	7812      	ldrb	r2, [r2, #0]
 80030c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80030e2:	e011      	b.n	8003108 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030e4:	f7fe ff48 	bl	8001f78 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d803      	bhi.n	80030fc <HAL_SPI_Transmit+0x1f4>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fa:	d102      	bne.n	8003102 <HAL_SPI_Transmit+0x1fa>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003106:	e026      	b.n	8003156 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1cd      	bne.n	80030ae <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	6839      	ldr	r1, [r7, #0]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fa44 	bl	80035a4 <SPI_EndRxTxTransaction>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e000      	b.n	8003156 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003154:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003166:	7ffb      	ldrb	r3, [r7, #31]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3720      	adds	r7, #32
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08c      	sub	sp, #48	; 0x30
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800317e:	2301      	movs	r3, #1
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_SPI_TransmitReceive+0x26>
 8003192:	2302      	movs	r3, #2
 8003194:	e18a      	b.n	80034ac <HAL_SPI_TransmitReceive+0x33c>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800319e:	f7fe feeb 	bl	8001f78 <HAL_GetTick>
 80031a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031b4:	887b      	ldrh	r3, [r7, #2]
 80031b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d00f      	beq.n	80031e0 <HAL_SPI_TransmitReceive+0x70>
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031c6:	d107      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x68>
 80031d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d003      	beq.n	80031e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
 80031da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031de:	e15b      	b.n	8003498 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_SPI_TransmitReceive+0x82>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_SPI_TransmitReceive+0x82>
 80031ec:	887b      	ldrh	r3, [r7, #2]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d103      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031f8:	e14e      	b.n	8003498 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b04      	cmp	r3, #4
 8003204:	d003      	beq.n	800320e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2205      	movs	r2, #5
 800320a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	887a      	ldrh	r2, [r7, #2]
 800321e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	887a      	ldrh	r2, [r7, #2]
 8003236:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324e:	2b40      	cmp	r3, #64	; 0x40
 8003250:	d007      	beq.n	8003262 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003260:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326a:	d178      	bne.n	800335e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_SPI_TransmitReceive+0x10a>
 8003274:	8b7b      	ldrh	r3, [r7, #26]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d166      	bne.n	8003348 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	881a      	ldrh	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	1c9a      	adds	r2, r3, #2
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800329e:	e053      	b.n	8003348 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d11b      	bne.n	80032e6 <HAL_SPI_TransmitReceive+0x176>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d016      	beq.n	80032e6 <HAL_SPI_TransmitReceive+0x176>
 80032b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d113      	bne.n	80032e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	881a      	ldrh	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	1c9a      	adds	r2, r3, #2
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d119      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x1b8>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d014      	beq.n	8003328 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	b292      	uxth	r2, r2
 800330a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	1c9a      	adds	r2, r3, #2
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003324:	2301      	movs	r3, #1
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003328:	f7fe fe26 	bl	8001f78 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003334:	429a      	cmp	r2, r3
 8003336:	d807      	bhi.n	8003348 <HAL_SPI_TransmitReceive+0x1d8>
 8003338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333e:	d003      	beq.n	8003348 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003346:	e0a7      	b.n	8003498 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1a6      	bne.n	80032a0 <HAL_SPI_TransmitReceive+0x130>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1a1      	bne.n	80032a0 <HAL_SPI_TransmitReceive+0x130>
 800335c:	e07c      	b.n	8003458 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_SPI_TransmitReceive+0x1fc>
 8003366:	8b7b      	ldrh	r3, [r7, #26]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d16b      	bne.n	8003444 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003392:	e057      	b.n	8003444 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d11c      	bne.n	80033dc <HAL_SPI_TransmitReceive+0x26c>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d017      	beq.n	80033dc <HAL_SPI_TransmitReceive+0x26c>
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d114      	bne.n	80033dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	7812      	ldrb	r2, [r2, #0]
 80033be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d119      	bne.n	800341e <HAL_SPI_TransmitReceive+0x2ae>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d014      	beq.n	800341e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800341a:	2301      	movs	r3, #1
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800341e:	f7fe fdab 	bl	8001f78 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800342a:	429a      	cmp	r2, r3
 800342c:	d803      	bhi.n	8003436 <HAL_SPI_TransmitReceive+0x2c6>
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d102      	bne.n	800343c <HAL_SPI_TransmitReceive+0x2cc>
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	2b00      	cmp	r3, #0
 800343a:	d103      	bne.n	8003444 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003442:	e029      	b.n	8003498 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1a2      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x224>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d19d      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f8a1 	bl	80035a4 <SPI_EndRxTxTransaction>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003474:	e010      	b.n	8003498 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10b      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	e000      	b.n	8003498 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003496:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3730      	adds	r7, #48	; 0x30
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034c2:	b2db      	uxtb	r3, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	4613      	mov	r3, r2
 80034de:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034e0:	e04c      	b.n	800357c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d048      	beq.n	800357c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80034ea:	f7fe fd45 	bl	8001f78 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d902      	bls.n	8003500 <SPI_WaitFlagStateUntilTimeout+0x30>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d13d      	bne.n	800357c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800350e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003518:	d111      	bne.n	800353e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003522:	d004      	beq.n	800352e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352c:	d107      	bne.n	800353e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800353c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003546:	d10f      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003566:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e00f      	b.n	800359c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	429a      	cmp	r2, r3
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	429a      	cmp	r2, r3
 8003598:	d1a3      	bne.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <SPI_EndRxTxTransaction+0x7c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <SPI_EndRxTxTransaction+0x80>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	0d5b      	lsrs	r3, r3, #21
 80035bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035c0:	fb02 f303 	mul.w	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ce:	d112      	bne.n	80035f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2200      	movs	r2, #0
 80035d8:	2180      	movs	r1, #128	; 0x80
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f7ff ff78 	bl	80034d0 <SPI_WaitFlagStateUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e00f      	b.n	8003616 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3b01      	subs	r3, #1
 8003600:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360c:	2b80      	cmp	r3, #128	; 0x80
 800360e:	d0f2      	beq.n	80035f6 <SPI_EndRxTxTransaction+0x52>
 8003610:	e000      	b.n	8003614 <SPI_EndRxTxTransaction+0x70>
        break;
 8003612:	bf00      	nop
  }

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000004 	.word	0x20000004
 8003624:	165e9f81 	.word	0x165e9f81

08003628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e03f      	b.n	80036ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe fb12 	bl	8001c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	; 0x24
 8003658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800366a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f90b 	bl	8003888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b088      	sub	sp, #32
 80036c6:	af02      	add	r7, sp, #8
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b20      	cmp	r3, #32
 80036e0:	f040 8083 	bne.w	80037ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_UART_Transmit+0x2e>
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e07b      	b.n	80037ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Transmit+0x40>
 80036fe:	2302      	movs	r3, #2
 8003700:	e074      	b.n	80037ec <HAL_UART_Transmit+0x12a>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2221      	movs	r2, #33	; 0x21
 8003714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003718:	f7fe fc2e 	bl	8001f78 <HAL_GetTick>
 800371c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003732:	e042      	b.n	80037ba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374a:	d122      	bne.n	8003792 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2200      	movs	r2, #0
 8003754:	2180      	movs	r1, #128	; 0x80
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f84c 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e042      	b.n	80037ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003778:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d103      	bne.n	800378a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	3302      	adds	r3, #2
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	e017      	b.n	80037ba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	3301      	adds	r3, #1
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	e013      	b.n	80037ba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	2180      	movs	r1, #128	; 0x80
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f829 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e01f      	b.n	80037ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	60ba      	str	r2, [r7, #8]
 80037b2:	781a      	ldrb	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1b7      	bne.n	8003734 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2200      	movs	r2, #0
 80037cc:	2140      	movs	r1, #64	; 0x40
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f810 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e006      	b.n	80037ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003804:	e02c      	b.n	8003860 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d028      	beq.n	8003860 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x30>
 8003814:	f7fe fbb0 	bl	8001f78 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	429a      	cmp	r2, r3
 8003822:	d21d      	bcs.n	8003860 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003832:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e00f      	b.n	8003880 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4013      	ands	r3, r2
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	429a      	cmp	r2, r3
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	429a      	cmp	r2, r3
 800387c:	d0c3      	beq.n	8003806 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80038ca:	f023 030c 	bic.w	r3, r3, #12
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	68f9      	ldr	r1, [r7, #12]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f6:	f040 818b 	bne.w	8003c10 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4ac1      	ldr	r2, [pc, #772]	; (8003c04 <UART_SetConfig+0x37c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d005      	beq.n	8003910 <UART_SetConfig+0x88>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4abf      	ldr	r2, [pc, #764]	; (8003c08 <UART_SetConfig+0x380>)
 800390a:	4293      	cmp	r3, r2
 800390c:	f040 80bd 	bne.w	8003a8a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003910:	f7fe fed6 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8003914:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	461d      	mov	r5, r3
 800391a:	f04f 0600 	mov.w	r6, #0
 800391e:	46a8      	mov	r8, r5
 8003920:	46b1      	mov	r9, r6
 8003922:	eb18 0308 	adds.w	r3, r8, r8
 8003926:	eb49 0409 	adc.w	r4, r9, r9
 800392a:	4698      	mov	r8, r3
 800392c:	46a1      	mov	r9, r4
 800392e:	eb18 0805 	adds.w	r8, r8, r5
 8003932:	eb49 0906 	adc.w	r9, r9, r6
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003942:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003946:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800394a:	4688      	mov	r8, r1
 800394c:	4691      	mov	r9, r2
 800394e:	eb18 0005 	adds.w	r0, r8, r5
 8003952:	eb49 0106 	adc.w	r1, r9, r6
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	461d      	mov	r5, r3
 800395c:	f04f 0600 	mov.w	r6, #0
 8003960:	196b      	adds	r3, r5, r5
 8003962:	eb46 0406 	adc.w	r4, r6, r6
 8003966:	461a      	mov	r2, r3
 8003968:	4623      	mov	r3, r4
 800396a:	f7fd f897 	bl	8000a9c <__aeabi_uldivmod>
 800396e:	4603      	mov	r3, r0
 8003970:	460c      	mov	r4, r1
 8003972:	461a      	mov	r2, r3
 8003974:	4ba5      	ldr	r3, [pc, #660]	; (8003c0c <UART_SetConfig+0x384>)
 8003976:	fba3 2302 	umull	r2, r3, r3, r2
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	461d      	mov	r5, r3
 8003984:	f04f 0600 	mov.w	r6, #0
 8003988:	46a9      	mov	r9, r5
 800398a:	46b2      	mov	sl, r6
 800398c:	eb19 0309 	adds.w	r3, r9, r9
 8003990:	eb4a 040a 	adc.w	r4, sl, sl
 8003994:	4699      	mov	r9, r3
 8003996:	46a2      	mov	sl, r4
 8003998:	eb19 0905 	adds.w	r9, r9, r5
 800399c:	eb4a 0a06 	adc.w	sl, sl, r6
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039b4:	4689      	mov	r9, r1
 80039b6:	4692      	mov	sl, r2
 80039b8:	eb19 0005 	adds.w	r0, r9, r5
 80039bc:	eb4a 0106 	adc.w	r1, sl, r6
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	461d      	mov	r5, r3
 80039c6:	f04f 0600 	mov.w	r6, #0
 80039ca:	196b      	adds	r3, r5, r5
 80039cc:	eb46 0406 	adc.w	r4, r6, r6
 80039d0:	461a      	mov	r2, r3
 80039d2:	4623      	mov	r3, r4
 80039d4:	f7fd f862 	bl	8000a9c <__aeabi_uldivmod>
 80039d8:	4603      	mov	r3, r0
 80039da:	460c      	mov	r4, r1
 80039dc:	461a      	mov	r2, r3
 80039de:	4b8b      	ldr	r3, [pc, #556]	; (8003c0c <UART_SetConfig+0x384>)
 80039e0:	fba3 1302 	umull	r1, r3, r3, r2
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	2164      	movs	r1, #100	; 0x64
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	3332      	adds	r3, #50	; 0x32
 80039f2:	4a86      	ldr	r2, [pc, #536]	; (8003c0c <UART_SetConfig+0x384>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a00:	4498      	add	r8, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	461d      	mov	r5, r3
 8003a06:	f04f 0600 	mov.w	r6, #0
 8003a0a:	46a9      	mov	r9, r5
 8003a0c:	46b2      	mov	sl, r6
 8003a0e:	eb19 0309 	adds.w	r3, r9, r9
 8003a12:	eb4a 040a 	adc.w	r4, sl, sl
 8003a16:	4699      	mov	r9, r3
 8003a18:	46a2      	mov	sl, r4
 8003a1a:	eb19 0905 	adds.w	r9, r9, r5
 8003a1e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a36:	4689      	mov	r9, r1
 8003a38:	4692      	mov	sl, r2
 8003a3a:	eb19 0005 	adds.w	r0, r9, r5
 8003a3e:	eb4a 0106 	adc.w	r1, sl, r6
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	461d      	mov	r5, r3
 8003a48:	f04f 0600 	mov.w	r6, #0
 8003a4c:	196b      	adds	r3, r5, r5
 8003a4e:	eb46 0406 	adc.w	r4, r6, r6
 8003a52:	461a      	mov	r2, r3
 8003a54:	4623      	mov	r3, r4
 8003a56:	f7fd f821 	bl	8000a9c <__aeabi_uldivmod>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	460c      	mov	r4, r1
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b6a      	ldr	r3, [pc, #424]	; (8003c0c <UART_SetConfig+0x384>)
 8003a62:	fba3 1302 	umull	r1, r3, r3, r2
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	2164      	movs	r1, #100	; 0x64
 8003a6a:	fb01 f303 	mul.w	r3, r1, r3
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	3332      	adds	r3, #50	; 0x32
 8003a74:	4a65      	ldr	r2, [pc, #404]	; (8003c0c <UART_SetConfig+0x384>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	f003 0207 	and.w	r2, r3, #7
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4442      	add	r2, r8
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	e26f      	b.n	8003f6a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a8a:	f7fe fe05 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8003a8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	461d      	mov	r5, r3
 8003a94:	f04f 0600 	mov.w	r6, #0
 8003a98:	46a8      	mov	r8, r5
 8003a9a:	46b1      	mov	r9, r6
 8003a9c:	eb18 0308 	adds.w	r3, r8, r8
 8003aa0:	eb49 0409 	adc.w	r4, r9, r9
 8003aa4:	4698      	mov	r8, r3
 8003aa6:	46a1      	mov	r9, r4
 8003aa8:	eb18 0805 	adds.w	r8, r8, r5
 8003aac:	eb49 0906 	adc.w	r9, r9, r6
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003abc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ac0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ac4:	4688      	mov	r8, r1
 8003ac6:	4691      	mov	r9, r2
 8003ac8:	eb18 0005 	adds.w	r0, r8, r5
 8003acc:	eb49 0106 	adc.w	r1, r9, r6
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	461d      	mov	r5, r3
 8003ad6:	f04f 0600 	mov.w	r6, #0
 8003ada:	196b      	adds	r3, r5, r5
 8003adc:	eb46 0406 	adc.w	r4, r6, r6
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	f7fc ffda 	bl	8000a9c <__aeabi_uldivmod>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	461a      	mov	r2, r3
 8003aee:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <UART_SetConfig+0x384>)
 8003af0:	fba3 2302 	umull	r2, r3, r3, r2
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	461d      	mov	r5, r3
 8003afe:	f04f 0600 	mov.w	r6, #0
 8003b02:	46a9      	mov	r9, r5
 8003b04:	46b2      	mov	sl, r6
 8003b06:	eb19 0309 	adds.w	r3, r9, r9
 8003b0a:	eb4a 040a 	adc.w	r4, sl, sl
 8003b0e:	4699      	mov	r9, r3
 8003b10:	46a2      	mov	sl, r4
 8003b12:	eb19 0905 	adds.w	r9, r9, r5
 8003b16:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b2e:	4689      	mov	r9, r1
 8003b30:	4692      	mov	sl, r2
 8003b32:	eb19 0005 	adds.w	r0, r9, r5
 8003b36:	eb4a 0106 	adc.w	r1, sl, r6
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	461d      	mov	r5, r3
 8003b40:	f04f 0600 	mov.w	r6, #0
 8003b44:	196b      	adds	r3, r5, r5
 8003b46:	eb46 0406 	adc.w	r4, r6, r6
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	f7fc ffa5 	bl	8000a9c <__aeabi_uldivmod>
 8003b52:	4603      	mov	r3, r0
 8003b54:	460c      	mov	r4, r1
 8003b56:	461a      	mov	r2, r3
 8003b58:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <UART_SetConfig+0x384>)
 8003b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2164      	movs	r1, #100	; 0x64
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	3332      	adds	r3, #50	; 0x32
 8003b6c:	4a27      	ldr	r2, [pc, #156]	; (8003c0c <UART_SetConfig+0x384>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b7a:	4498      	add	r8, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	461d      	mov	r5, r3
 8003b80:	f04f 0600 	mov.w	r6, #0
 8003b84:	46a9      	mov	r9, r5
 8003b86:	46b2      	mov	sl, r6
 8003b88:	eb19 0309 	adds.w	r3, r9, r9
 8003b8c:	eb4a 040a 	adc.w	r4, sl, sl
 8003b90:	4699      	mov	r9, r3
 8003b92:	46a2      	mov	sl, r4
 8003b94:	eb19 0905 	adds.w	r9, r9, r5
 8003b98:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b9c:	f04f 0100 	mov.w	r1, #0
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ba8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bb0:	4689      	mov	r9, r1
 8003bb2:	4692      	mov	sl, r2
 8003bb4:	eb19 0005 	adds.w	r0, r9, r5
 8003bb8:	eb4a 0106 	adc.w	r1, sl, r6
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	461d      	mov	r5, r3
 8003bc2:	f04f 0600 	mov.w	r6, #0
 8003bc6:	196b      	adds	r3, r5, r5
 8003bc8:	eb46 0406 	adc.w	r4, r6, r6
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4623      	mov	r3, r4
 8003bd0:	f7fc ff64 	bl	8000a9c <__aeabi_uldivmod>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <UART_SetConfig+0x384>)
 8003bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	2164      	movs	r1, #100	; 0x64
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	3332      	adds	r3, #50	; 0x32
 8003bee:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <UART_SetConfig+0x384>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	f003 0207 	and.w	r2, r3, #7
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4442      	add	r2, r8
 8003c00:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c02:	e1b2      	b.n	8003f6a <UART_SetConfig+0x6e2>
 8003c04:	40011000 	.word	0x40011000
 8003c08:	40011400 	.word	0x40011400
 8003c0c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4ad7      	ldr	r2, [pc, #860]	; (8003f74 <UART_SetConfig+0x6ec>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d005      	beq.n	8003c26 <UART_SetConfig+0x39e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4ad6      	ldr	r2, [pc, #856]	; (8003f78 <UART_SetConfig+0x6f0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	f040 80d1 	bne.w	8003dc8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c26:	f7fe fd4b 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8003c2a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	469a      	mov	sl, r3
 8003c30:	f04f 0b00 	mov.w	fp, #0
 8003c34:	46d0      	mov	r8, sl
 8003c36:	46d9      	mov	r9, fp
 8003c38:	eb18 0308 	adds.w	r3, r8, r8
 8003c3c:	eb49 0409 	adc.w	r4, r9, r9
 8003c40:	4698      	mov	r8, r3
 8003c42:	46a1      	mov	r9, r4
 8003c44:	eb18 080a 	adds.w	r8, r8, sl
 8003c48:	eb49 090b 	adc.w	r9, r9, fp
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c58:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c5c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c60:	4688      	mov	r8, r1
 8003c62:	4691      	mov	r9, r2
 8003c64:	eb1a 0508 	adds.w	r5, sl, r8
 8003c68:	eb4b 0609 	adc.w	r6, fp, r9
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4619      	mov	r1, r3
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	f04f 0400 	mov.w	r4, #0
 8003c7e:	0094      	lsls	r4, r2, #2
 8003c80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c84:	008b      	lsls	r3, r1, #2
 8003c86:	461a      	mov	r2, r3
 8003c88:	4623      	mov	r3, r4
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	4631      	mov	r1, r6
 8003c8e:	f7fc ff05 	bl	8000a9c <__aeabi_uldivmod>
 8003c92:	4603      	mov	r3, r0
 8003c94:	460c      	mov	r4, r1
 8003c96:	461a      	mov	r2, r3
 8003c98:	4bb8      	ldr	r3, [pc, #736]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	469b      	mov	fp, r3
 8003ca8:	f04f 0c00 	mov.w	ip, #0
 8003cac:	46d9      	mov	r9, fp
 8003cae:	46e2      	mov	sl, ip
 8003cb0:	eb19 0309 	adds.w	r3, r9, r9
 8003cb4:	eb4a 040a 	adc.w	r4, sl, sl
 8003cb8:	4699      	mov	r9, r3
 8003cba:	46a2      	mov	sl, r4
 8003cbc:	eb19 090b 	adds.w	r9, r9, fp
 8003cc0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cd8:	4689      	mov	r9, r1
 8003cda:	4692      	mov	sl, r2
 8003cdc:	eb1b 0509 	adds.w	r5, fp, r9
 8003ce0:	eb4c 060a 	adc.w	r6, ip, sl
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	f04f 0400 	mov.w	r4, #0
 8003cf6:	0094      	lsls	r4, r2, #2
 8003cf8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cfc:	008b      	lsls	r3, r1, #2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4623      	mov	r3, r4
 8003d02:	4628      	mov	r0, r5
 8003d04:	4631      	mov	r1, r6
 8003d06:	f7fc fec9 	bl	8000a9c <__aeabi_uldivmod>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4b9a      	ldr	r3, [pc, #616]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003d12:	fba3 1302 	umull	r1, r3, r3, r2
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2164      	movs	r1, #100	; 0x64
 8003d1a:	fb01 f303 	mul.w	r3, r1, r3
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	3332      	adds	r3, #50	; 0x32
 8003d24:	4a95      	ldr	r2, [pc, #596]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d30:	4498      	add	r8, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	469b      	mov	fp, r3
 8003d36:	f04f 0c00 	mov.w	ip, #0
 8003d3a:	46d9      	mov	r9, fp
 8003d3c:	46e2      	mov	sl, ip
 8003d3e:	eb19 0309 	adds.w	r3, r9, r9
 8003d42:	eb4a 040a 	adc.w	r4, sl, sl
 8003d46:	4699      	mov	r9, r3
 8003d48:	46a2      	mov	sl, r4
 8003d4a:	eb19 090b 	adds.w	r9, r9, fp
 8003d4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d66:	4689      	mov	r9, r1
 8003d68:	4692      	mov	sl, r2
 8003d6a:	eb1b 0509 	adds.w	r5, fp, r9
 8003d6e:	eb4c 060a 	adc.w	r6, ip, sl
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4619      	mov	r1, r3
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f04f 0400 	mov.w	r4, #0
 8003d84:	0094      	lsls	r4, r2, #2
 8003d86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d8a:	008b      	lsls	r3, r1, #2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	4628      	mov	r0, r5
 8003d92:	4631      	mov	r1, r6
 8003d94:	f7fc fe82 	bl	8000a9c <__aeabi_uldivmod>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4b77      	ldr	r3, [pc, #476]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003da0:	fba3 1302 	umull	r1, r3, r3, r2
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	2164      	movs	r1, #100	; 0x64
 8003da8:	fb01 f303 	mul.w	r3, r1, r3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	3332      	adds	r3, #50	; 0x32
 8003db2:	4a72      	ldr	r2, [pc, #456]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	f003 020f 	and.w	r2, r3, #15
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4442      	add	r2, r8
 8003dc4:	609a      	str	r2, [r3, #8]
 8003dc6:	e0d0      	b.n	8003f6a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f7fe fc66 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8003dcc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	469a      	mov	sl, r3
 8003dd2:	f04f 0b00 	mov.w	fp, #0
 8003dd6:	46d0      	mov	r8, sl
 8003dd8:	46d9      	mov	r9, fp
 8003dda:	eb18 0308 	adds.w	r3, r8, r8
 8003dde:	eb49 0409 	adc.w	r4, r9, r9
 8003de2:	4698      	mov	r8, r3
 8003de4:	46a1      	mov	r9, r4
 8003de6:	eb18 080a 	adds.w	r8, r8, sl
 8003dea:	eb49 090b 	adc.w	r9, r9, fp
 8003dee:	f04f 0100 	mov.w	r1, #0
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dfa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003dfe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e02:	4688      	mov	r8, r1
 8003e04:	4691      	mov	r9, r2
 8003e06:	eb1a 0508 	adds.w	r5, sl, r8
 8003e0a:	eb4b 0609 	adc.w	r6, fp, r9
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4619      	mov	r1, r3
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	f04f 0400 	mov.w	r4, #0
 8003e20:	0094      	lsls	r4, r2, #2
 8003e22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e26:	008b      	lsls	r3, r1, #2
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	4631      	mov	r1, r6
 8003e30:	f7fc fe34 	bl	8000a9c <__aeabi_uldivmod>
 8003e34:	4603      	mov	r3, r0
 8003e36:	460c      	mov	r4, r1
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	469b      	mov	fp, r3
 8003e4a:	f04f 0c00 	mov.w	ip, #0
 8003e4e:	46d9      	mov	r9, fp
 8003e50:	46e2      	mov	sl, ip
 8003e52:	eb19 0309 	adds.w	r3, r9, r9
 8003e56:	eb4a 040a 	adc.w	r4, sl, sl
 8003e5a:	4699      	mov	r9, r3
 8003e5c:	46a2      	mov	sl, r4
 8003e5e:	eb19 090b 	adds.w	r9, r9, fp
 8003e62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e7a:	4689      	mov	r9, r1
 8003e7c:	4692      	mov	sl, r2
 8003e7e:	eb1b 0509 	adds.w	r5, fp, r9
 8003e82:	eb4c 060a 	adc.w	r6, ip, sl
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	f04f 0400 	mov.w	r4, #0
 8003e98:	0094      	lsls	r4, r2, #2
 8003e9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e9e:	008b      	lsls	r3, r1, #2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4623      	mov	r3, r4
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	4631      	mov	r1, r6
 8003ea8:	f7fc fdf8 	bl	8000a9c <__aeabi_uldivmod>
 8003eac:	4603      	mov	r3, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4b32      	ldr	r3, [pc, #200]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	2164      	movs	r1, #100	; 0x64
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	3332      	adds	r3, #50	; 0x32
 8003ec6:	4a2d      	ldr	r2, [pc, #180]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed2:	4498      	add	r8, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	469b      	mov	fp, r3
 8003ed8:	f04f 0c00 	mov.w	ip, #0
 8003edc:	46d9      	mov	r9, fp
 8003ede:	46e2      	mov	sl, ip
 8003ee0:	eb19 0309 	adds.w	r3, r9, r9
 8003ee4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ee8:	4699      	mov	r9, r3
 8003eea:	46a2      	mov	sl, r4
 8003eec:	eb19 090b 	adds.w	r9, r9, fp
 8003ef0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ef4:	f04f 0100 	mov.w	r1, #0
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f08:	4689      	mov	r9, r1
 8003f0a:	4692      	mov	sl, r2
 8003f0c:	eb1b 0509 	adds.w	r5, fp, r9
 8003f10:	eb4c 060a 	adc.w	r6, ip, sl
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	f04f 0400 	mov.w	r4, #0
 8003f26:	0094      	lsls	r4, r2, #2
 8003f28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f2c:	008b      	lsls	r3, r1, #2
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4623      	mov	r3, r4
 8003f32:	4628      	mov	r0, r5
 8003f34:	4631      	mov	r1, r6
 8003f36:	f7fc fdb1 	bl	8000a9c <__aeabi_uldivmod>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003f42:	fba3 1302 	umull	r1, r3, r3, r2
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2164      	movs	r1, #100	; 0x64
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	3332      	adds	r3, #50	; 0x32
 8003f54:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <UART_SetConfig+0x6f4>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4442      	add	r2, r8
 8003f66:	609a      	str	r2, [r3, #8]
}
 8003f68:	e7ff      	b.n	8003f6a <UART_SetConfig+0x6e2>
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f74:	40011000 	.word	0x40011000
 8003f78:	40011400 	.word	0x40011400
 8003f7c:	51eb851f 	.word	0x51eb851f

08003f80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003f84:	4904      	ldr	r1, [pc, #16]	; (8003f98 <MX_FATFS_Init+0x18>)
 8003f86:	4805      	ldr	r0, [pc, #20]	; (8003f9c <MX_FATFS_Init+0x1c>)
 8003f88:	f002 ff90 	bl	8006eac <FATFS_LinkDriver>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <MX_FATFS_Init+0x20>)
 8003f92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	2000280c 	.word	0x2000280c
 8003f9c:	20000010 	.word	0x20000010
 8003fa0:	20002810 	.word	0x20002810

08003fa4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003fa8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fd f8a5 	bl	8001110 <SD_disk_initialize>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	4603      	mov	r3, r0
 8003fda:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd f980 	bl	80012e4 <SD_disk_status>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004000:	7bf8      	ldrb	r0, [r7, #15]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	f7fd f982 	bl	8001310 <SD_disk_read>
 800400c:	4603      	mov	r3, r0
 800400e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	4603      	mov	r3, r0
 8004026:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004028:	7bf8      	ldrb	r0, [r7, #15]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	68b9      	ldr	r1, [r7, #8]
 8004030:	f7fd f9d8 	bl	80013e4 <SD_disk_write>
 8004034:	4603      	mov	r3, r0
 8004036:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	603a      	str	r2, [r7, #0]
 800404a:	71fb      	strb	r3, [r7, #7]
 800404c:	460b      	mov	r3, r1
 800404e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	79b9      	ldrb	r1, [r7, #6]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fd fa48 	bl	80014ec <SD_disk_ioctl>
 800405c:	4603      	mov	r3, r0
 800405e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	4a08      	ldr	r2, [pc, #32]	; (8004098 <disk_status+0x30>)
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	79fa      	ldrb	r2, [r7, #7]
 8004080:	4905      	ldr	r1, [pc, #20]	; (8004098 <disk_status+0x30>)
 8004082:	440a      	add	r2, r1
 8004084:	7a12      	ldrb	r2, [r2, #8]
 8004086:	4610      	mov	r0, r2
 8004088:	4798      	blx	r3
 800408a:	4603      	mov	r3, r0
 800408c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800408e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	200002d4 	.word	0x200002d4

0800409c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	4a0d      	ldr	r2, [pc, #52]	; (80040e4 <disk_initialize+0x48>)
 80040ae:	5cd3      	ldrb	r3, [r2, r3]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d111      	bne.n	80040d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	4a0b      	ldr	r2, [pc, #44]	; (80040e4 <disk_initialize+0x48>)
 80040b8:	2101      	movs	r1, #1
 80040ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <disk_initialize+0x48>)
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	79fa      	ldrb	r2, [r7, #7]
 80040ca:	4906      	ldr	r1, [pc, #24]	; (80040e4 <disk_initialize+0x48>)
 80040cc:	440a      	add	r2, r1
 80040ce:	7a12      	ldrb	r2, [r2, #8]
 80040d0:	4610      	mov	r0, r2
 80040d2:	4798      	blx	r3
 80040d4:	4603      	mov	r3, r0
 80040d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	200002d4 	.word	0x200002d4

080040e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	4603      	mov	r3, r0
 80040f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <disk_read+0x3c>)
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	689c      	ldr	r4, [r3, #8]
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	4a07      	ldr	r2, [pc, #28]	; (8004124 <disk_read+0x3c>)
 8004108:	4413      	add	r3, r2
 800410a:	7a18      	ldrb	r0, [r3, #8]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	47a0      	blx	r4
 8004114:	4603      	mov	r3, r0
 8004116:	75fb      	strb	r3, [r7, #23]
  return res;
 8004118:	7dfb      	ldrb	r3, [r7, #23]
}
 800411a:	4618      	mov	r0, r3
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	bd90      	pop	{r4, r7, pc}
 8004122:	bf00      	nop
 8004124:	200002d4 	.word	0x200002d4

08004128 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004128:	b590      	push	{r4, r7, lr}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	4603      	mov	r3, r0
 8004136:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <disk_write+0x3c>)
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	68dc      	ldr	r4, [r3, #12]
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	4a07      	ldr	r2, [pc, #28]	; (8004164 <disk_write+0x3c>)
 8004148:	4413      	add	r3, r2
 800414a:	7a18      	ldrb	r0, [r3, #8]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	47a0      	blx	r4
 8004154:	4603      	mov	r3, r0
 8004156:	75fb      	strb	r3, [r7, #23]
  return res;
 8004158:	7dfb      	ldrb	r3, [r7, #23]
}
 800415a:	4618      	mov	r0, r3
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	bd90      	pop	{r4, r7, pc}
 8004162:	bf00      	nop
 8004164:	200002d4 	.word	0x200002d4

08004168 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	603a      	str	r2, [r7, #0]
 8004172:	71fb      	strb	r3, [r7, #7]
 8004174:	460b      	mov	r3, r1
 8004176:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <disk_ioctl+0x38>)
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	79fa      	ldrb	r2, [r7, #7]
 8004186:	4906      	ldr	r1, [pc, #24]	; (80041a0 <disk_ioctl+0x38>)
 8004188:	440a      	add	r2, r1
 800418a:	7a10      	ldrb	r0, [r2, #8]
 800418c:	79b9      	ldrb	r1, [r7, #6]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	4798      	blx	r3
 8004192:	4603      	mov	r3, r0
 8004194:	73fb      	strb	r3, [r7, #15]
  return res;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	200002d4 	.word	0x200002d4

080041a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3301      	adds	r3, #1
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80041b4:	89fb      	ldrh	r3, [r7, #14]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	b21a      	sxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	b21b      	sxth	r3, r3
 80041c0:	4313      	orrs	r3, r2
 80041c2:	b21b      	sxth	r3, r3
 80041c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80041c6:	89fb      	ldrh	r3, [r7, #14]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3303      	adds	r3, #3
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	3202      	adds	r2, #2
 80041ec:	7812      	ldrb	r2, [r2, #0]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	3201      	adds	r2, #1
 80041fa:	7812      	ldrb	r2, [r2, #0]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	7812      	ldrb	r2, [r2, #0]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
	return rv;
 800420c:	68fb      	ldr	r3, [r7, #12]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	887a      	ldrh	r2, [r7, #2]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	0a1b      	lsrs	r3, r3, #8
 800426a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	0a1b      	lsrs	r3, r3, #8
 800427c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	1c53      	adds	r3, r2, #1
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	1c59      	adds	r1, r3, #1
 80042cc:	6179      	str	r1, [r7, #20]
 80042ce:	7812      	ldrb	r2, [r2, #0]
 80042d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f1      	bne.n	80042c2 <mem_cpy+0x1a>
	}
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80042ea:	b480      	push	{r7}
 80042ec:	b087      	sub	sp, #28
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	617a      	str	r2, [r7, #20]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3b01      	subs	r3, #1
 800430a:	607b      	str	r3, [r7, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f3      	bne.n	80042fa <mem_set+0x10>
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800431e:	b480      	push	{r7}
 8004320:	b089      	sub	sp, #36	; 0x24
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	61fa      	str	r2, [r7, #28]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	4619      	mov	r1, r3
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	61ba      	str	r2, [r7, #24]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	1acb      	subs	r3, r1, r3
 800434a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3b01      	subs	r3, #1
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <mem_cmp+0x40>
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0eb      	beq.n	8004336 <mem_cmp+0x18>

	return r;
 800435e:	697b      	ldr	r3, [r7, #20]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3724      	adds	r7, #36	; 0x24
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004376:	e002      	b.n	800437e <chk_chr+0x12>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3301      	adds	r3, #1
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <chk_chr+0x26>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	4293      	cmp	r3, r2
 8004390:	d1f2      	bne.n	8004378 <chk_chr+0xc>
	return *str;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	781b      	ldrb	r3, [r3, #0]
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	e029      	b.n	800440c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80043b8:	4a27      	ldr	r2, [pc, #156]	; (8004458 <chk_lock+0xb4>)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	4413      	add	r3, r2
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01d      	beq.n	8004402 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80043c6:	4a24      	ldr	r2, [pc, #144]	; (8004458 <chk_lock+0xb4>)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	4413      	add	r3, r2
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d116      	bne.n	8004406 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80043d8:	4a1f      	ldr	r2, [pc, #124]	; (8004458 <chk_lock+0xb4>)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	4413      	add	r3, r2
 80043e0:	3304      	adds	r3, #4
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d10c      	bne.n	8004406 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80043ec:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <chk_lock+0xb4>)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	4413      	add	r3, r2
 80043f4:	3308      	adds	r3, #8
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d102      	bne.n	8004406 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004400:	e007      	b.n	8004412 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3301      	adds	r3, #1
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d9d2      	bls.n	80043b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d109      	bne.n	800442c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <chk_lock+0x80>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d101      	bne.n	8004428 <chk_lock+0x84>
 8004424:	2300      	movs	r3, #0
 8004426:	e010      	b.n	800444a <chk_lock+0xa6>
 8004428:	2312      	movs	r3, #18
 800442a:	e00e      	b.n	800444a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d108      	bne.n	8004444 <chk_lock+0xa0>
 8004432:	4a09      	ldr	r2, [pc, #36]	; (8004458 <chk_lock+0xb4>)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	4413      	add	r3, r2
 800443a:	330c      	adds	r3, #12
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004442:	d101      	bne.n	8004448 <chk_lock+0xa4>
 8004444:	2310      	movs	r3, #16
 8004446:	e000      	b.n	800444a <chk_lock+0xa6>
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	200000b4 	.word	0x200000b4

0800445c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004462:	2300      	movs	r3, #0
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	e002      	b.n	800446e <enq_lock+0x12>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3301      	adds	r3, #1
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d806      	bhi.n	8004482 <enq_lock+0x26>
 8004474:	4a09      	ldr	r2, [pc, #36]	; (800449c <enq_lock+0x40>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	4413      	add	r3, r2
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f2      	bne.n	8004468 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b02      	cmp	r3, #2
 8004486:	bf14      	ite	ne
 8004488:	2301      	movne	r3, #1
 800448a:	2300      	moveq	r3, #0
 800448c:	b2db      	uxtb	r3, r3
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	200000b4 	.word	0x200000b4

080044a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	e01f      	b.n	80044f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80044b0:	4a41      	ldr	r2, [pc, #260]	; (80045b8 <inc_lock+0x118>)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	4413      	add	r3, r2
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d113      	bne.n	80044ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80044c2:	4a3d      	ldr	r2, [pc, #244]	; (80045b8 <inc_lock+0x118>)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	4413      	add	r3, r2
 80044ca:	3304      	adds	r3, #4
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d109      	bne.n	80044ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80044d6:	4a38      	ldr	r2, [pc, #224]	; (80045b8 <inc_lock+0x118>)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	4413      	add	r3, r2
 80044de:	3308      	adds	r3, #8
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d006      	beq.n	80044f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3301      	adds	r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d9dc      	bls.n	80044b0 <inc_lock+0x10>
 80044f6:	e000      	b.n	80044fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80044f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d132      	bne.n	8004566 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	e002      	b.n	800450c <inc_lock+0x6c>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3301      	adds	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d806      	bhi.n	8004520 <inc_lock+0x80>
 8004512:	4a29      	ldr	r2, [pc, #164]	; (80045b8 <inc_lock+0x118>)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	4413      	add	r3, r2
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f2      	bne.n	8004506 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d101      	bne.n	800452a <inc_lock+0x8a>
 8004526:	2300      	movs	r3, #0
 8004528:	e040      	b.n	80045ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4922      	ldr	r1, [pc, #136]	; (80045b8 <inc_lock+0x118>)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	440b      	add	r3, r1
 8004536:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	491e      	ldr	r1, [pc, #120]	; (80045b8 <inc_lock+0x118>)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	440b      	add	r3, r1
 8004544:	3304      	adds	r3, #4
 8004546:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	491a      	ldr	r1, [pc, #104]	; (80045b8 <inc_lock+0x118>)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	440b      	add	r3, r1
 8004554:	3308      	adds	r3, #8
 8004556:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004558:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <inc_lock+0x118>)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	4413      	add	r3, r2
 8004560:	330c      	adds	r3, #12
 8004562:	2200      	movs	r2, #0
 8004564:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d009      	beq.n	8004580 <inc_lock+0xe0>
 800456c:	4a12      	ldr	r2, [pc, #72]	; (80045b8 <inc_lock+0x118>)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	4413      	add	r3, r2
 8004574:	330c      	adds	r3, #12
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <inc_lock+0xe0>
 800457c:	2300      	movs	r3, #0
 800457e:	e015      	b.n	80045ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d108      	bne.n	8004598 <inc_lock+0xf8>
 8004586:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <inc_lock+0x118>)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	4413      	add	r3, r2
 800458e:	330c      	adds	r3, #12
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	3301      	adds	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	e001      	b.n	800459c <inc_lock+0xfc>
 8004598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800459c:	4906      	ldr	r1, [pc, #24]	; (80045b8 <inc_lock+0x118>)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	440b      	add	r3, r1
 80045a4:	330c      	adds	r3, #12
 80045a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3301      	adds	r3, #1
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	200000b4 	.word	0x200000b4

080045bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d825      	bhi.n	800461c <dec_lock+0x60>
		n = Files[i].ctr;
 80045d0:	4a17      	ldr	r2, [pc, #92]	; (8004630 <dec_lock+0x74>)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	4413      	add	r3, r2
 80045d8:	330c      	adds	r3, #12
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80045de:	89fb      	ldrh	r3, [r7, #14]
 80045e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e4:	d101      	bne.n	80045ea <dec_lock+0x2e>
 80045e6:	2300      	movs	r3, #0
 80045e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80045ea:	89fb      	ldrh	r3, [r7, #14]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <dec_lock+0x3a>
 80045f0:	89fb      	ldrh	r3, [r7, #14]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80045f6:	4a0e      	ldr	r2, [pc, #56]	; (8004630 <dec_lock+0x74>)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	4413      	add	r3, r2
 80045fe:	330c      	adds	r3, #12
 8004600:	89fa      	ldrh	r2, [r7, #14]
 8004602:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d105      	bne.n	8004616 <dec_lock+0x5a>
 800460a:	4a09      	ldr	r2, [pc, #36]	; (8004630 <dec_lock+0x74>)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	4413      	add	r3, r2
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	737b      	strb	r3, [r7, #13]
 800461a:	e001      	b.n	8004620 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800461c:	2302      	movs	r3, #2
 800461e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004620:	7b7b      	ldrb	r3, [r7, #13]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	200000b4 	.word	0x200000b4

08004634 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e010      	b.n	8004664 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004642:	4a0d      	ldr	r2, [pc, #52]	; (8004678 <clear_lock+0x44>)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	4413      	add	r3, r2
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	429a      	cmp	r2, r3
 8004650:	d105      	bne.n	800465e <clear_lock+0x2a>
 8004652:	4a09      	ldr	r2, [pc, #36]	; (8004678 <clear_lock+0x44>)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	4413      	add	r3, r2
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3301      	adds	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d9eb      	bls.n	8004642 <clear_lock+0xe>
	}
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	200000b4 	.word	0x200000b4

0800467c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	78db      	ldrb	r3, [r3, #3]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d034      	beq.n	80046fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004694:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7858      	ldrb	r0, [r3, #1]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80046a0:	2301      	movs	r3, #1
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	f7ff fd40 	bl	8004128 <disk_write>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
 80046b2:	e022      	b.n	80046fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	1ad2      	subs	r2, r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d217      	bcs.n	80046fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	789b      	ldrb	r3, [r3, #2]
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	e010      	b.n	80046f4 <sync_window+0x78>
					wsect += fs->fsize;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4413      	add	r3, r2
 80046da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	7858      	ldrb	r0, [r3, #1]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80046e6:	2301      	movs	r3, #1
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	f7ff fd1d 	bl	8004128 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d8eb      	bhi.n	80046d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d01b      	beq.n	8004754 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff ffad 	bl	800467c <sync_window>
 8004722:	4603      	mov	r3, r0
 8004724:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d113      	bne.n	8004754 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	7858      	ldrb	r0, [r3, #1]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004736:	2301      	movs	r3, #1
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	f7ff fcd5 	bl	80040e8 <disk_read>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004744:	f04f 33ff 	mov.w	r3, #4294967295
 8004748:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ff87 	bl	800467c <sync_window>
 800476e:	4603      	mov	r3, r0
 8004770:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d159      	bne.n	800482c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d149      	bne.n	8004814 <sync_fs+0xb4>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	791b      	ldrb	r3, [r3, #4]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d145      	bne.n	8004814 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	899b      	ldrh	r3, [r3, #12]
 8004792:	461a      	mov	r2, r3
 8004794:	2100      	movs	r1, #0
 8004796:	f7ff fda8 	bl	80042ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3338      	adds	r3, #56	; 0x38
 800479e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80047a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fd37 	bl	800421a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3338      	adds	r3, #56	; 0x38
 80047b0:	4921      	ldr	r1, [pc, #132]	; (8004838 <sync_fs+0xd8>)
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fd4c 	bl	8004250 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3338      	adds	r3, #56	; 0x38
 80047bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80047c0:	491e      	ldr	r1, [pc, #120]	; (800483c <sync_fs+0xdc>)
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fd44 	bl	8004250 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3338      	adds	r3, #56	; 0x38
 80047cc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	4619      	mov	r1, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	f7ff fd3a 	bl	8004250 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3338      	adds	r3, #56	; 0x38
 80047e0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f7ff fd30 	bl	8004250 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	7858      	ldrb	r0, [r3, #1]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004808:	2301      	movs	r3, #1
 800480a:	f7ff fc8d 	bl	8004128 <disk_write>
			fs->fsi_flag = 0;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	785b      	ldrb	r3, [r3, #1]
 8004818:	2200      	movs	r2, #0
 800481a:	2100      	movs	r1, #0
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fca3 	bl	8004168 <disk_ioctl>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <sync_fs+0xcc>
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	41615252 	.word	0x41615252
 800483c:	61417272 	.word	0x61417272

08004840 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	3b02      	subs	r3, #2
 800484e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	3b02      	subs	r3, #2
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d301      	bcc.n	8004860 <clust2sect+0x20>
 800485c:	2300      	movs	r3, #0
 800485e:	e008      	b.n	8004872 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	895b      	ldrh	r3, [r3, #10]
 8004864:	461a      	mov	r2, r3
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	fb03 f202 	mul.w	r2, r3, r2
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	4413      	add	r3, r2
}
 8004872:	4618      	mov	r0, r3
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b086      	sub	sp, #24
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d904      	bls.n	800489e <get_fat+0x20>
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d302      	bcc.n	80048a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800489e:	2301      	movs	r3, #1
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	e0b7      	b.n	8004a14 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80048a4:	f04f 33ff 	mov.w	r3, #4294967295
 80048a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d05a      	beq.n	8004968 <get_fat+0xea>
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d07d      	beq.n	80049b2 <get_fat+0x134>
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	f040 80a2 	bne.w	8004a00 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	899b      	ldrh	r3, [r3, #12]
 80048d2:	4619      	mov	r1, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80048da:	4413      	add	r3, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	6938      	ldr	r0, [r7, #16]
 80048e0:	f7ff ff10 	bl	8004704 <move_window>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f040 808d 	bne.w	8004a06 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	60fa      	str	r2, [r7, #12]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	8992      	ldrh	r2, [r2, #12]
 80048f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80048fa:	fb02 f201 	mul.w	r2, r2, r1
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004908:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	899b      	ldrh	r3, [r3, #12]
 8004912:	4619      	mov	r1, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	fbb3 f3f1 	udiv	r3, r3, r1
 800491a:	4413      	add	r3, r2
 800491c:	4619      	mov	r1, r3
 800491e:	6938      	ldr	r0, [r7, #16]
 8004920:	f7ff fef0 	bl	8004704 <move_window>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d16f      	bne.n	8004a0a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	899b      	ldrh	r3, [r3, #12]
 800492e:	461a      	mov	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	fbb3 f1f2 	udiv	r1, r3, r2
 8004936:	fb02 f201 	mul.w	r2, r2, r1
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4413      	add	r3, r2
 8004940:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	461a      	mov	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4313      	orrs	r3, r2
 800494c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <get_fat+0xe0>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	e002      	b.n	8004964 <get_fat+0xe6>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004964:	617b      	str	r3, [r7, #20]
			break;
 8004966:	e055      	b.n	8004a14 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	899b      	ldrh	r3, [r3, #12]
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	b29b      	uxth	r3, r3
 8004974:	4619      	mov	r1, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	fbb3 f3f1 	udiv	r3, r3, r1
 800497c:	4413      	add	r3, r2
 800497e:	4619      	mov	r1, r3
 8004980:	6938      	ldr	r0, [r7, #16]
 8004982:	f7ff febf 	bl	8004704 <move_window>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d140      	bne.n	8004a0e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	8992      	ldrh	r2, [r2, #12]
 800499a:	fbb3 f0f2 	udiv	r0, r3, r2
 800499e:	fb02 f200 	mul.w	r2, r2, r0
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	440b      	add	r3, r1
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fbfc 	bl	80041a4 <ld_word>
 80049ac:	4603      	mov	r3, r0
 80049ae:	617b      	str	r3, [r7, #20]
			break;
 80049b0:	e030      	b.n	8004a14 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	899b      	ldrh	r3, [r3, #12]
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	b29b      	uxth	r3, r3
 80049be:	4619      	mov	r1, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049c6:	4413      	add	r3, r2
 80049c8:	4619      	mov	r1, r3
 80049ca:	6938      	ldr	r0, [r7, #16]
 80049cc:	f7ff fe9a 	bl	8004704 <move_window>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d11d      	bne.n	8004a12 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	8992      	ldrh	r2, [r2, #12]
 80049e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80049e8:	fb02 f200 	mul.w	r2, r2, r0
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	440b      	add	r3, r1
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fbef 	bl	80041d4 <ld_dword>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049fc:	617b      	str	r3, [r7, #20]
			break;
 80049fe:	e009      	b.n	8004a14 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004a00:	2301      	movs	r3, #1
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	e006      	b.n	8004a14 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a06:	bf00      	nop
 8004a08:	e004      	b.n	8004a14 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a0a:	bf00      	nop
 8004a0c:	e002      	b.n	8004a14 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a0e:	bf00      	nop
 8004a10:	e000      	b.n	8004a14 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a12:	bf00      	nop
		}
	}

	return val;
 8004a14:	697b      	ldr	r3, [r7, #20]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004a1e:	b590      	push	{r4, r7, lr}
 8004a20:	b089      	sub	sp, #36	; 0x24
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	f240 8106 	bls.w	8004c42 <put_fat+0x224>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	f080 8100 	bcs.w	8004c42 <put_fat+0x224>
		switch (fs->fs_type) {
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	f000 8088 	beq.w	8004b5c <put_fat+0x13e>
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	f000 80b0 	beq.w	8004bb2 <put_fat+0x194>
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	f040 80f5 	bne.w	8004c42 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	085b      	lsrs	r3, r3, #1
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4413      	add	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	899b      	ldrh	r3, [r3, #12]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a76:	4413      	add	r3, r2
 8004a78:	4619      	mov	r1, r3
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff fe42 	bl	8004704 <move_window>
 8004a80:	4603      	mov	r3, r0
 8004a82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a84:	7ffb      	ldrb	r3, [r7, #31]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f040 80d4 	bne.w	8004c34 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	61ba      	str	r2, [r7, #24]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	8992      	ldrh	r2, [r2, #12]
 8004a9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004aa0:	fb02 f200 	mul.w	r2, r2, r0
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00d      	beq.n	8004ad0 <put_fat+0xb2>
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	b25b      	sxtb	r3, r3
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	b25a      	sxtb	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	b25b      	sxtb	r3, r3
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	b25b      	sxtb	r3, r3
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	e001      	b.n	8004ad4 <put_fat+0xb6>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	899b      	ldrh	r3, [r3, #12]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aee:	4413      	add	r3, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f7ff fe06 	bl	8004704 <move_window>
 8004af8:	4603      	mov	r3, r0
 8004afa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004afc:	7ffb      	ldrb	r3, [r7, #31]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 809a 	bne.w	8004c38 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	899b      	ldrh	r3, [r3, #12]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b16:	fb02 f200 	mul.w	r2, r2, r0
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <put_fat+0x114>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	e00e      	b.n	8004b50 <put_fat+0x132>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	b25b      	sxtb	r3, r3
 8004b38:	f023 030f 	bic.w	r3, r3, #15
 8004b3c:	b25a      	sxtb	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	0a1b      	lsrs	r3, r3, #8
 8004b42:	b25b      	sxtb	r3, r3
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	b25b      	sxtb	r3, r3
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	b25b      	sxtb	r3, r3
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	70da      	strb	r2, [r3, #3]
			break;
 8004b5a:	e072      	b.n	8004c42 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	899b      	ldrh	r3, [r3, #12]
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	4619      	mov	r1, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b70:	4413      	add	r3, r2
 8004b72:	4619      	mov	r1, r3
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7ff fdc5 	bl	8004704 <move_window>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b7e:	7ffb      	ldrb	r3, [r7, #31]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d15b      	bne.n	8004c3c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	8992      	ldrh	r2, [r2, #12]
 8004b92:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b96:	fb02 f200 	mul.w	r2, r2, r0
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	b292      	uxth	r2, r2
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fb38 	bl	800421a <st_word>
			fs->wflag = 1;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	70da      	strb	r2, [r3, #3]
			break;
 8004bb0:	e047      	b.n	8004c42 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	899b      	ldrh	r3, [r3, #12]
 8004bba:	089b      	lsrs	r3, r3, #2
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bc6:	4413      	add	r3, r2
 8004bc8:	4619      	mov	r1, r3
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f7ff fd9a 	bl	8004704 <move_window>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004bd4:	7ffb      	ldrb	r3, [r7, #31]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d132      	bne.n	8004c40 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	8992      	ldrh	r2, [r2, #12]
 8004bee:	fbb3 f0f2 	udiv	r0, r3, r2
 8004bf2:	fb02 f200 	mul.w	r2, r2, r0
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff faea 	bl	80041d4 <ld_dword>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c06:	4323      	orrs	r3, r4
 8004c08:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	8992      	ldrh	r2, [r2, #12]
 8004c18:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c1c:	fb02 f200 	mul.w	r2, r2, r0
 8004c20:	1a9b      	subs	r3, r3, r2
 8004c22:	440b      	add	r3, r1
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fb12 	bl	8004250 <st_dword>
			fs->wflag = 1;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	70da      	strb	r2, [r3, #3]
			break;
 8004c32:	e006      	b.n	8004c42 <put_fat+0x224>
			if (res != FR_OK) break;
 8004c34:	bf00      	nop
 8004c36:	e004      	b.n	8004c42 <put_fat+0x224>
			if (res != FR_OK) break;
 8004c38:	bf00      	nop
 8004c3a:	e002      	b.n	8004c42 <put_fat+0x224>
			if (res != FR_OK) break;
 8004c3c:	bf00      	nop
 8004c3e:	e000      	b.n	8004c42 <put_fat+0x224>
			if (res != FR_OK) break;
 8004c40:	bf00      	nop
		}
	}
	return res;
 8004c42:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3724      	adds	r7, #36	; 0x24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd90      	pop	{r4, r7, pc}

08004c4c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d904      	bls.n	8004c72 <remove_chain+0x26>
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d301      	bcc.n	8004c76 <remove_chain+0x2a>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e04b      	b.n	8004d0e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00c      	beq.n	8004c96 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	69b8      	ldr	r0, [r7, #24]
 8004c84:	f7ff fecb 	bl	8004a1e <put_fat>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004c8c:	7ffb      	ldrb	r3, [r7, #31]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <remove_chain+0x4a>
 8004c92:	7ffb      	ldrb	r3, [r7, #31]
 8004c94:	e03b      	b.n	8004d0e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff fdf0 	bl	800487e <get_fat>
 8004c9e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d031      	beq.n	8004d0a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <remove_chain+0x64>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e02e      	b.n	8004d0e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d101      	bne.n	8004cbc <remove_chain+0x70>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e028      	b.n	8004d0e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	69b8      	ldr	r0, [r7, #24]
 8004cc2:	f7ff feac 	bl	8004a1e <put_fat>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004cca:	7ffb      	ldrb	r3, [r7, #31]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <remove_chain+0x88>
 8004cd0:	7ffb      	ldrb	r3, [r7, #31]
 8004cd2:	e01c      	b.n	8004d0e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	3b02      	subs	r3, #2
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d20b      	bcs.n	8004cfa <remove_chain+0xae>
			fs->free_clst++;
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	791b      	ldrb	r3, [r3, #4]
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d3c6      	bcc.n	8004c96 <remove_chain+0x4a>
 8004d08:	e000      	b.n	8004d0c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004d0a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b088      	sub	sp, #32
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10d      	bne.n	8004d48 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <create_chain+0x2c>
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d31b      	bcc.n	8004d7a <create_chain+0x64>
 8004d42:	2301      	movs	r3, #1
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e018      	b.n	8004d7a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004d48:	6839      	ldr	r1, [r7, #0]
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff fd97 	bl	800487e <get_fat>
 8004d50:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d801      	bhi.n	8004d5c <create_chain+0x46>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e070      	b.n	8004e3e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d101      	bne.n	8004d68 <create_chain+0x52>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	e06a      	b.n	8004e3e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d201      	bcs.n	8004d76 <create_chain+0x60>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	e063      	b.n	8004e3e <create_chain+0x128>
		scl = clst;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	3301      	adds	r3, #1
 8004d82:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d307      	bcc.n	8004d9e <create_chain+0x88>
				ncl = 2;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d901      	bls.n	8004d9e <create_chain+0x88>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e04f      	b.n	8004e3e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004d9e:	69f9      	ldr	r1, [r7, #28]
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff fd6c 	bl	800487e <get_fat>
 8004da6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00e      	beq.n	8004dcc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d003      	beq.n	8004dbc <create_chain+0xa6>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dba:	d101      	bne.n	8004dc0 <create_chain+0xaa>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	e03e      	b.n	8004e3e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d1da      	bne.n	8004d7e <create_chain+0x68>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e038      	b.n	8004e3e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004dcc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004dce:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd2:	69f9      	ldr	r1, [r7, #28]
 8004dd4:	6938      	ldr	r0, [r7, #16]
 8004dd6:	f7ff fe22 	bl	8004a1e <put_fat>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d109      	bne.n	8004df8 <create_chain+0xe2>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d006      	beq.n	8004df8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	6839      	ldr	r1, [r7, #0]
 8004dee:	6938      	ldr	r0, [r7, #16]
 8004df0:	f7ff fe15 	bl	8004a1e <put_fat>
 8004df4:	4603      	mov	r3, r0
 8004df6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d116      	bne.n	8004e2c <create_chain+0x116>
		fs->last_clst = ncl;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	3b02      	subs	r3, #2
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d804      	bhi.n	8004e1c <create_chain+0x106>
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	1e5a      	subs	r2, r3, #1
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	791b      	ldrb	r3, [r3, #4]
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	711a      	strb	r2, [r3, #4]
 8004e2a:	e007      	b.n	8004e3c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d102      	bne.n	8004e38 <create_chain+0x122>
 8004e32:	f04f 33ff 	mov.w	r3, #4294967295
 8004e36:	e000      	b.n	8004e3a <create_chain+0x124>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004e3c:	69fb      	ldr	r3, [r7, #28]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b087      	sub	sp, #28
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	899b      	ldrh	r3, [r3, #12]
 8004e62:	461a      	mov	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	8952      	ldrh	r2, [r2, #10]
 8004e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1d1a      	adds	r2, r3, #4
 8004e78:	613a      	str	r2, [r7, #16]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <clmt_clust+0x42>
 8004e84:	2300      	movs	r3, #0
 8004e86:	e010      	b.n	8004eaa <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d307      	bcc.n	8004ea0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e9e:	e7e9      	b.n	8004e74 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004ea0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	4413      	add	r3, r2
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b086      	sub	sp, #24
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ecc:	d204      	bcs.n	8004ed8 <dir_sdi+0x22>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <dir_sdi+0x26>
		return FR_INT_ERR;
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e071      	b.n	8004fc0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <dir_sdi+0x46>
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d902      	bls.n	8004efc <dir_sdi+0x46>
		clst = fs->dirbase;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10c      	bne.n	8004f1c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	095b      	lsrs	r3, r3, #5
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	8912      	ldrh	r2, [r2, #8]
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d301      	bcc.n	8004f12 <dir_sdi+0x5c>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e056      	b.n	8004fc0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	61da      	str	r2, [r3, #28]
 8004f1a:	e02d      	b.n	8004f78 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	895b      	ldrh	r3, [r3, #10]
 8004f20:	461a      	mov	r2, r3
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	899b      	ldrh	r3, [r3, #12]
 8004f26:	fb03 f302 	mul.w	r3, r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004f2c:	e019      	b.n	8004f62 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6979      	ldr	r1, [r7, #20]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fca3 	bl	800487e <get_fat>
 8004f38:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d101      	bne.n	8004f46 <dir_sdi+0x90>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e03c      	b.n	8004fc0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d904      	bls.n	8004f56 <dir_sdi+0xa0>
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d301      	bcc.n	8004f5a <dir_sdi+0xa4>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e032      	b.n	8004fc0 <dir_sdi+0x10a>
			ofs -= csz;
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d2e1      	bcs.n	8004f2e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004f6a:	6979      	ldr	r1, [r7, #20]
 8004f6c:	6938      	ldr	r0, [r7, #16]
 8004f6e:	f7ff fc67 	bl	8004840 <clust2sect>
 8004f72:	4602      	mov	r2, r0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <dir_sdi+0xd4>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e01a      	b.n	8004fc0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	899b      	ldrh	r3, [r3, #12]
 8004f92:	4619      	mov	r1, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f9a:	441a      	add	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	899b      	ldrh	r3, [r3, #12]
 8004faa:	461a      	mov	r2, r3
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fb2:	fb02 f200 	mul.w	r2, r2, r0
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	18ca      	adds	r2, r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	3320      	adds	r3, #32
 8004fde:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <dir_next+0x28>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fee:	d301      	bcc.n	8004ff4 <dir_next+0x2c>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	e0bb      	b.n	800516c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	899b      	ldrh	r3, [r3, #12]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005000:	fb02 f201 	mul.w	r2, r2, r1
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	2b00      	cmp	r3, #0
 8005008:	f040 809d 	bne.w	8005146 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10b      	bne.n	8005036 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	8912      	ldrh	r2, [r2, #8]
 8005026:	4293      	cmp	r3, r2
 8005028:	f0c0 808d 	bcc.w	8005146 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	61da      	str	r2, [r3, #28]
 8005032:	2304      	movs	r3, #4
 8005034:	e09a      	b.n	800516c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	899b      	ldrh	r3, [r3, #12]
 800503a:	461a      	mov	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	8952      	ldrh	r2, [r2, #10]
 8005046:	3a01      	subs	r2, #1
 8005048:	4013      	ands	r3, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d17b      	bne.n	8005146 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f7ff fc11 	bl	800487e <get_fat>
 800505c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d801      	bhi.n	8005068 <dir_next+0xa0>
 8005064:	2302      	movs	r3, #2
 8005066:	e081      	b.n	800516c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d101      	bne.n	8005074 <dir_next+0xac>
 8005070:	2301      	movs	r3, #1
 8005072:	e07b      	b.n	800516c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	429a      	cmp	r2, r3
 800507c:	d359      	bcc.n	8005132 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d104      	bne.n	800508e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	61da      	str	r2, [r3, #28]
 800508a:	2304      	movs	r3, #4
 800508c:	e06e      	b.n	800516c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f7ff fe3d 	bl	8004d16 <create_chain>
 800509c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <dir_next+0xe0>
 80050a4:	2307      	movs	r3, #7
 80050a6:	e061      	b.n	800516c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <dir_next+0xea>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e05c      	b.n	800516c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d101      	bne.n	80050be <dir_next+0xf6>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e056      	b.n	800516c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7ff fadc 	bl	800467c <sync_window>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <dir_next+0x106>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e04e      	b.n	800516c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	899b      	ldrh	r3, [r3, #12]
 80050d8:	461a      	mov	r2, r3
 80050da:	2100      	movs	r1, #0
 80050dc:	f7ff f905 	bl	80042ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	6979      	ldr	r1, [r7, #20]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f7ff fbaa 	bl	8004840 <clust2sect>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	635a      	str	r2, [r3, #52]	; 0x34
 80050f2:	e012      	b.n	800511a <dir_next+0x152>
						fs->wflag = 1;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7ff fabe 	bl	800467c <sync_window>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <dir_next+0x142>
 8005106:	2301      	movs	r3, #1
 8005108:	e030      	b.n	800516c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3301      	adds	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	635a      	str	r2, [r3, #52]	; 0x34
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	895b      	ldrh	r3, [r3, #10]
 800511e:	461a      	mov	r2, r3
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	4293      	cmp	r3, r2
 8005124:	d3e6      	bcc.n	80050f4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad2      	subs	r2, r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005138:	6979      	ldr	r1, [r7, #20]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff fb80 	bl	8004840 <clust2sect>
 8005140:	4602      	mov	r2, r0
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	899b      	ldrh	r3, [r3, #12]
 8005156:	461a      	mov	r2, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	fbb3 f0f2 	udiv	r0, r3, r2
 800515e:	fb02 f200 	mul.w	r2, r2, r0
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	18ca      	adds	r2, r1, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005184:	2100      	movs	r1, #0
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff fe95 	bl	8004eb6 <dir_sdi>
 800518c:	4603      	mov	r3, r0
 800518e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d12b      	bne.n	80051ee <dir_alloc+0x7a>
		n = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	4619      	mov	r1, r3
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff faaf 	bl	8004704 <move_window>
 80051a6:	4603      	mov	r3, r0
 80051a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d11d      	bne.n	80051ec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2be5      	cmp	r3, #229	; 0xe5
 80051b8:	d004      	beq.n	80051c4 <dir_alloc+0x50>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d107      	bne.n	80051d4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	3301      	adds	r3, #1
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d102      	bne.n	80051d8 <dir_alloc+0x64>
 80051d2:	e00c      	b.n	80051ee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80051d8:	2101      	movs	r1, #1
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fef4 	bl	8004fc8 <dir_next>
 80051e0:	4603      	mov	r3, r0
 80051e2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0d7      	beq.n	800519a <dir_alloc+0x26>
 80051ea:	e000      	b.n	80051ee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80051ec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d101      	bne.n	80051f8 <dir_alloc+0x84>
 80051f4:	2307      	movs	r3, #7
 80051f6:	75fb      	strb	r3, [r7, #23]
	return res;
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	331a      	adds	r3, #26
 8005210:	4618      	mov	r0, r3
 8005212:	f7fe ffc7 	bl	80041a4 <ld_word>
 8005216:	4603      	mov	r3, r0
 8005218:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b03      	cmp	r3, #3
 8005220:	d109      	bne.n	8005236 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	3314      	adds	r3, #20
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe ffbc 	bl	80041a4 <ld_word>
 800522c:	4603      	mov	r3, r0
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	331a      	adds	r3, #26
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	b292      	uxth	r2, r2
 8005254:	4611      	mov	r1, r2
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe ffdf 	bl	800421a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d109      	bne.n	8005278 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f103 0214 	add.w	r2, r3, #20
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	0c1b      	lsrs	r3, r3, #16
 800526e:	b29b      	uxth	r3, r3
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f7fe ffd1 	bl	800421a <st_word>
	}
}
 8005278:	bf00      	nop
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	331a      	adds	r3, #26
 800528e:	4618      	mov	r0, r3
 8005290:	f7fe ff88 	bl	80041a4 <ld_word>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <cmp_lfn+0x1e>
 800529a:	2300      	movs	r3, #0
 800529c:	e059      	b.n	8005352 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a6:	1e5a      	subs	r2, r3, #1
 80052a8:	4613      	mov	r3, r2
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80052b4:	2301      	movs	r3, #1
 80052b6:	81fb      	strh	r3, [r7, #14]
 80052b8:	2300      	movs	r3, #0
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	e033      	b.n	8005326 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80052be:	4a27      	ldr	r2, [pc, #156]	; (800535c <cmp_lfn+0xdc>)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4413      	add	r3, r2
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	4413      	add	r3, r2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fe ff69 	bl	80041a4 <ld_word>
 80052d2:	4603      	mov	r3, r0
 80052d4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80052d6:	89fb      	ldrh	r3, [r7, #14]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01a      	beq.n	8005312 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2bfe      	cmp	r3, #254	; 0xfe
 80052e0:	d812      	bhi.n	8005308 <cmp_lfn+0x88>
 80052e2:	89bb      	ldrh	r3, [r7, #12]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f001 fe2d 	bl	8006f44 <ff_wtoupper>
 80052ea:	4603      	mov	r3, r0
 80052ec:	461c      	mov	r4, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	617a      	str	r2, [r7, #20]
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	4413      	add	r3, r2
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 fe21 	bl	8006f44 <ff_wtoupper>
 8005302:	4603      	mov	r3, r0
 8005304:	429c      	cmp	r4, r3
 8005306:	d001      	beq.n	800530c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005308:	2300      	movs	r3, #0
 800530a:	e022      	b.n	8005352 <cmp_lfn+0xd2>
			}
			wc = uc;
 800530c:	89bb      	ldrh	r3, [r7, #12]
 800530e:	81fb      	strh	r3, [r7, #14]
 8005310:	e006      	b.n	8005320 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005312:	89bb      	ldrh	r3, [r7, #12]
 8005314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005318:	4293      	cmp	r3, r2
 800531a:	d001      	beq.n	8005320 <cmp_lfn+0xa0>
 800531c:	2300      	movs	r3, #0
 800531e:	e018      	b.n	8005352 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	3301      	adds	r3, #1
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b0c      	cmp	r3, #12
 800532a:	d9c8      	bls.n	80052be <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00b      	beq.n	8005350 <cmp_lfn+0xd0>
 8005338:	89fb      	ldrh	r3, [r7, #14]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <cmp_lfn+0xd0>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4413      	add	r3, r2
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <cmp_lfn+0xd0>
 800534c:	2300      	movs	r3, #0
 800534e:	e000      	b.n	8005352 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005350:	2301      	movs	r3, #1
}
 8005352:	4618      	mov	r0, r3
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	bd90      	pop	{r4, r7, pc}
 800535a:	bf00      	nop
 800535c:	08007a20 	.word	0x08007a20

08005360 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	4611      	mov	r1, r2
 800536c:	461a      	mov	r2, r3
 800536e:	460b      	mov	r3, r1
 8005370:	71fb      	strb	r3, [r7, #7]
 8005372:	4613      	mov	r3, r2
 8005374:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	330d      	adds	r3, #13
 800537a:	79ba      	ldrb	r2, [r7, #6]
 800537c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	330b      	adds	r3, #11
 8005382:	220f      	movs	r2, #15
 8005384:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	330c      	adds	r3, #12
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	331a      	adds	r3, #26
 8005392:	2100      	movs	r1, #0
 8005394:	4618      	mov	r0, r3
 8005396:	f7fe ff40 	bl	800421a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	1e5a      	subs	r2, r3, #1
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	82fb      	strh	r3, [r7, #22]
 80053ae:	2300      	movs	r3, #0
 80053b0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80053b2:	8afb      	ldrh	r3, [r7, #22]
 80053b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d007      	beq.n	80053cc <put_lfn+0x6c>
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	61fa      	str	r2, [r7, #28]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80053cc:	4a17      	ldr	r2, [pc, #92]	; (800542c <put_lfn+0xcc>)
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	4413      	add	r3, r2
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4413      	add	r3, r2
 80053da:	8afa      	ldrh	r2, [r7, #22]
 80053dc:	4611      	mov	r1, r2
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fe ff1b 	bl	800421a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80053e4:	8afb      	ldrh	r3, [r7, #22]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d102      	bne.n	80053f0 <put_lfn+0x90>
 80053ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053ee:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	3301      	adds	r3, #1
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	d9da      	bls.n	80053b2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80053fc:	8afb      	ldrh	r3, [r7, #22]
 80053fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005402:	4293      	cmp	r3, r2
 8005404:	d006      	beq.n	8005414 <put_lfn+0xb4>
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d103      	bne.n	800541c <put_lfn+0xbc>
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800541a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	79fa      	ldrb	r2, [r7, #7]
 8005420:	701a      	strb	r2, [r3, #0]
}
 8005422:	bf00      	nop
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	08007a20 	.word	0x08007a20

08005430 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08c      	sub	sp, #48	; 0x30
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800543e:	220b      	movs	r2, #11
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7fe ff30 	bl	80042a8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b05      	cmp	r3, #5
 800544c:	d92b      	bls.n	80054a6 <gen_numname+0x76>
		sr = seq;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005452:	e022      	b.n	800549a <gen_numname+0x6a>
			wc = *lfn++;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	1c9a      	adds	r2, r3, #2
 8005458:	607a      	str	r2, [r7, #4]
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800545e:	2300      	movs	r3, #0
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
 8005462:	e017      	b.n	8005494 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	005a      	lsls	r2, r3, #1
 8005468:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	4413      	add	r3, r2
 8005470:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005472:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005474:	085b      	lsrs	r3, r3, #1
 8005476:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <gen_numname+0x5e>
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005488:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800548c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	3301      	adds	r3, #1
 8005492:	62bb      	str	r3, [r7, #40]	; 0x28
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	2b0f      	cmp	r3, #15
 8005498:	d9e4      	bls.n	8005464 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1d8      	bne.n	8005454 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80054a6:	2307      	movs	r3, #7
 80054a8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	3330      	adds	r3, #48	; 0x30
 80054b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80054ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054be:	2b39      	cmp	r3, #57	; 0x39
 80054c0:	d904      	bls.n	80054cc <gen_numname+0x9c>
 80054c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054c6:	3307      	adds	r3, #7
 80054c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	1e5a      	subs	r2, r3, #1
 80054d0:	62ba      	str	r2, [r7, #40]	; 0x28
 80054d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80054d6:	4413      	add	r3, r2
 80054d8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80054dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	091b      	lsrs	r3, r3, #4
 80054e4:	603b      	str	r3, [r7, #0]
	} while (seq);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1de      	bne.n	80054aa <gen_numname+0x7a>
	ns[i] = '~';
 80054ec:	f107 0214 	add.w	r2, r7, #20
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	4413      	add	r3, r2
 80054f4:	227e      	movs	r2, #126	; 0x7e
 80054f6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80054f8:	2300      	movs	r3, #0
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
 80054fc:	e002      	b.n	8005504 <gen_numname+0xd4>
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	3301      	adds	r3, #1
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	429a      	cmp	r2, r3
 800550a:	d205      	bcs.n	8005518 <gen_numname+0xe8>
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	4413      	add	r3, r2
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b20      	cmp	r3, #32
 8005516:	d1f2      	bne.n	80054fe <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	2b07      	cmp	r3, #7
 800551c:	d808      	bhi.n	8005530 <gen_numname+0x100>
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	62ba      	str	r2, [r7, #40]	; 0x28
 8005524:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005528:	4413      	add	r3, r2
 800552a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800552e:	e000      	b.n	8005532 <gen_numname+0x102>
 8005530:	2120      	movs	r1, #32
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	627a      	str	r2, [r7, #36]	; 0x24
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	460a      	mov	r2, r1
 800553e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	2b07      	cmp	r3, #7
 8005544:	d9e8      	bls.n	8005518 <gen_numname+0xe8>
}
 8005546:	bf00      	nop
 8005548:	3730      	adds	r7, #48	; 0x30
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800555a:	230b      	movs	r3, #11
 800555c:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	b2da      	uxtb	r2, r3
 8005562:	0852      	lsrs	r2, r2, #1
 8005564:	01db      	lsls	r3, r3, #7
 8005566:	4313      	orrs	r3, r2
 8005568:	b2da      	uxtb	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	1c59      	adds	r1, r3, #1
 800556e:	6079      	str	r1, [r7, #4]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	4413      	add	r3, r2
 8005574:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	3b01      	subs	r3, #1
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1ed      	bne.n	800555e <sum_sfn+0x10>
	return sum;
 8005582:	7bfb      	ldrb	r3, [r7, #15]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800559e:	2100      	movs	r1, #0
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff fc88 	bl	8004eb6 <dir_sdi>
 80055a6:	4603      	mov	r3, r0
 80055a8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <dir_find+0x24>
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	e0a9      	b.n	8005708 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80055b4:	23ff      	movs	r3, #255	; 0xff
 80055b6:	753b      	strb	r3, [r7, #20]
 80055b8:	7d3b      	ldrb	r3, [r7, #20]
 80055ba:	757b      	strb	r3, [r7, #21]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f04f 32ff 	mov.w	r2, #4294967295
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	4619      	mov	r1, r3
 80055ca:	6938      	ldr	r0, [r7, #16]
 80055cc:	f7ff f89a 	bl	8004704 <move_window>
 80055d0:	4603      	mov	r3, r0
 80055d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f040 8090 	bne.w	80056fc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80055e4:	7dbb      	ldrb	r3, [r7, #22]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <dir_find+0x60>
 80055ea:	2304      	movs	r3, #4
 80055ec:	75fb      	strb	r3, [r7, #23]
 80055ee:	e08a      	b.n	8005706 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	330b      	adds	r3, #11
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055fc:	73fb      	strb	r3, [r7, #15]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	7bfa      	ldrb	r2, [r7, #15]
 8005602:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005604:	7dbb      	ldrb	r3, [r7, #22]
 8005606:	2be5      	cmp	r3, #229	; 0xe5
 8005608:	d007      	beq.n	800561a <dir_find+0x8a>
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <dir_find+0x98>
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b0f      	cmp	r3, #15
 8005618:	d006      	beq.n	8005628 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800561a:	23ff      	movs	r3, #255	; 0xff
 800561c:	757b      	strb	r3, [r7, #21]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f04f 32ff 	mov.w	r2, #4294967295
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
 8005626:	e05e      	b.n	80056e6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	2b0f      	cmp	r3, #15
 800562c:	d136      	bne.n	800569c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	d154      	bne.n	80056e6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800563c:	7dbb      	ldrb	r3, [r7, #22]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00d      	beq.n	8005662 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	7b5b      	ldrb	r3, [r3, #13]
 800564c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800564e:	7dbb      	ldrb	r3, [r7, #22]
 8005650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005654:	75bb      	strb	r3, [r7, #22]
 8005656:	7dbb      	ldrb	r3, [r7, #22]
 8005658:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005662:	7dba      	ldrb	r2, [r7, #22]
 8005664:	7d7b      	ldrb	r3, [r7, #21]
 8005666:	429a      	cmp	r2, r3
 8005668:	d115      	bne.n	8005696 <dir_find+0x106>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	330d      	adds	r3, #13
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	7d3a      	ldrb	r2, [r7, #20]
 8005674:	429a      	cmp	r2, r3
 8005676:	d10e      	bne.n	8005696 <dir_find+0x106>
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f7ff fdfc 	bl	8005280 <cmp_lfn>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <dir_find+0x106>
 800568e:	7d7b      	ldrb	r3, [r7, #21]
 8005690:	3b01      	subs	r3, #1
 8005692:	b2db      	uxtb	r3, r3
 8005694:	e000      	b.n	8005698 <dir_find+0x108>
 8005696:	23ff      	movs	r3, #255	; 0xff
 8005698:	757b      	strb	r3, [r7, #21]
 800569a:	e024      	b.n	80056e6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800569c:	7d7b      	ldrb	r3, [r7, #21]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <dir_find+0x126>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff ff51 	bl	800554e <sum_sfn>
 80056ac:	4603      	mov	r3, r0
 80056ae:	461a      	mov	r2, r3
 80056b0:	7d3b      	ldrb	r3, [r7, #20]
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d024      	beq.n	8005700 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <dir_find+0x14a>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a18      	ldr	r0, [r3, #32]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3324      	adds	r3, #36	; 0x24
 80056cc:	220b      	movs	r2, #11
 80056ce:	4619      	mov	r1, r3
 80056d0:	f7fe fe25 	bl	800431e <mem_cmp>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d014      	beq.n	8005704 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80056da:	23ff      	movs	r3, #255	; 0xff
 80056dc:	757b      	strb	r3, [r7, #21]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f04f 32ff 	mov.w	r2, #4294967295
 80056e4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80056e6:	2100      	movs	r1, #0
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fc6d 	bl	8004fc8 <dir_next>
 80056ee:	4603      	mov	r3, r0
 80056f0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f43f af65 	beq.w	80055c4 <dir_find+0x34>
 80056fa:	e004      	b.n	8005706 <dir_find+0x176>
		if (res != FR_OK) break;
 80056fc:	bf00      	nop
 80056fe:	e002      	b.n	8005706 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005700:	bf00      	nop
 8005702:	e000      	b.n	8005706 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005704:	bf00      	nop

	return res;
 8005706:	7dfb      	ldrb	r3, [r7, #23]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08c      	sub	sp, #48	; 0x30
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005724:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <dir_register+0x20>
 800572c:	2306      	movs	r3, #6
 800572e:	e0e0      	b.n	80058f2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005730:	2300      	movs	r3, #0
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
 8005734:	e002      	b.n	800573c <dir_register+0x2c>
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	3301      	adds	r3, #1
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	4413      	add	r3, r2
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f4      	bne.n	8005736 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005752:	f107 030c 	add.w	r3, r7, #12
 8005756:	220c      	movs	r2, #12
 8005758:	4618      	mov	r0, r3
 800575a:	f7fe fda5 	bl	80042a8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d032      	beq.n	80057ce <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2240      	movs	r2, #64	; 0x40
 800576c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005770:	2301      	movs	r3, #1
 8005772:	62bb      	str	r3, [r7, #40]	; 0x28
 8005774:	e016      	b.n	80057a4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	f107 010c 	add.w	r1, r7, #12
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	f7ff fe53 	bl	8005430 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff ff00 	bl	8005590 <dir_find>
 8005790:	4603      	mov	r3, r0
 8005792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a0:	3301      	adds	r3, #1
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	2b63      	cmp	r3, #99	; 0x63
 80057a8:	d9e5      	bls.n	8005776 <dir_register+0x66>
 80057aa:	e000      	b.n	80057ae <dir_register+0x9e>
			if (res != FR_OK) break;
 80057ac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	2b64      	cmp	r3, #100	; 0x64
 80057b2:	d101      	bne.n	80057b8 <dir_register+0xa8>
 80057b4:	2307      	movs	r3, #7
 80057b6:	e09c      	b.n	80058f2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80057b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d002      	beq.n	80057c6 <dir_register+0xb6>
 80057c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057c4:	e095      	b.n	80058f2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80057c6:	7dfa      	ldrb	r2, [r7, #23]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <dir_register+0xd8>
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	330c      	adds	r3, #12
 80057dc:	4a47      	ldr	r2, [pc, #284]	; (80058fc <dir_register+0x1ec>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	3301      	adds	r3, #1
 80057e6:	e000      	b.n	80057ea <dir_register+0xda>
 80057e8:	2301      	movs	r3, #1
 80057ea:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80057ec:	6a39      	ldr	r1, [r7, #32]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff fcc0 	bl	8005174 <dir_alloc>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80057fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d148      	bne.n	8005894 <dir_register+0x184>
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	3b01      	subs	r3, #1
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d042      	beq.n	8005894 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695a      	ldr	r2, [r3, #20]
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	015b      	lsls	r3, r3, #5
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff fb4b 	bl	8004eb6 <dir_sdi>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800582a:	2b00      	cmp	r3, #0
 800582c:	d132      	bne.n	8005894 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3324      	adds	r3, #36	; 0x24
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff fe8b 	bl	800554e <sum_sfn>
 8005838:	4603      	mov	r3, r0
 800583a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	4619      	mov	r1, r3
 8005842:	69f8      	ldr	r0, [r7, #28]
 8005844:	f7fe ff5e 	bl	8004704 <move_window>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800584e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005852:	2b00      	cmp	r3, #0
 8005854:	d11d      	bne.n	8005892 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	6918      	ldr	r0, [r3, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a19      	ldr	r1, [r3, #32]
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	7efb      	ldrb	r3, [r7, #27]
 8005864:	f7ff fd7c 	bl	8005360 <put_lfn>
				fs->wflag = 1;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	2201      	movs	r2, #1
 800586c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800586e:	2100      	movs	r1, #0
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7ff fba9 	bl	8004fc8 <dir_next>
 8005876:	4603      	mov	r3, r0
 8005878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800587c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005880:	2b00      	cmp	r3, #0
 8005882:	d107      	bne.n	8005894 <dir_register+0x184>
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	3b01      	subs	r3, #1
 8005888:	623b      	str	r3, [r7, #32]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1d5      	bne.n	800583c <dir_register+0x12c>
 8005890:	e000      	b.n	8005894 <dir_register+0x184>
				if (res != FR_OK) break;
 8005892:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005898:	2b00      	cmp	r3, #0
 800589a:	d128      	bne.n	80058ee <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	4619      	mov	r1, r3
 80058a2:	69f8      	ldr	r0, [r7, #28]
 80058a4:	f7fe ff2e 	bl	8004704 <move_window>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80058ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d11b      	bne.n	80058ee <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	2220      	movs	r2, #32
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fe fd13 	bl	80042ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a18      	ldr	r0, [r3, #32]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3324      	adds	r3, #36	; 0x24
 80058cc:	220b      	movs	r2, #11
 80058ce:	4619      	mov	r1, r3
 80058d0:	f7fe fcea 	bl	80042a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	330c      	adds	r3, #12
 80058e0:	f002 0218 	and.w	r2, r2, #24
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2201      	movs	r2, #1
 80058ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80058ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3730      	adds	r7, #48	; 0x30
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	4ec4ec4f 	.word	0x4ec4ec4f

08005900 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	61ba      	str	r2, [r7, #24]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4413      	add	r3, r2
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800592e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005930:	2b1f      	cmp	r3, #31
 8005932:	d940      	bls.n	80059b6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005936:	2b2f      	cmp	r3, #47	; 0x2f
 8005938:	d006      	beq.n	8005948 <create_name+0x48>
 800593a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800593c:	2b5c      	cmp	r3, #92	; 0x5c
 800593e:	d110      	bne.n	8005962 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005940:	e002      	b.n	8005948 <create_name+0x48>
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	3301      	adds	r3, #1
 8005946:	61bb      	str	r3, [r7, #24]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	4413      	add	r3, r2
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b2f      	cmp	r3, #47	; 0x2f
 8005952:	d0f6      	beq.n	8005942 <create_name+0x42>
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	4413      	add	r3, r2
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b5c      	cmp	r3, #92	; 0x5c
 800595e:	d0f0      	beq.n	8005942 <create_name+0x42>
			break;
 8005960:	e02a      	b.n	80059b8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2bfe      	cmp	r3, #254	; 0xfe
 8005966:	d901      	bls.n	800596c <create_name+0x6c>
 8005968:	2306      	movs	r3, #6
 800596a:	e177      	b.n	8005c5c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800596c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800596e:	b2db      	uxtb	r3, r3
 8005970:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005974:	2101      	movs	r1, #1
 8005976:	4618      	mov	r0, r3
 8005978:	f001 faa8 	bl	8006ecc <ff_convert>
 800597c:	4603      	mov	r3, r0
 800597e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <create_name+0x8a>
 8005986:	2306      	movs	r3, #6
 8005988:	e168      	b.n	8005c5c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800598a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800598c:	2b7f      	cmp	r3, #127	; 0x7f
 800598e:	d809      	bhi.n	80059a4 <create_name+0xa4>
 8005990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005992:	4619      	mov	r1, r3
 8005994:	48b3      	ldr	r0, [pc, #716]	; (8005c64 <create_name+0x364>)
 8005996:	f7fe fce9 	bl	800436c <chk_chr>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <create_name+0xa4>
 80059a0:	2306      	movs	r3, #6
 80059a2:	e15b      	b.n	8005c5c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	617a      	str	r2, [r7, #20]
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059b2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80059b4:	e7b4      	b.n	8005920 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80059b6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	441a      	add	r2, r3
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80059c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059c4:	2b1f      	cmp	r3, #31
 80059c6:	d801      	bhi.n	80059cc <create_name+0xcc>
 80059c8:	2304      	movs	r3, #4
 80059ca:	e000      	b.n	80059ce <create_name+0xce>
 80059cc:	2300      	movs	r3, #0
 80059ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80059d2:	e011      	b.n	80059f8 <create_name+0xf8>
		w = lfn[di - 1];
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059da:	3b01      	subs	r3, #1
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80059e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d002      	beq.n	80059f2 <create_name+0xf2>
 80059ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ee:	2b2e      	cmp	r3, #46	; 0x2e
 80059f0:	d106      	bne.n	8005a00 <create_name+0x100>
		di--;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1ea      	bne.n	80059d4 <create_name+0xd4>
 80059fe:	e000      	b.n	8005a02 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005a00:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <create_name+0x118>
 8005a14:	2306      	movs	r3, #6
 8005a16:	e121      	b.n	8005c5c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3324      	adds	r3, #36	; 0x24
 8005a1c:	220b      	movs	r2, #11
 8005a1e:	2120      	movs	r1, #32
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe fc62 	bl	80042ea <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005a26:	2300      	movs	r3, #0
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	e002      	b.n	8005a32 <create_name+0x132>
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d0f5      	beq.n	8005a2c <create_name+0x12c>
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a4c:	d0ee      	beq.n	8005a2c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d009      	beq.n	8005a68 <create_name+0x168>
 8005a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a58:	f043 0303 	orr.w	r3, r3, #3
 8005a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005a60:	e002      	b.n	8005a68 <create_name+0x168>
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <create_name+0x182>
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a74:	3b01      	subs	r3, #1
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a80:	d1ef      	bne.n	8005a62 <create_name+0x162>

	i = b = 0; ni = 8;
 8005a82:	2300      	movs	r3, #0
 8005a84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a88:	2300      	movs	r3, #0
 8005a8a:	623b      	str	r3, [r7, #32]
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	61ba      	str	r2, [r7, #24]
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005aa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 8090 	beq.w	8005bc8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005aa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d006      	beq.n	8005abc <create_name+0x1bc>
 8005aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab2:	d10a      	bne.n	8005aca <create_name+0x1ca>
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d006      	beq.n	8005aca <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ac0:	f043 0303 	orr.w	r3, r3, #3
 8005ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ac8:	e07d      	b.n	8005bc6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005aca:	6a3a      	ldr	r2, [r7, #32]
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d203      	bcs.n	8005ada <create_name+0x1da>
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d123      	bne.n	8005b22 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	2b0b      	cmp	r3, #11
 8005ade:	d106      	bne.n	8005aee <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae4:	f043 0303 	orr.w	r3, r3, #3
 8005ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005aec:	e06f      	b.n	8005bce <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d005      	beq.n	8005b02 <create_name+0x202>
 8005af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005afa:	f043 0303 	orr.w	r3, r3, #3
 8005afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d860      	bhi.n	8005bcc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	2308      	movs	r3, #8
 8005b10:	623b      	str	r3, [r7, #32]
 8005b12:	230b      	movs	r3, #11
 8005b14:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005b16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b20:	e051      	b.n	8005bc6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005b22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b24:	2b7f      	cmp	r3, #127	; 0x7f
 8005b26:	d914      	bls.n	8005b52 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005b28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f001 f9cd 	bl	8006ecc <ff_convert>
 8005b32:	4603      	mov	r3, r0
 8005b34:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d004      	beq.n	8005b46 <create_name+0x246>
 8005b3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b3e:	3b80      	subs	r3, #128	; 0x80
 8005b40:	4a49      	ldr	r2, [pc, #292]	; (8005c68 <create_name+0x368>)
 8005b42:	5cd3      	ldrb	r3, [r2, r3]
 8005b44:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b4a:	f043 0302 	orr.w	r3, r3, #2
 8005b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <create_name+0x268>
 8005b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4843      	ldr	r0, [pc, #268]	; (8005c6c <create_name+0x36c>)
 8005b5e:	f7fe fc05 	bl	800436c <chk_chr>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005b68:	235f      	movs	r3, #95	; 0x5f
 8005b6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b70:	f043 0303 	orr.w	r3, r3, #3
 8005b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b78:	e01b      	b.n	8005bb2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b7c:	2b40      	cmp	r3, #64	; 0x40
 8005b7e:	d909      	bls.n	8005b94 <create_name+0x294>
 8005b80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b82:	2b5a      	cmp	r3, #90	; 0x5a
 8005b84:	d806      	bhi.n	8005b94 <create_name+0x294>
					b |= 2;
 8005b86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b8a:	f043 0302 	orr.w	r3, r3, #2
 8005b8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b92:	e00e      	b.n	8005bb2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005b94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b96:	2b60      	cmp	r3, #96	; 0x60
 8005b98:	d90b      	bls.n	8005bb2 <create_name+0x2b2>
 8005b9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b9c:	2b7a      	cmp	r3, #122	; 0x7a
 8005b9e:	d808      	bhi.n	8005bb2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005ba0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bae:	3b20      	subs	r3, #32
 8005bb0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	623a      	str	r2, [r7, #32]
 8005bb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bba:	b2d1      	uxtb	r1, r2
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	460a      	mov	r2, r1
 8005bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005bc6:	e763      	b.n	8005a90 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005bc8:	bf00      	nop
 8005bca:	e000      	b.n	8005bce <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8005bcc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bd4:	2be5      	cmp	r3, #229	; 0xe5
 8005bd6:	d103      	bne.n	8005be0 <create_name+0x2e0>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2205      	movs	r2, #5
 8005bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	2b08      	cmp	r3, #8
 8005be4:	d104      	bne.n	8005bf0 <create_name+0x2f0>
 8005be6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005bf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005bf4:	f003 030c 	and.w	r3, r3, #12
 8005bf8:	2b0c      	cmp	r3, #12
 8005bfa:	d005      	beq.n	8005c08 <create_name+0x308>
 8005bfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c00:	f003 0303 	and.w	r3, r3, #3
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d105      	bne.n	8005c14 <create_name+0x314>
 8005c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c0c:	f043 0302 	orr.w	r3, r3, #2
 8005c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d117      	bne.n	8005c50 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005c20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d105      	bne.n	8005c38 <create_name+0x338>
 8005c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c30:	f043 0310 	orr.w	r3, r3, #16
 8005c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005c38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c3c:	f003 030c 	and.w	r3, r3, #12
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d105      	bne.n	8005c50 <create_name+0x350>
 8005c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c48:	f043 0308 	orr.w	r3, r3, #8
 8005c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005c5a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3728      	adds	r7, #40	; 0x28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	08007940 	.word	0x08007940
 8005c68:	080079a0 	.word	0x080079a0
 8005c6c:	0800794c 	.word	0x0800794c

08005c70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005c84:	e002      	b.n	8005c8c <follow_path+0x1c>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b2f      	cmp	r3, #47	; 0x2f
 8005c92:	d0f8      	beq.n	8005c86 <follow_path+0x16>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b5c      	cmp	r3, #92	; 0x5c
 8005c9a:	d0f4      	beq.n	8005c86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b1f      	cmp	r3, #31
 8005ca8:	d80a      	bhi.n	8005cc0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2280      	movs	r2, #128	; 0x80
 8005cae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff f8fe 	bl	8004eb6 <dir_sdi>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	75fb      	strb	r3, [r7, #23]
 8005cbe:	e048      	b.n	8005d52 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005cc0:	463b      	mov	r3, r7
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff fe1b 	bl	8005900 <create_name>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d139      	bne.n	8005d48 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff fc5b 	bl	8005590 <dir_find>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005ce4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005ce6:	7dfb      	ldrb	r3, [r7, #23]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d12c      	bne.n	8005d4c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005cf2:	7afb      	ldrb	r3, [r7, #11]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d127      	bne.n	8005d4c <follow_path+0xdc>
 8005cfc:	2305      	movs	r3, #5
 8005cfe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005d00:	e024      	b.n	8005d4c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005d02:	7afb      	ldrb	r3, [r7, #11]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d121      	bne.n	8005d50 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	799b      	ldrb	r3, [r3, #6]
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d102      	bne.n	8005d1e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005d18:	2305      	movs	r3, #5
 8005d1a:	75fb      	strb	r3, [r7, #23]
 8005d1c:	e019      	b.n	8005d52 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	8992      	ldrh	r2, [r2, #12]
 8005d2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d30:	fb02 f200 	mul.w	r2, r2, r0
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	440b      	add	r3, r1
 8005d38:	4619      	mov	r1, r3
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f7ff fa61 	bl	8005202 <ld_clust>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005d46:	e7bb      	b.n	8005cc0 <follow_path+0x50>
			if (res != FR_OK) break;
 8005d48:	bf00      	nop
 8005d4a:	e002      	b.n	8005d52 <follow_path+0xe2>
				break;
 8005d4c:	bf00      	nop
 8005d4e:	e000      	b.n	8005d52 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005d50:	bf00      	nop
			}
		}
	}

	return res;
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005d64:	f04f 33ff 	mov.w	r3, #4294967295
 8005d68:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d031      	beq.n	8005dd6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	e002      	b.n	8005d80 <get_ldnumber+0x24>
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b1f      	cmp	r3, #31
 8005d86:	d903      	bls.n	8005d90 <get_ldnumber+0x34>
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b3a      	cmp	r3, #58	; 0x3a
 8005d8e:	d1f4      	bne.n	8005d7a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b3a      	cmp	r3, #58	; 0x3a
 8005d96:	d11c      	bne.n	8005dd2 <get_ldnumber+0x76>
			tp = *path;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	60fa      	str	r2, [r7, #12]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	3b30      	subs	r3, #48	; 0x30
 8005da8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b09      	cmp	r3, #9
 8005dae:	d80e      	bhi.n	8005dce <get_ldnumber+0x72>
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d10a      	bne.n	8005dce <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d107      	bne.n	8005dce <get_ldnumber+0x72>
					vol = (int)i;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	e002      	b.n	8005dd8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005dd6:	693b      	ldr	r3, [r7, #16]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	70da      	strb	r2, [r3, #3]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fe fc80 	bl	8004704 <move_window>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <check_fs+0x2a>
 8005e0a:	2304      	movs	r3, #4
 8005e0c:	e038      	b.n	8005e80 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3338      	adds	r3, #56	; 0x38
 8005e12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe f9c4 	bl	80041a4 <ld_word>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <check_fs+0x48>
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e029      	b.n	8005e80 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e32:	2be9      	cmp	r3, #233	; 0xe9
 8005e34:	d009      	beq.n	8005e4a <check_fs+0x66>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e3c:	2beb      	cmp	r3, #235	; 0xeb
 8005e3e:	d11e      	bne.n	8005e7e <check_fs+0x9a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e46:	2b90      	cmp	r3, #144	; 0x90
 8005e48:	d119      	bne.n	8005e7e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3338      	adds	r3, #56	; 0x38
 8005e4e:	3336      	adds	r3, #54	; 0x36
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fe f9bf 	bl	80041d4 <ld_dword>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e5c:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <check_fs+0xa4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d101      	bne.n	8005e66 <check_fs+0x82>
 8005e62:	2300      	movs	r3, #0
 8005e64:	e00c      	b.n	8005e80 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3338      	adds	r3, #56	; 0x38
 8005e6a:	3352      	adds	r3, #82	; 0x52
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe f9b1 	bl	80041d4 <ld_dword>
 8005e72:	4602      	mov	r2, r0
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <check_fs+0xa8>)
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d101      	bne.n	8005e7e <check_fs+0x9a>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e000      	b.n	8005e80 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005e7e:	2302      	movs	r3, #2
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	00544146 	.word	0x00544146
 8005e8c:	33544146 	.word	0x33544146

08005e90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b096      	sub	sp, #88	; 0x58
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7ff ff59 	bl	8005d5c <get_ldnumber>
 8005eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	da01      	bge.n	8005eb6 <find_volume+0x26>
 8005eb2:	230b      	movs	r3, #11
 8005eb4:	e268      	b.n	8006388 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005eb6:	4ab0      	ldr	r2, [pc, #704]	; (8006178 <find_volume+0x2e8>)
 8005eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ebe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <find_volume+0x3a>
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	e25e      	b.n	8006388 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ece:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005ed0:	79fb      	ldrb	r3, [r7, #7]
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01a      	beq.n	8005f16 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe f8bf 	bl	8004068 <disk_status>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005ef0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10c      	bne.n	8005f16 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <find_volume+0x82>
 8005f02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005f0e:	230a      	movs	r3, #10
 8005f10:	e23a      	b.n	8006388 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8005f12:	2300      	movs	r3, #0
 8005f14:	e238      	b.n	8006388 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fe f8b7 	bl	800409c <disk_initialize>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005f34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005f40:	2303      	movs	r3, #3
 8005f42:	e221      	b.n	8006388 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d007      	beq.n	8005f5a <find_volume+0xca>
 8005f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005f56:	230a      	movs	r3, #10
 8005f58:	e216      	b.n	8006388 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	7858      	ldrb	r0, [r3, #1]
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	330c      	adds	r3, #12
 8005f62:	461a      	mov	r2, r3
 8005f64:	2102      	movs	r1, #2
 8005f66:	f7fe f8ff 	bl	8004168 <disk_ioctl>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <find_volume+0xe4>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e209      	b.n	8006388 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	899b      	ldrh	r3, [r3, #12]
 8005f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7c:	d80d      	bhi.n	8005f9a <find_volume+0x10a>
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f80:	899b      	ldrh	r3, [r3, #12]
 8005f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f86:	d308      	bcc.n	8005f9a <find_volume+0x10a>
 8005f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8a:	899b      	ldrh	r3, [r3, #12]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f90:	899b      	ldrh	r3, [r3, #12]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	4013      	ands	r3, r2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <find_volume+0x10e>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e1f4      	b.n	8006388 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005fa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fa6:	f7ff ff1d 	bl	8005de4 <check_fs>
 8005faa:	4603      	mov	r3, r0
 8005fac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005fb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d14b      	bne.n	8006050 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005fb8:	2300      	movs	r3, #0
 8005fba:	643b      	str	r3, [r7, #64]	; 0x40
 8005fbc:	e01f      	b.n	8005ffe <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005fcc:	4413      	add	r3, r2
 8005fce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d006      	beq.n	8005fe8 <find_volume+0x158>
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	3308      	adds	r3, #8
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe f8f8 	bl	80041d4 <ld_dword>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	e000      	b.n	8005fea <find_volume+0x15a>
 8005fe8:	2200      	movs	r2, #0
 8005fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005ff2:	440b      	add	r3, r1
 8005ff4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	643b      	str	r3, [r7, #64]	; 0x40
 8005ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006000:	2b03      	cmp	r3, #3
 8006002:	d9dc      	bls.n	8005fbe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006004:	2300      	movs	r3, #0
 8006006:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <find_volume+0x184>
 800600e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006010:	3b01      	subs	r3, #1
 8006012:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800601c:	4413      	add	r3, r2
 800601e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006022:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <find_volume+0x1a6>
 800602a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800602c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800602e:	f7ff fed9 	bl	8005de4 <check_fs>
 8006032:	4603      	mov	r3, r0
 8006034:	e000      	b.n	8006038 <find_volume+0x1a8>
 8006036:	2303      	movs	r3, #3
 8006038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800603c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006040:	2b01      	cmp	r3, #1
 8006042:	d905      	bls.n	8006050 <find_volume+0x1c0>
 8006044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006046:	3301      	adds	r3, #1
 8006048:	643b      	str	r3, [r7, #64]	; 0x40
 800604a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604c:	2b03      	cmp	r3, #3
 800604e:	d9e1      	bls.n	8006014 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006054:	2b04      	cmp	r3, #4
 8006056:	d101      	bne.n	800605c <find_volume+0x1cc>
 8006058:	2301      	movs	r3, #1
 800605a:	e195      	b.n	8006388 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800605c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006060:	2b01      	cmp	r3, #1
 8006062:	d901      	bls.n	8006068 <find_volume+0x1d8>
 8006064:	230d      	movs	r3, #13
 8006066:	e18f      	b.n	8006388 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	3338      	adds	r3, #56	; 0x38
 800606c:	330b      	adds	r3, #11
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe f898 	bl	80041a4 <ld_word>
 8006074:	4603      	mov	r3, r0
 8006076:	461a      	mov	r2, r3
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	899b      	ldrh	r3, [r3, #12]
 800607c:	429a      	cmp	r2, r3
 800607e:	d001      	beq.n	8006084 <find_volume+0x1f4>
 8006080:	230d      	movs	r3, #13
 8006082:	e181      	b.n	8006388 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	3338      	adds	r3, #56	; 0x38
 8006088:	3316      	adds	r3, #22
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe f88a 	bl	80041a4 <ld_word>
 8006090:	4603      	mov	r3, r0
 8006092:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <find_volume+0x218>
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	3338      	adds	r3, #56	; 0x38
 800609e:	3324      	adds	r3, #36	; 0x24
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe f897 	bl	80041d4 <ld_dword>
 80060a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060ac:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80060b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80060b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ba:	789b      	ldrb	r3, [r3, #2]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d005      	beq.n	80060cc <find_volume+0x23c>
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	789b      	ldrb	r3, [r3, #2]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d001      	beq.n	80060cc <find_volume+0x23c>
 80060c8:	230d      	movs	r3, #13
 80060ca:	e15d      	b.n	8006388 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	789b      	ldrb	r3, [r3, #2]
 80060d0:	461a      	mov	r2, r3
 80060d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d4:	fb02 f303 	mul.w	r3, r2, r3
 80060d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	895b      	ldrh	r3, [r3, #10]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <find_volume+0x270>
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	895b      	ldrh	r3, [r3, #10]
 80060f2:	461a      	mov	r2, r3
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	895b      	ldrh	r3, [r3, #10]
 80060f8:	3b01      	subs	r3, #1
 80060fa:	4013      	ands	r3, r2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <find_volume+0x274>
 8006100:	230d      	movs	r3, #13
 8006102:	e141      	b.n	8006388 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	3338      	adds	r3, #56	; 0x38
 8006108:	3311      	adds	r3, #17
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe f84a 	bl	80041a4 <ld_word>
 8006110:	4603      	mov	r3, r0
 8006112:	461a      	mov	r2, r3
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	891b      	ldrh	r3, [r3, #8]
 800611c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800611e:	8992      	ldrh	r2, [r2, #12]
 8006120:	0952      	lsrs	r2, r2, #5
 8006122:	b292      	uxth	r2, r2
 8006124:	fbb3 f1f2 	udiv	r1, r3, r2
 8006128:	fb02 f201 	mul.w	r2, r2, r1
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <find_volume+0x2a8>
 8006134:	230d      	movs	r3, #13
 8006136:	e127      	b.n	8006388 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	3338      	adds	r3, #56	; 0x38
 800613c:	3313      	adds	r3, #19
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe f830 	bl	80041a4 <ld_word>
 8006144:	4603      	mov	r3, r0
 8006146:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <find_volume+0x2cc>
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	3338      	adds	r3, #56	; 0x38
 8006152:	3320      	adds	r3, #32
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe f83d 	bl	80041d4 <ld_dword>
 800615a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	3338      	adds	r3, #56	; 0x38
 8006160:	330e      	adds	r3, #14
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe f81e 	bl	80041a4 <ld_word>
 8006168:	4603      	mov	r3, r0
 800616a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800616c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <find_volume+0x2ec>
 8006172:	230d      	movs	r3, #13
 8006174:	e108      	b.n	8006388 <find_volume+0x4f8>
 8006176:	bf00      	nop
 8006178:	200000ac 	.word	0x200000ac

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800617c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800617e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006180:	4413      	add	r3, r2
 8006182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006184:	8911      	ldrh	r1, [r2, #8]
 8006186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006188:	8992      	ldrh	r2, [r2, #12]
 800618a:	0952      	lsrs	r2, r2, #5
 800618c:	b292      	uxth	r2, r2
 800618e:	fbb1 f2f2 	udiv	r2, r1, r2
 8006192:	b292      	uxth	r2, r2
 8006194:	4413      	add	r3, r2
 8006196:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	429a      	cmp	r2, r3
 800619e:	d201      	bcs.n	80061a4 <find_volume+0x314>
 80061a0:	230d      	movs	r3, #13
 80061a2:	e0f1      	b.n	8006388 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80061a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061ac:	8952      	ldrh	r2, [r2, #10]
 80061ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <find_volume+0x32e>
 80061ba:	230d      	movs	r3, #13
 80061bc:	e0e4      	b.n	8006388 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80061be:	2303      	movs	r3, #3
 80061c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d802      	bhi.n	80061d4 <find_volume+0x344>
 80061ce:	2302      	movs	r3, #2
 80061d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80061da:	4293      	cmp	r3, r2
 80061dc:	d802      	bhi.n	80061e4 <find_volume+0x354>
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ea:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061f0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80061f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f6:	441a      	add	r2, r3
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80061fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	441a      	add	r2, r3
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006206:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800620a:	2b03      	cmp	r3, #3
 800620c:	d11e      	bne.n	800624c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	3338      	adds	r3, #56	; 0x38
 8006212:	332a      	adds	r3, #42	; 0x2a
 8006214:	4618      	mov	r0, r3
 8006216:	f7fd ffc5 	bl	80041a4 <ld_word>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <find_volume+0x394>
 8006220:	230d      	movs	r3, #13
 8006222:	e0b1      	b.n	8006388 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006226:	891b      	ldrh	r3, [r3, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <find_volume+0x3a0>
 800622c:	230d      	movs	r3, #13
 800622e:	e0ab      	b.n	8006388 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	3338      	adds	r3, #56	; 0x38
 8006234:	332c      	adds	r3, #44	; 0x2c
 8006236:	4618      	mov	r0, r3
 8006238:	f7fd ffcc 	bl	80041d4 <ld_dword>
 800623c:	4602      	mov	r2, r0
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	647b      	str	r3, [r7, #68]	; 0x44
 800624a:	e01f      	b.n	800628c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624e:	891b      	ldrh	r3, [r3, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <find_volume+0x3c8>
 8006254:	230d      	movs	r3, #13
 8006256:	e097      	b.n	8006388 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800625c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625e:	441a      	add	r2, r3
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006268:	2b02      	cmp	r3, #2
 800626a:	d103      	bne.n	8006274 <find_volume+0x3e4>
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	e00a      	b.n	800628a <find_volume+0x3fa>
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	4613      	mov	r3, r2
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	4413      	add	r3, r2
 800627e:	085a      	lsrs	r2, r3, #1
 8006280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800628a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	6a1a      	ldr	r2, [r3, #32]
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	899b      	ldrh	r3, [r3, #12]
 8006294:	4619      	mov	r1, r3
 8006296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006298:	440b      	add	r3, r1
 800629a:	3b01      	subs	r3, #1
 800629c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800629e:	8989      	ldrh	r1, [r1, #12]
 80062a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d201      	bcs.n	80062ac <find_volume+0x41c>
 80062a8:	230d      	movs	r3, #13
 80062aa:	e06d      	b.n	8006388 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	f04f 32ff 	mov.w	r2, #4294967295
 80062b2:	619a      	str	r2, [r3, #24]
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	699a      	ldr	r2, [r3, #24]
 80062b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ba:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	2280      	movs	r2, #128	; 0x80
 80062c0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80062c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d149      	bne.n	800635e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	3338      	adds	r3, #56	; 0x38
 80062ce:	3330      	adds	r3, #48	; 0x30
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fd ff67 	bl	80041a4 <ld_word>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d140      	bne.n	800635e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80062dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062de:	3301      	adds	r3, #1
 80062e0:	4619      	mov	r1, r3
 80062e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062e4:	f7fe fa0e 	bl	8004704 <move_window>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d137      	bne.n	800635e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	2200      	movs	r2, #0
 80062f2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	3338      	adds	r3, #56	; 0x38
 80062f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fd ff51 	bl	80041a4 <ld_word>
 8006302:	4603      	mov	r3, r0
 8006304:	461a      	mov	r2, r3
 8006306:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800630a:	429a      	cmp	r2, r3
 800630c:	d127      	bne.n	800635e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006310:	3338      	adds	r3, #56	; 0x38
 8006312:	4618      	mov	r0, r3
 8006314:	f7fd ff5e 	bl	80041d4 <ld_dword>
 8006318:	4602      	mov	r2, r0
 800631a:	4b1d      	ldr	r3, [pc, #116]	; (8006390 <find_volume+0x500>)
 800631c:	429a      	cmp	r2, r3
 800631e:	d11e      	bne.n	800635e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	3338      	adds	r3, #56	; 0x38
 8006324:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006328:	4618      	mov	r0, r3
 800632a:	f7fd ff53 	bl	80041d4 <ld_dword>
 800632e:	4602      	mov	r2, r0
 8006330:	4b18      	ldr	r3, [pc, #96]	; (8006394 <find_volume+0x504>)
 8006332:	429a      	cmp	r2, r3
 8006334:	d113      	bne.n	800635e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006338:	3338      	adds	r3, #56	; 0x38
 800633a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800633e:	4618      	mov	r0, r3
 8006340:	f7fd ff48 	bl	80041d4 <ld_dword>
 8006344:	4602      	mov	r2, r0
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	3338      	adds	r3, #56	; 0x38
 800634e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006352:	4618      	mov	r0, r3
 8006354:	f7fd ff3e 	bl	80041d4 <ld_dword>
 8006358:	4602      	mov	r2, r0
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006364:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <find_volume+0x508>)
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	3301      	adds	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <find_volume+0x508>)
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	4b09      	ldr	r3, [pc, #36]	; (8006398 <find_volume+0x508>)
 8006374:	881a      	ldrh	r2, [r3, #0]
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	4a07      	ldr	r2, [pc, #28]	; (800639c <find_volume+0x50c>)
 800637e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006380:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006382:	f7fe f957 	bl	8004634 <clear_lock>
#endif
	return FR_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3758      	adds	r7, #88	; 0x58
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	41615252 	.word	0x41615252
 8006394:	61417272 	.word	0x61417272
 8006398:	200000b0 	.word	0x200000b0
 800639c:	200000d4 	.word	0x200000d4

080063a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80063aa:	2309      	movs	r3, #9
 80063ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01c      	beq.n	80063ee <validate+0x4e>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d018      	beq.n	80063ee <validate+0x4e>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d013      	beq.n	80063ee <validate+0x4e>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	889a      	ldrh	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	88db      	ldrh	r3, [r3, #6]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d10c      	bne.n	80063ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	785b      	ldrb	r3, [r3, #1]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fd fe44 	bl	8004068 <disk_status>
 80063e0:	4603      	mov	r3, r0
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <validate+0x4e>
			res = FR_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d102      	bne.n	80063fa <validate+0x5a>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	e000      	b.n	80063fc <validate+0x5c>
 80063fa:	2300      	movs	r3, #0
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	6013      	str	r3, [r2, #0]
	return res;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	4613      	mov	r3, r2
 8006418:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800641e:	f107 0310 	add.w	r3, r7, #16
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff fc9a 	bl	8005d5c <get_ldnumber>
 8006428:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	2b00      	cmp	r3, #0
 800642e:	da01      	bge.n	8006434 <f_mount+0x28>
 8006430:	230b      	movs	r3, #11
 8006432:	e02b      	b.n	800648c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006434:	4a17      	ldr	r2, [pc, #92]	; (8006494 <f_mount+0x88>)
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800643c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006444:	69b8      	ldr	r0, [r7, #24]
 8006446:	f7fe f8f5 	bl	8004634 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	2200      	movs	r2, #0
 800644e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	490d      	ldr	r1, [pc, #52]	; (8006494 <f_mount+0x88>)
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <f_mount+0x66>
 800646c:	79fb      	ldrb	r3, [r7, #7]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d001      	beq.n	8006476 <f_mount+0x6a>
 8006472:	2300      	movs	r3, #0
 8006474:	e00a      	b.n	800648c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006476:	f107 010c 	add.w	r1, r7, #12
 800647a:	f107 0308 	add.w	r3, r7, #8
 800647e:	2200      	movs	r2, #0
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff fd05 	bl	8005e90 <find_volume>
 8006486:	4603      	mov	r3, r0
 8006488:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800648a:	7dfb      	ldrb	r3, [r7, #23]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3720      	adds	r7, #32
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	200000ac 	.word	0x200000ac

08006498 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b09a      	sub	sp, #104	; 0x68
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <f_open+0x18>
 80064ac:	2309      	movs	r3, #9
 80064ae:	e1bb      	b.n	8006828 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80064b8:	79fa      	ldrb	r2, [r7, #7]
 80064ba:	f107 0114 	add.w	r1, r7, #20
 80064be:	f107 0308 	add.w	r3, r7, #8
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff fce4 	bl	8005e90 <find_volume>
 80064c8:	4603      	mov	r3, r0
 80064ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80064ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f040 819f 	bne.w	8006816 <f_open+0x37e>
		dj.obj.fs = fs;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	f107 0318 	add.w	r3, r7, #24
 80064e2:	4611      	mov	r1, r2
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff fbc3 	bl	8005c70 <follow_path>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80064f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d11a      	bne.n	800652e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80064f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064fc:	b25b      	sxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	da03      	bge.n	800650a <f_open+0x72>
				res = FR_INVALID_NAME;
 8006502:	2306      	movs	r3, #6
 8006504:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006508:	e011      	b.n	800652e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	bf14      	ite	ne
 8006514:	2301      	movne	r3, #1
 8006516:	2300      	moveq	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	f107 0318 	add.w	r3, r7, #24
 8006520:	4611      	mov	r1, r2
 8006522:	4618      	mov	r0, r3
 8006524:	f7fd ff3e 	bl	80043a4 <chk_lock>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	f003 031c 	and.w	r3, r3, #28
 8006534:	2b00      	cmp	r3, #0
 8006536:	d07f      	beq.n	8006638 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006538:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800653c:	2b00      	cmp	r3, #0
 800653e:	d017      	beq.n	8006570 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006540:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006544:	2b04      	cmp	r3, #4
 8006546:	d10e      	bne.n	8006566 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006548:	f7fd ff88 	bl	800445c <enq_lock>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d006      	beq.n	8006560 <f_open+0xc8>
 8006552:	f107 0318 	add.w	r3, r7, #24
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff f8da 	bl	8005710 <dir_register>
 800655c:	4603      	mov	r3, r0
 800655e:	e000      	b.n	8006562 <f_open+0xca>
 8006560:	2312      	movs	r3, #18
 8006562:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	f043 0308 	orr.w	r3, r3, #8
 800656c:	71fb      	strb	r3, [r7, #7]
 800656e:	e010      	b.n	8006592 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006570:	7fbb      	ldrb	r3, [r7, #30]
 8006572:	f003 0311 	and.w	r3, r3, #17
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <f_open+0xea>
					res = FR_DENIED;
 800657a:	2307      	movs	r3, #7
 800657c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006580:	e007      	b.n	8006592 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <f_open+0xfa>
 800658c:	2308      	movs	r3, #8
 800658e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006592:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006596:	2b00      	cmp	r3, #0
 8006598:	d168      	bne.n	800666c <f_open+0x1d4>
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d063      	beq.n	800666c <f_open+0x1d4>
				dw = GET_FATTIME();
 80065a4:	f7fd fcfe 	bl	8003fa4 <get_fattime>
 80065a8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	330e      	adds	r3, #14
 80065ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fd fe4d 	bl	8004250 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	3316      	adds	r3, #22
 80065ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fd fe47 	bl	8004250 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	330b      	adds	r3, #11
 80065c6:	2220      	movs	r2, #32
 80065c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065ce:	4611      	mov	r1, r2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe fe16 	bl	8005202 <ld_clust>
 80065d6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065dc:	2200      	movs	r2, #0
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe fe2e 	bl	8005240 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80065e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e6:	331c      	adds	r3, #28
 80065e8:	2100      	movs	r1, #0
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fd fe30 	bl	8004250 <st_dword>
					fs->wflag = 1;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2201      	movs	r2, #1
 80065f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80065f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d037      	beq.n	800666c <f_open+0x1d4>
						dw = fs->winsect;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006602:	f107 0318 	add.w	r3, r7, #24
 8006606:	2200      	movs	r2, #0
 8006608:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe fb1e 	bl	8004c4c <remove_chain>
 8006610:	4603      	mov	r3, r0
 8006612:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006616:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800661a:	2b00      	cmp	r3, #0
 800661c:	d126      	bne.n	800666c <f_open+0x1d4>
							res = move_window(fs, dw);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe f86e 	bl	8004704 <move_window>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006632:	3a01      	subs	r2, #1
 8006634:	615a      	str	r2, [r3, #20]
 8006636:	e019      	b.n	800666c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006638:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800663c:	2b00      	cmp	r3, #0
 800663e:	d115      	bne.n	800666c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006640:	7fbb      	ldrb	r3, [r7, #30]
 8006642:	f003 0310 	and.w	r3, r3, #16
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <f_open+0x1ba>
					res = FR_NO_FILE;
 800664a:	2304      	movs	r3, #4
 800664c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006650:	e00c      	b.n	800666c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <f_open+0x1d4>
 800665c:	7fbb      	ldrb	r3, [r7, #30]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <f_open+0x1d4>
						res = FR_DENIED;
 8006666:	2307      	movs	r3, #7
 8006668:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800666c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006670:	2b00      	cmp	r3, #0
 8006672:	d128      	bne.n	80066c6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	f003 0308 	and.w	r3, r3, #8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006684:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800668e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	f023 0301 	bic.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	bf14      	ite	ne
 800669e:	2301      	movne	r3, #1
 80066a0:	2300      	moveq	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	f107 0318 	add.w	r3, r7, #24
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fd fef7 	bl	80044a0 <inc_lock>
 80066b2:	4602      	mov	r2, r0
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d102      	bne.n	80066c6 <f_open+0x22e>
 80066c0:	2302      	movs	r3, #2
 80066c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80066c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f040 80a3 	bne.w	8006816 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066d4:	4611      	mov	r1, r2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe fd93 	bl	8005202 <ld_clust>
 80066dc:	4602      	mov	r2, r0
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	331c      	adds	r3, #28
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fd fd74 	bl	80041d4 <ld_dword>
 80066ec:	4602      	mov	r2, r0
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	88da      	ldrh	r2, [r3, #6]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	79fa      	ldrb	r2, [r7, #7]
 800670a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3330      	adds	r3, #48	; 0x30
 8006722:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006726:	2100      	movs	r1, #0
 8006728:	4618      	mov	r0, r3
 800672a:	f7fd fdde 	bl	80042ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b00      	cmp	r3, #0
 8006736:	d06e      	beq.n	8006816 <f_open+0x37e>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d06a      	beq.n	8006816 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	895b      	ldrh	r3, [r3, #10]
 800674c:	461a      	mov	r2, r3
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	899b      	ldrh	r3, [r3, #12]
 8006752:	fb03 f302 	mul.w	r3, r3, r2
 8006756:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006764:	e016      	b.n	8006794 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe f887 	bl	800487e <get_fat>
 8006770:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006774:	2b01      	cmp	r3, #1
 8006776:	d802      	bhi.n	800677e <f_open+0x2e6>
 8006778:	2302      	movs	r3, #2
 800677a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800677e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d102      	bne.n	800678c <f_open+0x2f4>
 8006786:	2301      	movs	r3, #1
 8006788:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800678c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800678e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006794:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006798:	2b00      	cmp	r3, #0
 800679a:	d103      	bne.n	80067a4 <f_open+0x30c>
 800679c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800679e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d8e0      	bhi.n	8006766 <f_open+0x2ce>
				}
				fp->clust = clst;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80067aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d131      	bne.n	8006816 <f_open+0x37e>
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	899b      	ldrh	r3, [r3, #12]
 80067b6:	461a      	mov	r2, r3
 80067b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80067be:	fb02 f201 	mul.w	r2, r2, r1
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d026      	beq.n	8006816 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fe f837 	bl	8004840 <clust2sect>
 80067d2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80067d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d103      	bne.n	80067e2 <f_open+0x34a>
						res = FR_INT_ERR;
 80067da:	2302      	movs	r3, #2
 80067dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80067e0:	e019      	b.n	8006816 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	899b      	ldrh	r3, [r3, #12]
 80067e6:	461a      	mov	r2, r3
 80067e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80067ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f0:	441a      	add	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	7858      	ldrb	r0, [r3, #1]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a1a      	ldr	r2, [r3, #32]
 8006804:	2301      	movs	r3, #1
 8006806:	f7fd fc6f 	bl	80040e8 <disk_read>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <f_open+0x37e>
 8006810:	2301      	movs	r3, #1
 8006812:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006816:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <f_open+0x38c>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006824:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006828:	4618      	mov	r0, r3
 800682a:	3768      	adds	r7, #104	; 0x68
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08c      	sub	sp, #48	; 0x30
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f107 0210 	add.w	r2, r7, #16
 800684e:	4611      	mov	r1, r2
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff fda5 	bl	80063a0 <validate>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800685c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006860:	2b00      	cmp	r3, #0
 8006862:	d107      	bne.n	8006874 <f_write+0x44>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	7d5b      	ldrb	r3, [r3, #21]
 8006868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800686c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <f_write+0x4a>
 8006874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006878:	e16a      	b.n	8006b50 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	7d1b      	ldrb	r3, [r3, #20]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <f_write+0x5a>
 8006886:	2307      	movs	r3, #7
 8006888:	e162      	b.n	8006b50 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	441a      	add	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	429a      	cmp	r2, r3
 8006898:	f080 814c 	bcs.w	8006b34 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	43db      	mvns	r3, r3
 80068a2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80068a4:	e146      	b.n	8006b34 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	8992      	ldrh	r2, [r2, #12]
 80068ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80068b2:	fb02 f201 	mul.w	r2, r2, r1
 80068b6:	1a9b      	subs	r3, r3, r2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f040 80f1 	bne.w	8006aa0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	8992      	ldrh	r2, [r2, #12]
 80068c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	8952      	ldrh	r2, [r2, #10]
 80068ce:	3a01      	subs	r2, #1
 80068d0:	4013      	ands	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d143      	bne.n	8006962 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10c      	bne.n	80068fc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d11a      	bne.n	8006924 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2100      	movs	r1, #0
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe fa0f 	bl	8004d16 <create_chain>
 80068f8:	62b8      	str	r0, [r7, #40]	; 0x28
 80068fa:	e013      	b.n	8006924 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d007      	beq.n	8006914 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	4619      	mov	r1, r3
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f7fe fa9b 	bl	8004e46 <clmt_clust>
 8006910:	62b8      	str	r0, [r7, #40]	; 0x28
 8006912:	e007      	b.n	8006924 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	4619      	mov	r1, r3
 800691c:	4610      	mov	r0, r2
 800691e:	f7fe f9fa 	bl	8004d16 <create_chain>
 8006922:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 8109 	beq.w	8006b3e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	2b01      	cmp	r3, #1
 8006930:	d104      	bne.n	800693c <f_write+0x10c>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2202      	movs	r2, #2
 8006936:	755a      	strb	r2, [r3, #21]
 8006938:	2302      	movs	r3, #2
 800693a:	e109      	b.n	8006b50 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006942:	d104      	bne.n	800694e <f_write+0x11e>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	755a      	strb	r2, [r3, #21]
 800694a:	2301      	movs	r3, #1
 800694c:	e100      	b.n	8006b50 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006952:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d102      	bne.n	8006962 <f_write+0x132>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006960:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	7d1b      	ldrb	r3, [r3, #20]
 8006966:	b25b      	sxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	da18      	bge.n	800699e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	7858      	ldrb	r0, [r3, #1]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a1a      	ldr	r2, [r3, #32]
 800697a:	2301      	movs	r3, #1
 800697c:	f7fd fbd4 	bl	8004128 <disk_write>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d004      	beq.n	8006990 <f_write+0x160>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	755a      	strb	r2, [r3, #21]
 800698c:	2301      	movs	r3, #1
 800698e:	e0df      	b.n	8006b50 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	7d1b      	ldrb	r3, [r3, #20]
 8006994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006998:	b2da      	uxtb	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	4619      	mov	r1, r3
 80069a6:	4610      	mov	r0, r2
 80069a8:	f7fd ff4a 	bl	8004840 <clust2sect>
 80069ac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d104      	bne.n	80069be <f_write+0x18e>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2202      	movs	r2, #2
 80069b8:	755a      	strb	r2, [r3, #21]
 80069ba:	2302      	movs	r3, #2
 80069bc:	e0c8      	b.n	8006b50 <f_write+0x320>
			sect += csect;
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	4413      	add	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	899b      	ldrh	r3, [r3, #12]
 80069ca:	461a      	mov	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80069d2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d043      	beq.n	8006a62 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80069da:	69ba      	ldr	r2, [r7, #24]
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	4413      	add	r3, r2
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	8952      	ldrh	r2, [r2, #10]
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d905      	bls.n	80069f4 <f_write+0x1c4>
					cc = fs->csize - csect;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	895b      	ldrh	r3, [r3, #10]
 80069ec:	461a      	mov	r2, r3
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	7858      	ldrb	r0, [r3, #1]
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	69f9      	ldr	r1, [r7, #28]
 80069fe:	f7fd fb93 	bl	8004128 <disk_write>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <f_write+0x1e2>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	755a      	strb	r2, [r3, #21]
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e09e      	b.n	8006b50 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a1a      	ldr	r2, [r3, #32]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	6a3a      	ldr	r2, [r7, #32]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d918      	bls.n	8006a52 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a1a      	ldr	r2, [r3, #32]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	8992      	ldrh	r2, [r2, #12]
 8006a32:	fb02 f303 	mul.w	r3, r2, r3
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	18d1      	adds	r1, r2, r3
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	899b      	ldrh	r3, [r3, #12]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f7fd fc32 	bl	80042a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	7d1b      	ldrb	r3, [r3, #20]
 8006a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	899b      	ldrh	r3, [r3, #12]
 8006a56:	461a      	mov	r2, r3
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	fb02 f303 	mul.w	r3, r2, r3
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006a60:	e04b      	b.n	8006afa <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d016      	beq.n	8006a9a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d210      	bcs.n	8006a9a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	7858      	ldrb	r0, [r3, #1]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a82:	2301      	movs	r3, #1
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	f7fd fb2f 	bl	80040e8 <disk_read>
 8006a8a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d004      	beq.n	8006a9a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2201      	movs	r2, #1
 8006a94:	755a      	strb	r2, [r3, #21]
 8006a96:	2301      	movs	r3, #1
 8006a98:	e05a      	b.n	8006b50 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	899b      	ldrh	r3, [r3, #12]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	8992      	ldrh	r2, [r2, #12]
 8006aae:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ab2:	fb02 f201 	mul.w	r2, r2, r1
 8006ab6:	1a9b      	subs	r3, r3, r2
 8006ab8:	1ac3      	subs	r3, r0, r3
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d901      	bls.n	8006ac8 <f_write+0x298>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	8992      	ldrh	r2, [r2, #12]
 8006ad6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ada:	fb02 f200 	mul.w	r2, r2, r0
 8006ade:	1a9b      	subs	r3, r3, r2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae4:	69f9      	ldr	r1, [r7, #28]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fd fbde 	bl	80042a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	7d1b      	ldrb	r3, [r3, #20]
 8006af0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	4413      	add	r3, r2
 8006b00:	61fb      	str	r3, [r7, #28]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	441a      	add	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	619a      	str	r2, [r3, #24]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	bf38      	it	cc
 8006b1a:	461a      	movcc	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	60da      	str	r2, [r3, #12]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	441a      	add	r2, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f47f aeb5 	bne.w	80068a6 <f_write+0x76>
 8006b3c:	e000      	b.n	8006b40 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006b3e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	7d1b      	ldrb	r3, [r3, #20]
 8006b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3730      	adds	r7, #48	; 0x30
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f107 0208 	add.w	r2, r7, #8
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff fc19 	bl	80063a0 <validate>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d168      	bne.n	8006c4a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7d1b      	ldrb	r3, [r3, #20]
 8006b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d062      	beq.n	8006c4a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	7d1b      	ldrb	r3, [r3, #20]
 8006b88:	b25b      	sxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	da15      	bge.n	8006bba <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	7858      	ldrb	r0, [r3, #1]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a1a      	ldr	r2, [r3, #32]
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f7fd fac3 	bl	8004128 <disk_write>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <f_sync+0x54>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e04f      	b.n	8006c4c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	7d1b      	ldrb	r3, [r3, #20]
 8006bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006bba:	f7fd f9f3 	bl	8003fa4 <get_fattime>
 8006bbe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f7fd fd9b 	bl	8004704 <move_window>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d138      	bne.n	8006c4a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bdc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	330b      	adds	r3, #11
 8006be2:	781a      	ldrb	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	330b      	adds	r3, #11
 8006be8:	f042 0220 	orr.w	r2, r2, #32
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6818      	ldr	r0, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	f7fe fb20 	bl	8005240 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f103 021c 	add.w	r2, r3, #28
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	f7fd fb1f 	bl	8004250 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3316      	adds	r3, #22
 8006c16:	6939      	ldr	r1, [r7, #16]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fd fb19 	bl	8004250 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3312      	adds	r3, #18
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fd faf8 	bl	800421a <st_word>
					fs->wflag = 1;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fd fd94 	bl	8004760 <sync_fs>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	7d1b      	ldrb	r3, [r3, #20]
 8006c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff ff7b 	bl	8006b58 <f_sync>
 8006c62:	4603      	mov	r3, r0
 8006c64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d118      	bne.n	8006c9e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f107 0208 	add.w	r2, r7, #8
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff fb93 	bl	80063a0 <validate>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10c      	bne.n	8006c9e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fd fc97 	bl	80045bc <dec_lock>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b092      	sub	sp, #72	; 0x48
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006cb4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006cb8:	f107 030c 	add.w	r3, r7, #12
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff f8e6 	bl	8005e90 <find_volume>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006cca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f040 8099 	bne.w	8006e06 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	3b02      	subs	r3, #2
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d804      	bhi.n	8006cf2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	699a      	ldr	r2, [r3, #24]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	e089      	b.n	8006e06 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d128      	bne.n	8006d50 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006d06:	f107 0314 	add.w	r3, r7, #20
 8006d0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fd fdb6 	bl	800487e <get_fat>
 8006d12:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1a:	d103      	bne.n	8006d24 <f_getfree+0x7c>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006d22:	e063      	b.n	8006dec <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d103      	bne.n	8006d32 <f_getfree+0x8a>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006d30:	e05c      	b.n	8006dec <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d102      	bne.n	8006d3e <f_getfree+0x96>
 8006d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d40:	3301      	adds	r3, #1
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d3db      	bcc.n	8006d06 <f_getfree+0x5e>
 8006d4e:	e04d      	b.n	8006dec <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d60:	2300      	movs	r3, #0
 8006d62:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d113      	bne.n	8006d92 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	63ba      	str	r2, [r7, #56]	; 0x38
 8006d72:	4619      	mov	r1, r3
 8006d74:	f7fd fcc6 	bl	8004704 <move_window>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006d7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d131      	bne.n	8006dea <f_getfree+0x142>
							p = fs->win;
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	3338      	adds	r3, #56	; 0x38
 8006d8a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	899b      	ldrh	r3, [r3, #12]
 8006d90:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d10f      	bne.n	8006dba <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d9c:	f7fd fa02 	bl	80041a4 <ld_word>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <f_getfree+0x104>
 8006da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da8:	3301      	adds	r3, #1
 8006daa:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	3302      	adds	r3, #2
 8006db0:	633b      	str	r3, [r7, #48]	; 0x30
 8006db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db4:	3b02      	subs	r3, #2
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
 8006db8:	e010      	b.n	8006ddc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dbc:	f7fd fa0a 	bl	80041d4 <ld_dword>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d102      	bne.n	8006dd0 <f_getfree+0x128>
 8006dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dcc:	3301      	adds	r3, #1
 8006dce:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd8:	3b04      	subs	r3, #4
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dde:	3b01      	subs	r3, #1
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1bd      	bne.n	8006d64 <f_getfree+0xbc>
 8006de8:	e000      	b.n	8006dec <f_getfree+0x144>
							if (res != FR_OK) break;
 8006dea:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006df0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006df6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfa:	791a      	ldrb	r2, [r3, #4]
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006e06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3748      	adds	r7, #72	; 0x48
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006e22:	2301      	movs	r3, #1
 8006e24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006e2a:	4b1f      	ldr	r3, [pc, #124]	; (8006ea8 <FATFS_LinkDriverEx+0x94>)
 8006e2c:	7a5b      	ldrb	r3, [r3, #9]
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d131      	bne.n	8006e98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006e34:	4b1c      	ldr	r3, [pc, #112]	; (8006ea8 <FATFS_LinkDriverEx+0x94>)
 8006e36:	7a5b      	ldrb	r3, [r3, #9]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	4b1a      	ldr	r3, [pc, #104]	; (8006ea8 <FATFS_LinkDriverEx+0x94>)
 8006e3e:	2100      	movs	r1, #0
 8006e40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006e42:	4b19      	ldr	r3, [pc, #100]	; (8006ea8 <FATFS_LinkDriverEx+0x94>)
 8006e44:	7a5b      	ldrb	r3, [r3, #9]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <FATFS_LinkDriverEx+0x94>)
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006e52:	4b15      	ldr	r3, [pc, #84]	; (8006ea8 <FATFS_LinkDriverEx+0x94>)
 8006e54:	7a5b      	ldrb	r3, [r3, #9]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4b13      	ldr	r3, [pc, #76]	; (8006ea8 <FATFS_LinkDriverEx+0x94>)
 8006e5c:	4413      	add	r3, r2
 8006e5e:	79fa      	ldrb	r2, [r7, #7]
 8006e60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006e62:	4b11      	ldr	r3, [pc, #68]	; (8006ea8 <FATFS_LinkDriverEx+0x94>)
 8006e64:	7a5b      	ldrb	r3, [r3, #9]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	b2d1      	uxtb	r1, r2
 8006e6c:	4a0e      	ldr	r2, [pc, #56]	; (8006ea8 <FATFS_LinkDriverEx+0x94>)
 8006e6e:	7251      	strb	r1, [r2, #9]
 8006e70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006e72:	7dbb      	ldrb	r3, [r7, #22]
 8006e74:	3330      	adds	r3, #48	; 0x30
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	223a      	movs	r2, #58	; 0x3a
 8006e82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	3302      	adds	r3, #2
 8006e88:	222f      	movs	r2, #47	; 0x2f
 8006e8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	3303      	adds	r3, #3
 8006e90:	2200      	movs	r2, #0
 8006e92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	200002d4 	.word	0x200002d4

08006eac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff ffaa 	bl	8006e14 <FATFS_LinkDriverEx>
 8006ec0:	4603      	mov	r3, r0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	2b7f      	cmp	r3, #127	; 0x7f
 8006edc:	d802      	bhi.n	8006ee4 <ff_convert+0x18>
		c = chr;
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	81fb      	strh	r3, [r7, #14]
 8006ee2:	e025      	b.n	8006f30 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00b      	beq.n	8006f02 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006eea:	88fb      	ldrh	r3, [r7, #6]
 8006eec:	2bff      	cmp	r3, #255	; 0xff
 8006eee:	d805      	bhi.n	8006efc <ff_convert+0x30>
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	3b80      	subs	r3, #128	; 0x80
 8006ef4:	4a12      	ldr	r2, [pc, #72]	; (8006f40 <ff_convert+0x74>)
 8006ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006efa:	e000      	b.n	8006efe <ff_convert+0x32>
 8006efc:	2300      	movs	r3, #0
 8006efe:	81fb      	strh	r3, [r7, #14]
 8006f00:	e016      	b.n	8006f30 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006f02:	2300      	movs	r3, #0
 8006f04:	81fb      	strh	r3, [r7, #14]
 8006f06:	e009      	b.n	8006f1c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006f08:	89fb      	ldrh	r3, [r7, #14]
 8006f0a:	4a0d      	ldr	r2, [pc, #52]	; (8006f40 <ff_convert+0x74>)
 8006f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f10:	88fa      	ldrh	r2, [r7, #6]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d006      	beq.n	8006f24 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006f16:	89fb      	ldrh	r3, [r7, #14]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	81fb      	strh	r3, [r7, #14]
 8006f1c:	89fb      	ldrh	r3, [r7, #14]
 8006f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f20:	d9f2      	bls.n	8006f08 <ff_convert+0x3c>
 8006f22:	e000      	b.n	8006f26 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006f24:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006f26:	89fb      	ldrh	r3, [r7, #14]
 8006f28:	3380      	adds	r3, #128	; 0x80
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006f30:	89fb      	ldrh	r3, [r7, #14]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	08007a30 	.word	0x08007a30

08006f44 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006f4e:	88fb      	ldrh	r3, [r7, #6]
 8006f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f54:	d201      	bcs.n	8006f5a <ff_wtoupper+0x16>
 8006f56:	4b3e      	ldr	r3, [pc, #248]	; (8007050 <ff_wtoupper+0x10c>)
 8006f58:	e000      	b.n	8006f5c <ff_wtoupper+0x18>
 8006f5a:	4b3e      	ldr	r3, [pc, #248]	; (8007054 <ff_wtoupper+0x110>)
 8006f5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	1c9a      	adds	r2, r3, #2
 8006f62:	617a      	str	r2, [r7, #20]
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006f68:	8a7b      	ldrh	r3, [r7, #18]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d068      	beq.n	8007040 <ff_wtoupper+0xfc>
 8006f6e:	88fa      	ldrh	r2, [r7, #6]
 8006f70:	8a7b      	ldrh	r3, [r7, #18]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d364      	bcc.n	8007040 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	1c9a      	adds	r2, r3, #2
 8006f7a:	617a      	str	r2, [r7, #20]
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	823b      	strh	r3, [r7, #16]
 8006f80:	8a3b      	ldrh	r3, [r7, #16]
 8006f82:	0a1b      	lsrs	r3, r3, #8
 8006f84:	81fb      	strh	r3, [r7, #14]
 8006f86:	8a3b      	ldrh	r3, [r7, #16]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006f8c:	88fa      	ldrh	r2, [r7, #6]
 8006f8e:	8a79      	ldrh	r1, [r7, #18]
 8006f90:	8a3b      	ldrh	r3, [r7, #16]
 8006f92:	440b      	add	r3, r1
 8006f94:	429a      	cmp	r2, r3
 8006f96:	da49      	bge.n	800702c <ff_wtoupper+0xe8>
			switch (cmd) {
 8006f98:	89fb      	ldrh	r3, [r7, #14]
 8006f9a:	2b08      	cmp	r3, #8
 8006f9c:	d84f      	bhi.n	800703e <ff_wtoupper+0xfa>
 8006f9e:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <ff_wtoupper+0x60>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006fc9 	.word	0x08006fc9
 8006fa8:	08006fdb 	.word	0x08006fdb
 8006fac:	08006ff1 	.word	0x08006ff1
 8006fb0:	08006ff9 	.word	0x08006ff9
 8006fb4:	08007001 	.word	0x08007001
 8006fb8:	08007009 	.word	0x08007009
 8006fbc:	08007011 	.word	0x08007011
 8006fc0:	08007019 	.word	0x08007019
 8006fc4:	08007021 	.word	0x08007021
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006fc8:	88fa      	ldrh	r2, [r7, #6]
 8006fca:	8a7b      	ldrh	r3, [r7, #18]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	80fb      	strh	r3, [r7, #6]
 8006fd8:	e027      	b.n	800702a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006fda:	88fa      	ldrh	r2, [r7, #6]
 8006fdc:	8a7b      	ldrh	r3, [r7, #18]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	80fb      	strh	r3, [r7, #6]
 8006fee:	e01c      	b.n	800702a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006ff0:	88fb      	ldrh	r3, [r7, #6]
 8006ff2:	3b10      	subs	r3, #16
 8006ff4:	80fb      	strh	r3, [r7, #6]
 8006ff6:	e018      	b.n	800702a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006ff8:	88fb      	ldrh	r3, [r7, #6]
 8006ffa:	3b20      	subs	r3, #32
 8006ffc:	80fb      	strh	r3, [r7, #6]
 8006ffe:	e014      	b.n	800702a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	3b30      	subs	r3, #48	; 0x30
 8007004:	80fb      	strh	r3, [r7, #6]
 8007006:	e010      	b.n	800702a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	3b1a      	subs	r3, #26
 800700c:	80fb      	strh	r3, [r7, #6]
 800700e:	e00c      	b.n	800702a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007010:	88fb      	ldrh	r3, [r7, #6]
 8007012:	3308      	adds	r3, #8
 8007014:	80fb      	strh	r3, [r7, #6]
 8007016:	e008      	b.n	800702a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	3b50      	subs	r3, #80	; 0x50
 800701c:	80fb      	strh	r3, [r7, #6]
 800701e:	e004      	b.n	800702a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007026:	80fb      	strh	r3, [r7, #6]
 8007028:	bf00      	nop
			}
			break;
 800702a:	e008      	b.n	800703e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800702c:	89fb      	ldrh	r3, [r7, #14]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d195      	bne.n	8006f5e <ff_wtoupper+0x1a>
 8007032:	8a3b      	ldrh	r3, [r7, #16]
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4413      	add	r3, r2
 800703a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800703c:	e78f      	b.n	8006f5e <ff_wtoupper+0x1a>
			break;
 800703e:	bf00      	nop
	}

	return chr;
 8007040:	88fb      	ldrh	r3, [r7, #6]
}
 8007042:	4618      	mov	r0, r3
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	08007b30 	.word	0x08007b30
 8007054:	08007d24 	.word	0x08007d24

08007058 <__errno>:
 8007058:	4b01      	ldr	r3, [pc, #4]	; (8007060 <__errno+0x8>)
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20000024 	.word	0x20000024

08007064 <__libc_init_array>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	4e0d      	ldr	r6, [pc, #52]	; (800709c <__libc_init_array+0x38>)
 8007068:	4c0d      	ldr	r4, [pc, #52]	; (80070a0 <__libc_init_array+0x3c>)
 800706a:	1ba4      	subs	r4, r4, r6
 800706c:	10a4      	asrs	r4, r4, #2
 800706e:	2500      	movs	r5, #0
 8007070:	42a5      	cmp	r5, r4
 8007072:	d109      	bne.n	8007088 <__libc_init_array+0x24>
 8007074:	4e0b      	ldr	r6, [pc, #44]	; (80070a4 <__libc_init_array+0x40>)
 8007076:	4c0c      	ldr	r4, [pc, #48]	; (80070a8 <__libc_init_array+0x44>)
 8007078:	f000 fc26 	bl	80078c8 <_init>
 800707c:	1ba4      	subs	r4, r4, r6
 800707e:	10a4      	asrs	r4, r4, #2
 8007080:	2500      	movs	r5, #0
 8007082:	42a5      	cmp	r5, r4
 8007084:	d105      	bne.n	8007092 <__libc_init_array+0x2e>
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800708c:	4798      	blx	r3
 800708e:	3501      	adds	r5, #1
 8007090:	e7ee      	b.n	8007070 <__libc_init_array+0xc>
 8007092:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007096:	4798      	blx	r3
 8007098:	3501      	adds	r5, #1
 800709a:	e7f2      	b.n	8007082 <__libc_init_array+0x1e>
 800709c:	08007e1c 	.word	0x08007e1c
 80070a0:	08007e1c 	.word	0x08007e1c
 80070a4:	08007e1c 	.word	0x08007e1c
 80070a8:	08007e20 	.word	0x08007e20

080070ac <memset>:
 80070ac:	4402      	add	r2, r0
 80070ae:	4603      	mov	r3, r0
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d100      	bne.n	80070b6 <memset+0xa>
 80070b4:	4770      	bx	lr
 80070b6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ba:	e7f9      	b.n	80070b0 <memset+0x4>

080070bc <siprintf>:
 80070bc:	b40e      	push	{r1, r2, r3}
 80070be:	b500      	push	{lr}
 80070c0:	b09c      	sub	sp, #112	; 0x70
 80070c2:	ab1d      	add	r3, sp, #116	; 0x74
 80070c4:	9002      	str	r0, [sp, #8]
 80070c6:	9006      	str	r0, [sp, #24]
 80070c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070cc:	4809      	ldr	r0, [pc, #36]	; (80070f4 <siprintf+0x38>)
 80070ce:	9107      	str	r1, [sp, #28]
 80070d0:	9104      	str	r1, [sp, #16]
 80070d2:	4909      	ldr	r1, [pc, #36]	; (80070f8 <siprintf+0x3c>)
 80070d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070d8:	9105      	str	r1, [sp, #20]
 80070da:	6800      	ldr	r0, [r0, #0]
 80070dc:	9301      	str	r3, [sp, #4]
 80070de:	a902      	add	r1, sp, #8
 80070e0:	f000 f866 	bl	80071b0 <_svfiprintf_r>
 80070e4:	9b02      	ldr	r3, [sp, #8]
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	b01c      	add	sp, #112	; 0x70
 80070ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80070f0:	b003      	add	sp, #12
 80070f2:	4770      	bx	lr
 80070f4:	20000024 	.word	0x20000024
 80070f8:	ffff0208 	.word	0xffff0208

080070fc <__ssputs_r>:
 80070fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	688e      	ldr	r6, [r1, #8]
 8007102:	429e      	cmp	r6, r3
 8007104:	4682      	mov	sl, r0
 8007106:	460c      	mov	r4, r1
 8007108:	4690      	mov	r8, r2
 800710a:	4699      	mov	r9, r3
 800710c:	d837      	bhi.n	800717e <__ssputs_r+0x82>
 800710e:	898a      	ldrh	r2, [r1, #12]
 8007110:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007114:	d031      	beq.n	800717a <__ssputs_r+0x7e>
 8007116:	6825      	ldr	r5, [r4, #0]
 8007118:	6909      	ldr	r1, [r1, #16]
 800711a:	1a6f      	subs	r7, r5, r1
 800711c:	6965      	ldr	r5, [r4, #20]
 800711e:	2302      	movs	r3, #2
 8007120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007124:	fb95 f5f3 	sdiv	r5, r5, r3
 8007128:	f109 0301 	add.w	r3, r9, #1
 800712c:	443b      	add	r3, r7
 800712e:	429d      	cmp	r5, r3
 8007130:	bf38      	it	cc
 8007132:	461d      	movcc	r5, r3
 8007134:	0553      	lsls	r3, r2, #21
 8007136:	d530      	bpl.n	800719a <__ssputs_r+0x9e>
 8007138:	4629      	mov	r1, r5
 800713a:	f000 fb2b 	bl	8007794 <_malloc_r>
 800713e:	4606      	mov	r6, r0
 8007140:	b950      	cbnz	r0, 8007158 <__ssputs_r+0x5c>
 8007142:	230c      	movs	r3, #12
 8007144:	f8ca 3000 	str.w	r3, [sl]
 8007148:	89a3      	ldrh	r3, [r4, #12]
 800714a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800714e:	81a3      	strh	r3, [r4, #12]
 8007150:	f04f 30ff 	mov.w	r0, #4294967295
 8007154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007158:	463a      	mov	r2, r7
 800715a:	6921      	ldr	r1, [r4, #16]
 800715c:	f000 faa8 	bl	80076b0 <memcpy>
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	6126      	str	r6, [r4, #16]
 800716e:	6165      	str	r5, [r4, #20]
 8007170:	443e      	add	r6, r7
 8007172:	1bed      	subs	r5, r5, r7
 8007174:	6026      	str	r6, [r4, #0]
 8007176:	60a5      	str	r5, [r4, #8]
 8007178:	464e      	mov	r6, r9
 800717a:	454e      	cmp	r6, r9
 800717c:	d900      	bls.n	8007180 <__ssputs_r+0x84>
 800717e:	464e      	mov	r6, r9
 8007180:	4632      	mov	r2, r6
 8007182:	4641      	mov	r1, r8
 8007184:	6820      	ldr	r0, [r4, #0]
 8007186:	f000 fa9e 	bl	80076c6 <memmove>
 800718a:	68a3      	ldr	r3, [r4, #8]
 800718c:	1b9b      	subs	r3, r3, r6
 800718e:	60a3      	str	r3, [r4, #8]
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	441e      	add	r6, r3
 8007194:	6026      	str	r6, [r4, #0]
 8007196:	2000      	movs	r0, #0
 8007198:	e7dc      	b.n	8007154 <__ssputs_r+0x58>
 800719a:	462a      	mov	r2, r5
 800719c:	f000 fb54 	bl	8007848 <_realloc_r>
 80071a0:	4606      	mov	r6, r0
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d1e2      	bne.n	800716c <__ssputs_r+0x70>
 80071a6:	6921      	ldr	r1, [r4, #16]
 80071a8:	4650      	mov	r0, sl
 80071aa:	f000 faa5 	bl	80076f8 <_free_r>
 80071ae:	e7c8      	b.n	8007142 <__ssputs_r+0x46>

080071b0 <_svfiprintf_r>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	461d      	mov	r5, r3
 80071b6:	898b      	ldrh	r3, [r1, #12]
 80071b8:	061f      	lsls	r7, r3, #24
 80071ba:	b09d      	sub	sp, #116	; 0x74
 80071bc:	4680      	mov	r8, r0
 80071be:	460c      	mov	r4, r1
 80071c0:	4616      	mov	r6, r2
 80071c2:	d50f      	bpl.n	80071e4 <_svfiprintf_r+0x34>
 80071c4:	690b      	ldr	r3, [r1, #16]
 80071c6:	b96b      	cbnz	r3, 80071e4 <_svfiprintf_r+0x34>
 80071c8:	2140      	movs	r1, #64	; 0x40
 80071ca:	f000 fae3 	bl	8007794 <_malloc_r>
 80071ce:	6020      	str	r0, [r4, #0]
 80071d0:	6120      	str	r0, [r4, #16]
 80071d2:	b928      	cbnz	r0, 80071e0 <_svfiprintf_r+0x30>
 80071d4:	230c      	movs	r3, #12
 80071d6:	f8c8 3000 	str.w	r3, [r8]
 80071da:	f04f 30ff 	mov.w	r0, #4294967295
 80071de:	e0c8      	b.n	8007372 <_svfiprintf_r+0x1c2>
 80071e0:	2340      	movs	r3, #64	; 0x40
 80071e2:	6163      	str	r3, [r4, #20]
 80071e4:	2300      	movs	r3, #0
 80071e6:	9309      	str	r3, [sp, #36]	; 0x24
 80071e8:	2320      	movs	r3, #32
 80071ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071ee:	2330      	movs	r3, #48	; 0x30
 80071f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071f4:	9503      	str	r5, [sp, #12]
 80071f6:	f04f 0b01 	mov.w	fp, #1
 80071fa:	4637      	mov	r7, r6
 80071fc:	463d      	mov	r5, r7
 80071fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007202:	b10b      	cbz	r3, 8007208 <_svfiprintf_r+0x58>
 8007204:	2b25      	cmp	r3, #37	; 0x25
 8007206:	d13e      	bne.n	8007286 <_svfiprintf_r+0xd6>
 8007208:	ebb7 0a06 	subs.w	sl, r7, r6
 800720c:	d00b      	beq.n	8007226 <_svfiprintf_r+0x76>
 800720e:	4653      	mov	r3, sl
 8007210:	4632      	mov	r2, r6
 8007212:	4621      	mov	r1, r4
 8007214:	4640      	mov	r0, r8
 8007216:	f7ff ff71 	bl	80070fc <__ssputs_r>
 800721a:	3001      	adds	r0, #1
 800721c:	f000 80a4 	beq.w	8007368 <_svfiprintf_r+0x1b8>
 8007220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007222:	4453      	add	r3, sl
 8007224:	9309      	str	r3, [sp, #36]	; 0x24
 8007226:	783b      	ldrb	r3, [r7, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 809d 	beq.w	8007368 <_svfiprintf_r+0x1b8>
 800722e:	2300      	movs	r3, #0
 8007230:	f04f 32ff 	mov.w	r2, #4294967295
 8007234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	9307      	str	r3, [sp, #28]
 800723c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007240:	931a      	str	r3, [sp, #104]	; 0x68
 8007242:	462f      	mov	r7, r5
 8007244:	2205      	movs	r2, #5
 8007246:	f817 1b01 	ldrb.w	r1, [r7], #1
 800724a:	4850      	ldr	r0, [pc, #320]	; (800738c <_svfiprintf_r+0x1dc>)
 800724c:	f7f8 ffe8 	bl	8000220 <memchr>
 8007250:	9b04      	ldr	r3, [sp, #16]
 8007252:	b9d0      	cbnz	r0, 800728a <_svfiprintf_r+0xda>
 8007254:	06d9      	lsls	r1, r3, #27
 8007256:	bf44      	itt	mi
 8007258:	2220      	movmi	r2, #32
 800725a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800725e:	071a      	lsls	r2, r3, #28
 8007260:	bf44      	itt	mi
 8007262:	222b      	movmi	r2, #43	; 0x2b
 8007264:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007268:	782a      	ldrb	r2, [r5, #0]
 800726a:	2a2a      	cmp	r2, #42	; 0x2a
 800726c:	d015      	beq.n	800729a <_svfiprintf_r+0xea>
 800726e:	9a07      	ldr	r2, [sp, #28]
 8007270:	462f      	mov	r7, r5
 8007272:	2000      	movs	r0, #0
 8007274:	250a      	movs	r5, #10
 8007276:	4639      	mov	r1, r7
 8007278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800727c:	3b30      	subs	r3, #48	; 0x30
 800727e:	2b09      	cmp	r3, #9
 8007280:	d94d      	bls.n	800731e <_svfiprintf_r+0x16e>
 8007282:	b1b8      	cbz	r0, 80072b4 <_svfiprintf_r+0x104>
 8007284:	e00f      	b.n	80072a6 <_svfiprintf_r+0xf6>
 8007286:	462f      	mov	r7, r5
 8007288:	e7b8      	b.n	80071fc <_svfiprintf_r+0x4c>
 800728a:	4a40      	ldr	r2, [pc, #256]	; (800738c <_svfiprintf_r+0x1dc>)
 800728c:	1a80      	subs	r0, r0, r2
 800728e:	fa0b f000 	lsl.w	r0, fp, r0
 8007292:	4318      	orrs	r0, r3
 8007294:	9004      	str	r0, [sp, #16]
 8007296:	463d      	mov	r5, r7
 8007298:	e7d3      	b.n	8007242 <_svfiprintf_r+0x92>
 800729a:	9a03      	ldr	r2, [sp, #12]
 800729c:	1d11      	adds	r1, r2, #4
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	9103      	str	r1, [sp, #12]
 80072a2:	2a00      	cmp	r2, #0
 80072a4:	db01      	blt.n	80072aa <_svfiprintf_r+0xfa>
 80072a6:	9207      	str	r2, [sp, #28]
 80072a8:	e004      	b.n	80072b4 <_svfiprintf_r+0x104>
 80072aa:	4252      	negs	r2, r2
 80072ac:	f043 0302 	orr.w	r3, r3, #2
 80072b0:	9207      	str	r2, [sp, #28]
 80072b2:	9304      	str	r3, [sp, #16]
 80072b4:	783b      	ldrb	r3, [r7, #0]
 80072b6:	2b2e      	cmp	r3, #46	; 0x2e
 80072b8:	d10c      	bne.n	80072d4 <_svfiprintf_r+0x124>
 80072ba:	787b      	ldrb	r3, [r7, #1]
 80072bc:	2b2a      	cmp	r3, #42	; 0x2a
 80072be:	d133      	bne.n	8007328 <_svfiprintf_r+0x178>
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	1d1a      	adds	r2, r3, #4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	9203      	str	r2, [sp, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bfb8      	it	lt
 80072cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80072d0:	3702      	adds	r7, #2
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	4d2e      	ldr	r5, [pc, #184]	; (8007390 <_svfiprintf_r+0x1e0>)
 80072d6:	7839      	ldrb	r1, [r7, #0]
 80072d8:	2203      	movs	r2, #3
 80072da:	4628      	mov	r0, r5
 80072dc:	f7f8 ffa0 	bl	8000220 <memchr>
 80072e0:	b138      	cbz	r0, 80072f2 <_svfiprintf_r+0x142>
 80072e2:	2340      	movs	r3, #64	; 0x40
 80072e4:	1b40      	subs	r0, r0, r5
 80072e6:	fa03 f000 	lsl.w	r0, r3, r0
 80072ea:	9b04      	ldr	r3, [sp, #16]
 80072ec:	4303      	orrs	r3, r0
 80072ee:	3701      	adds	r7, #1
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	7839      	ldrb	r1, [r7, #0]
 80072f4:	4827      	ldr	r0, [pc, #156]	; (8007394 <_svfiprintf_r+0x1e4>)
 80072f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072fa:	2206      	movs	r2, #6
 80072fc:	1c7e      	adds	r6, r7, #1
 80072fe:	f7f8 ff8f 	bl	8000220 <memchr>
 8007302:	2800      	cmp	r0, #0
 8007304:	d038      	beq.n	8007378 <_svfiprintf_r+0x1c8>
 8007306:	4b24      	ldr	r3, [pc, #144]	; (8007398 <_svfiprintf_r+0x1e8>)
 8007308:	bb13      	cbnz	r3, 8007350 <_svfiprintf_r+0x1a0>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	3307      	adds	r3, #7
 800730e:	f023 0307 	bic.w	r3, r3, #7
 8007312:	3308      	adds	r3, #8
 8007314:	9303      	str	r3, [sp, #12]
 8007316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007318:	444b      	add	r3, r9
 800731a:	9309      	str	r3, [sp, #36]	; 0x24
 800731c:	e76d      	b.n	80071fa <_svfiprintf_r+0x4a>
 800731e:	fb05 3202 	mla	r2, r5, r2, r3
 8007322:	2001      	movs	r0, #1
 8007324:	460f      	mov	r7, r1
 8007326:	e7a6      	b.n	8007276 <_svfiprintf_r+0xc6>
 8007328:	2300      	movs	r3, #0
 800732a:	3701      	adds	r7, #1
 800732c:	9305      	str	r3, [sp, #20]
 800732e:	4619      	mov	r1, r3
 8007330:	250a      	movs	r5, #10
 8007332:	4638      	mov	r0, r7
 8007334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007338:	3a30      	subs	r2, #48	; 0x30
 800733a:	2a09      	cmp	r2, #9
 800733c:	d903      	bls.n	8007346 <_svfiprintf_r+0x196>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0c8      	beq.n	80072d4 <_svfiprintf_r+0x124>
 8007342:	9105      	str	r1, [sp, #20]
 8007344:	e7c6      	b.n	80072d4 <_svfiprintf_r+0x124>
 8007346:	fb05 2101 	mla	r1, r5, r1, r2
 800734a:	2301      	movs	r3, #1
 800734c:	4607      	mov	r7, r0
 800734e:	e7f0      	b.n	8007332 <_svfiprintf_r+0x182>
 8007350:	ab03      	add	r3, sp, #12
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	4622      	mov	r2, r4
 8007356:	4b11      	ldr	r3, [pc, #68]	; (800739c <_svfiprintf_r+0x1ec>)
 8007358:	a904      	add	r1, sp, #16
 800735a:	4640      	mov	r0, r8
 800735c:	f3af 8000 	nop.w
 8007360:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007364:	4681      	mov	r9, r0
 8007366:	d1d6      	bne.n	8007316 <_svfiprintf_r+0x166>
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	065b      	lsls	r3, r3, #25
 800736c:	f53f af35 	bmi.w	80071da <_svfiprintf_r+0x2a>
 8007370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007372:	b01d      	add	sp, #116	; 0x74
 8007374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007378:	ab03      	add	r3, sp, #12
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	4622      	mov	r2, r4
 800737e:	4b07      	ldr	r3, [pc, #28]	; (800739c <_svfiprintf_r+0x1ec>)
 8007380:	a904      	add	r1, sp, #16
 8007382:	4640      	mov	r0, r8
 8007384:	f000 f882 	bl	800748c <_printf_i>
 8007388:	e7ea      	b.n	8007360 <_svfiprintf_r+0x1b0>
 800738a:	bf00      	nop
 800738c:	08007de0 	.word	0x08007de0
 8007390:	08007de6 	.word	0x08007de6
 8007394:	08007dea 	.word	0x08007dea
 8007398:	00000000 	.word	0x00000000
 800739c:	080070fd 	.word	0x080070fd

080073a0 <_printf_common>:
 80073a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	4691      	mov	r9, r2
 80073a6:	461f      	mov	r7, r3
 80073a8:	688a      	ldr	r2, [r1, #8]
 80073aa:	690b      	ldr	r3, [r1, #16]
 80073ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073b0:	4293      	cmp	r3, r2
 80073b2:	bfb8      	it	lt
 80073b4:	4613      	movlt	r3, r2
 80073b6:	f8c9 3000 	str.w	r3, [r9]
 80073ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073be:	4606      	mov	r6, r0
 80073c0:	460c      	mov	r4, r1
 80073c2:	b112      	cbz	r2, 80073ca <_printf_common+0x2a>
 80073c4:	3301      	adds	r3, #1
 80073c6:	f8c9 3000 	str.w	r3, [r9]
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	0699      	lsls	r1, r3, #26
 80073ce:	bf42      	ittt	mi
 80073d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80073d4:	3302      	addmi	r3, #2
 80073d6:	f8c9 3000 	strmi.w	r3, [r9]
 80073da:	6825      	ldr	r5, [r4, #0]
 80073dc:	f015 0506 	ands.w	r5, r5, #6
 80073e0:	d107      	bne.n	80073f2 <_printf_common+0x52>
 80073e2:	f104 0a19 	add.w	sl, r4, #25
 80073e6:	68e3      	ldr	r3, [r4, #12]
 80073e8:	f8d9 2000 	ldr.w	r2, [r9]
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	42ab      	cmp	r3, r5
 80073f0:	dc28      	bgt.n	8007444 <_printf_common+0xa4>
 80073f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80073f6:	6822      	ldr	r2, [r4, #0]
 80073f8:	3300      	adds	r3, #0
 80073fa:	bf18      	it	ne
 80073fc:	2301      	movne	r3, #1
 80073fe:	0692      	lsls	r2, r2, #26
 8007400:	d42d      	bmi.n	800745e <_printf_common+0xbe>
 8007402:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007406:	4639      	mov	r1, r7
 8007408:	4630      	mov	r0, r6
 800740a:	47c0      	blx	r8
 800740c:	3001      	adds	r0, #1
 800740e:	d020      	beq.n	8007452 <_printf_common+0xb2>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	68e5      	ldr	r5, [r4, #12]
 8007414:	f8d9 2000 	ldr.w	r2, [r9]
 8007418:	f003 0306 	and.w	r3, r3, #6
 800741c:	2b04      	cmp	r3, #4
 800741e:	bf08      	it	eq
 8007420:	1aad      	subeq	r5, r5, r2
 8007422:	68a3      	ldr	r3, [r4, #8]
 8007424:	6922      	ldr	r2, [r4, #16]
 8007426:	bf0c      	ite	eq
 8007428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800742c:	2500      	movne	r5, #0
 800742e:	4293      	cmp	r3, r2
 8007430:	bfc4      	itt	gt
 8007432:	1a9b      	subgt	r3, r3, r2
 8007434:	18ed      	addgt	r5, r5, r3
 8007436:	f04f 0900 	mov.w	r9, #0
 800743a:	341a      	adds	r4, #26
 800743c:	454d      	cmp	r5, r9
 800743e:	d11a      	bne.n	8007476 <_printf_common+0xd6>
 8007440:	2000      	movs	r0, #0
 8007442:	e008      	b.n	8007456 <_printf_common+0xb6>
 8007444:	2301      	movs	r3, #1
 8007446:	4652      	mov	r2, sl
 8007448:	4639      	mov	r1, r7
 800744a:	4630      	mov	r0, r6
 800744c:	47c0      	blx	r8
 800744e:	3001      	adds	r0, #1
 8007450:	d103      	bne.n	800745a <_printf_common+0xba>
 8007452:	f04f 30ff 	mov.w	r0, #4294967295
 8007456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745a:	3501      	adds	r5, #1
 800745c:	e7c3      	b.n	80073e6 <_printf_common+0x46>
 800745e:	18e1      	adds	r1, r4, r3
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	2030      	movs	r0, #48	; 0x30
 8007464:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007468:	4422      	add	r2, r4
 800746a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800746e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007472:	3302      	adds	r3, #2
 8007474:	e7c5      	b.n	8007402 <_printf_common+0x62>
 8007476:	2301      	movs	r3, #1
 8007478:	4622      	mov	r2, r4
 800747a:	4639      	mov	r1, r7
 800747c:	4630      	mov	r0, r6
 800747e:	47c0      	blx	r8
 8007480:	3001      	adds	r0, #1
 8007482:	d0e6      	beq.n	8007452 <_printf_common+0xb2>
 8007484:	f109 0901 	add.w	r9, r9, #1
 8007488:	e7d8      	b.n	800743c <_printf_common+0x9c>
	...

0800748c <_printf_i>:
 800748c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007490:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007494:	460c      	mov	r4, r1
 8007496:	7e09      	ldrb	r1, [r1, #24]
 8007498:	b085      	sub	sp, #20
 800749a:	296e      	cmp	r1, #110	; 0x6e
 800749c:	4617      	mov	r7, r2
 800749e:	4606      	mov	r6, r0
 80074a0:	4698      	mov	r8, r3
 80074a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074a4:	f000 80b3 	beq.w	800760e <_printf_i+0x182>
 80074a8:	d822      	bhi.n	80074f0 <_printf_i+0x64>
 80074aa:	2963      	cmp	r1, #99	; 0x63
 80074ac:	d036      	beq.n	800751c <_printf_i+0x90>
 80074ae:	d80a      	bhi.n	80074c6 <_printf_i+0x3a>
 80074b0:	2900      	cmp	r1, #0
 80074b2:	f000 80b9 	beq.w	8007628 <_printf_i+0x19c>
 80074b6:	2958      	cmp	r1, #88	; 0x58
 80074b8:	f000 8083 	beq.w	80075c2 <_printf_i+0x136>
 80074bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80074c4:	e032      	b.n	800752c <_printf_i+0xa0>
 80074c6:	2964      	cmp	r1, #100	; 0x64
 80074c8:	d001      	beq.n	80074ce <_printf_i+0x42>
 80074ca:	2969      	cmp	r1, #105	; 0x69
 80074cc:	d1f6      	bne.n	80074bc <_printf_i+0x30>
 80074ce:	6820      	ldr	r0, [r4, #0]
 80074d0:	6813      	ldr	r3, [r2, #0]
 80074d2:	0605      	lsls	r5, r0, #24
 80074d4:	f103 0104 	add.w	r1, r3, #4
 80074d8:	d52a      	bpl.n	8007530 <_printf_i+0xa4>
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6011      	str	r1, [r2, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	da03      	bge.n	80074ea <_printf_i+0x5e>
 80074e2:	222d      	movs	r2, #45	; 0x2d
 80074e4:	425b      	negs	r3, r3
 80074e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80074ea:	486f      	ldr	r0, [pc, #444]	; (80076a8 <_printf_i+0x21c>)
 80074ec:	220a      	movs	r2, #10
 80074ee:	e039      	b.n	8007564 <_printf_i+0xd8>
 80074f0:	2973      	cmp	r1, #115	; 0x73
 80074f2:	f000 809d 	beq.w	8007630 <_printf_i+0x1a4>
 80074f6:	d808      	bhi.n	800750a <_printf_i+0x7e>
 80074f8:	296f      	cmp	r1, #111	; 0x6f
 80074fa:	d020      	beq.n	800753e <_printf_i+0xb2>
 80074fc:	2970      	cmp	r1, #112	; 0x70
 80074fe:	d1dd      	bne.n	80074bc <_printf_i+0x30>
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	f043 0320 	orr.w	r3, r3, #32
 8007506:	6023      	str	r3, [r4, #0]
 8007508:	e003      	b.n	8007512 <_printf_i+0x86>
 800750a:	2975      	cmp	r1, #117	; 0x75
 800750c:	d017      	beq.n	800753e <_printf_i+0xb2>
 800750e:	2978      	cmp	r1, #120	; 0x78
 8007510:	d1d4      	bne.n	80074bc <_printf_i+0x30>
 8007512:	2378      	movs	r3, #120	; 0x78
 8007514:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007518:	4864      	ldr	r0, [pc, #400]	; (80076ac <_printf_i+0x220>)
 800751a:	e055      	b.n	80075c8 <_printf_i+0x13c>
 800751c:	6813      	ldr	r3, [r2, #0]
 800751e:	1d19      	adds	r1, r3, #4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6011      	str	r1, [r2, #0]
 8007524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800752c:	2301      	movs	r3, #1
 800752e:	e08c      	b.n	800764a <_printf_i+0x1be>
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6011      	str	r1, [r2, #0]
 8007534:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007538:	bf18      	it	ne
 800753a:	b21b      	sxthne	r3, r3
 800753c:	e7cf      	b.n	80074de <_printf_i+0x52>
 800753e:	6813      	ldr	r3, [r2, #0]
 8007540:	6825      	ldr	r5, [r4, #0]
 8007542:	1d18      	adds	r0, r3, #4
 8007544:	6010      	str	r0, [r2, #0]
 8007546:	0628      	lsls	r0, r5, #24
 8007548:	d501      	bpl.n	800754e <_printf_i+0xc2>
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	e002      	b.n	8007554 <_printf_i+0xc8>
 800754e:	0668      	lsls	r0, r5, #25
 8007550:	d5fb      	bpl.n	800754a <_printf_i+0xbe>
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	4854      	ldr	r0, [pc, #336]	; (80076a8 <_printf_i+0x21c>)
 8007556:	296f      	cmp	r1, #111	; 0x6f
 8007558:	bf14      	ite	ne
 800755a:	220a      	movne	r2, #10
 800755c:	2208      	moveq	r2, #8
 800755e:	2100      	movs	r1, #0
 8007560:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007564:	6865      	ldr	r5, [r4, #4]
 8007566:	60a5      	str	r5, [r4, #8]
 8007568:	2d00      	cmp	r5, #0
 800756a:	f2c0 8095 	blt.w	8007698 <_printf_i+0x20c>
 800756e:	6821      	ldr	r1, [r4, #0]
 8007570:	f021 0104 	bic.w	r1, r1, #4
 8007574:	6021      	str	r1, [r4, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d13d      	bne.n	80075f6 <_printf_i+0x16a>
 800757a:	2d00      	cmp	r5, #0
 800757c:	f040 808e 	bne.w	800769c <_printf_i+0x210>
 8007580:	4665      	mov	r5, ip
 8007582:	2a08      	cmp	r2, #8
 8007584:	d10b      	bne.n	800759e <_printf_i+0x112>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	07db      	lsls	r3, r3, #31
 800758a:	d508      	bpl.n	800759e <_printf_i+0x112>
 800758c:	6923      	ldr	r3, [r4, #16]
 800758e:	6862      	ldr	r2, [r4, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	bfde      	ittt	le
 8007594:	2330      	movle	r3, #48	; 0x30
 8007596:	f805 3c01 	strble.w	r3, [r5, #-1]
 800759a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800759e:	ebac 0305 	sub.w	r3, ip, r5
 80075a2:	6123      	str	r3, [r4, #16]
 80075a4:	f8cd 8000 	str.w	r8, [sp]
 80075a8:	463b      	mov	r3, r7
 80075aa:	aa03      	add	r2, sp, #12
 80075ac:	4621      	mov	r1, r4
 80075ae:	4630      	mov	r0, r6
 80075b0:	f7ff fef6 	bl	80073a0 <_printf_common>
 80075b4:	3001      	adds	r0, #1
 80075b6:	d14d      	bne.n	8007654 <_printf_i+0x1c8>
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	b005      	add	sp, #20
 80075be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075c2:	4839      	ldr	r0, [pc, #228]	; (80076a8 <_printf_i+0x21c>)
 80075c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80075c8:	6813      	ldr	r3, [r2, #0]
 80075ca:	6821      	ldr	r1, [r4, #0]
 80075cc:	1d1d      	adds	r5, r3, #4
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6015      	str	r5, [r2, #0]
 80075d2:	060a      	lsls	r2, r1, #24
 80075d4:	d50b      	bpl.n	80075ee <_printf_i+0x162>
 80075d6:	07ca      	lsls	r2, r1, #31
 80075d8:	bf44      	itt	mi
 80075da:	f041 0120 	orrmi.w	r1, r1, #32
 80075de:	6021      	strmi	r1, [r4, #0]
 80075e0:	b91b      	cbnz	r3, 80075ea <_printf_i+0x15e>
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	f022 0220 	bic.w	r2, r2, #32
 80075e8:	6022      	str	r2, [r4, #0]
 80075ea:	2210      	movs	r2, #16
 80075ec:	e7b7      	b.n	800755e <_printf_i+0xd2>
 80075ee:	064d      	lsls	r5, r1, #25
 80075f0:	bf48      	it	mi
 80075f2:	b29b      	uxthmi	r3, r3
 80075f4:	e7ef      	b.n	80075d6 <_printf_i+0x14a>
 80075f6:	4665      	mov	r5, ip
 80075f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80075fc:	fb02 3311 	mls	r3, r2, r1, r3
 8007600:	5cc3      	ldrb	r3, [r0, r3]
 8007602:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007606:	460b      	mov	r3, r1
 8007608:	2900      	cmp	r1, #0
 800760a:	d1f5      	bne.n	80075f8 <_printf_i+0x16c>
 800760c:	e7b9      	b.n	8007582 <_printf_i+0xf6>
 800760e:	6813      	ldr	r3, [r2, #0]
 8007610:	6825      	ldr	r5, [r4, #0]
 8007612:	6961      	ldr	r1, [r4, #20]
 8007614:	1d18      	adds	r0, r3, #4
 8007616:	6010      	str	r0, [r2, #0]
 8007618:	0628      	lsls	r0, r5, #24
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	d501      	bpl.n	8007622 <_printf_i+0x196>
 800761e:	6019      	str	r1, [r3, #0]
 8007620:	e002      	b.n	8007628 <_printf_i+0x19c>
 8007622:	066a      	lsls	r2, r5, #25
 8007624:	d5fb      	bpl.n	800761e <_printf_i+0x192>
 8007626:	8019      	strh	r1, [r3, #0]
 8007628:	2300      	movs	r3, #0
 800762a:	6123      	str	r3, [r4, #16]
 800762c:	4665      	mov	r5, ip
 800762e:	e7b9      	b.n	80075a4 <_printf_i+0x118>
 8007630:	6813      	ldr	r3, [r2, #0]
 8007632:	1d19      	adds	r1, r3, #4
 8007634:	6011      	str	r1, [r2, #0]
 8007636:	681d      	ldr	r5, [r3, #0]
 8007638:	6862      	ldr	r2, [r4, #4]
 800763a:	2100      	movs	r1, #0
 800763c:	4628      	mov	r0, r5
 800763e:	f7f8 fdef 	bl	8000220 <memchr>
 8007642:	b108      	cbz	r0, 8007648 <_printf_i+0x1bc>
 8007644:	1b40      	subs	r0, r0, r5
 8007646:	6060      	str	r0, [r4, #4]
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	6123      	str	r3, [r4, #16]
 800764c:	2300      	movs	r3, #0
 800764e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007652:	e7a7      	b.n	80075a4 <_printf_i+0x118>
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	462a      	mov	r2, r5
 8007658:	4639      	mov	r1, r7
 800765a:	4630      	mov	r0, r6
 800765c:	47c0      	blx	r8
 800765e:	3001      	adds	r0, #1
 8007660:	d0aa      	beq.n	80075b8 <_printf_i+0x12c>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	079b      	lsls	r3, r3, #30
 8007666:	d413      	bmi.n	8007690 <_printf_i+0x204>
 8007668:	68e0      	ldr	r0, [r4, #12]
 800766a:	9b03      	ldr	r3, [sp, #12]
 800766c:	4298      	cmp	r0, r3
 800766e:	bfb8      	it	lt
 8007670:	4618      	movlt	r0, r3
 8007672:	e7a3      	b.n	80075bc <_printf_i+0x130>
 8007674:	2301      	movs	r3, #1
 8007676:	464a      	mov	r2, r9
 8007678:	4639      	mov	r1, r7
 800767a:	4630      	mov	r0, r6
 800767c:	47c0      	blx	r8
 800767e:	3001      	adds	r0, #1
 8007680:	d09a      	beq.n	80075b8 <_printf_i+0x12c>
 8007682:	3501      	adds	r5, #1
 8007684:	68e3      	ldr	r3, [r4, #12]
 8007686:	9a03      	ldr	r2, [sp, #12]
 8007688:	1a9b      	subs	r3, r3, r2
 800768a:	42ab      	cmp	r3, r5
 800768c:	dcf2      	bgt.n	8007674 <_printf_i+0x1e8>
 800768e:	e7eb      	b.n	8007668 <_printf_i+0x1dc>
 8007690:	2500      	movs	r5, #0
 8007692:	f104 0919 	add.w	r9, r4, #25
 8007696:	e7f5      	b.n	8007684 <_printf_i+0x1f8>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1ac      	bne.n	80075f6 <_printf_i+0x16a>
 800769c:	7803      	ldrb	r3, [r0, #0]
 800769e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076a6:	e76c      	b.n	8007582 <_printf_i+0xf6>
 80076a8:	08007df1 	.word	0x08007df1
 80076ac:	08007e02 	.word	0x08007e02

080076b0 <memcpy>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	1e43      	subs	r3, r0, #1
 80076b4:	440a      	add	r2, r1
 80076b6:	4291      	cmp	r1, r2
 80076b8:	d100      	bne.n	80076bc <memcpy+0xc>
 80076ba:	bd10      	pop	{r4, pc}
 80076bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076c4:	e7f7      	b.n	80076b6 <memcpy+0x6>

080076c6 <memmove>:
 80076c6:	4288      	cmp	r0, r1
 80076c8:	b510      	push	{r4, lr}
 80076ca:	eb01 0302 	add.w	r3, r1, r2
 80076ce:	d807      	bhi.n	80076e0 <memmove+0x1a>
 80076d0:	1e42      	subs	r2, r0, #1
 80076d2:	4299      	cmp	r1, r3
 80076d4:	d00a      	beq.n	80076ec <memmove+0x26>
 80076d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80076de:	e7f8      	b.n	80076d2 <memmove+0xc>
 80076e0:	4283      	cmp	r3, r0
 80076e2:	d9f5      	bls.n	80076d0 <memmove+0xa>
 80076e4:	1881      	adds	r1, r0, r2
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	42d3      	cmn	r3, r2
 80076ea:	d100      	bne.n	80076ee <memmove+0x28>
 80076ec:	bd10      	pop	{r4, pc}
 80076ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80076f6:	e7f7      	b.n	80076e8 <memmove+0x22>

080076f8 <_free_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4605      	mov	r5, r0
 80076fc:	2900      	cmp	r1, #0
 80076fe:	d045      	beq.n	800778c <_free_r+0x94>
 8007700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007704:	1f0c      	subs	r4, r1, #4
 8007706:	2b00      	cmp	r3, #0
 8007708:	bfb8      	it	lt
 800770a:	18e4      	addlt	r4, r4, r3
 800770c:	f000 f8d2 	bl	80078b4 <__malloc_lock>
 8007710:	4a1f      	ldr	r2, [pc, #124]	; (8007790 <_free_r+0x98>)
 8007712:	6813      	ldr	r3, [r2, #0]
 8007714:	4610      	mov	r0, r2
 8007716:	b933      	cbnz	r3, 8007726 <_free_r+0x2e>
 8007718:	6063      	str	r3, [r4, #4]
 800771a:	6014      	str	r4, [r2, #0]
 800771c:	4628      	mov	r0, r5
 800771e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007722:	f000 b8c8 	b.w	80078b6 <__malloc_unlock>
 8007726:	42a3      	cmp	r3, r4
 8007728:	d90c      	bls.n	8007744 <_free_r+0x4c>
 800772a:	6821      	ldr	r1, [r4, #0]
 800772c:	1862      	adds	r2, r4, r1
 800772e:	4293      	cmp	r3, r2
 8007730:	bf04      	itt	eq
 8007732:	681a      	ldreq	r2, [r3, #0]
 8007734:	685b      	ldreq	r3, [r3, #4]
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	bf04      	itt	eq
 800773a:	1852      	addeq	r2, r2, r1
 800773c:	6022      	streq	r2, [r4, #0]
 800773e:	6004      	str	r4, [r0, #0]
 8007740:	e7ec      	b.n	800771c <_free_r+0x24>
 8007742:	4613      	mov	r3, r2
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	b10a      	cbz	r2, 800774c <_free_r+0x54>
 8007748:	42a2      	cmp	r2, r4
 800774a:	d9fa      	bls.n	8007742 <_free_r+0x4a>
 800774c:	6819      	ldr	r1, [r3, #0]
 800774e:	1858      	adds	r0, r3, r1
 8007750:	42a0      	cmp	r0, r4
 8007752:	d10b      	bne.n	800776c <_free_r+0x74>
 8007754:	6820      	ldr	r0, [r4, #0]
 8007756:	4401      	add	r1, r0
 8007758:	1858      	adds	r0, r3, r1
 800775a:	4282      	cmp	r2, r0
 800775c:	6019      	str	r1, [r3, #0]
 800775e:	d1dd      	bne.n	800771c <_free_r+0x24>
 8007760:	6810      	ldr	r0, [r2, #0]
 8007762:	6852      	ldr	r2, [r2, #4]
 8007764:	605a      	str	r2, [r3, #4]
 8007766:	4401      	add	r1, r0
 8007768:	6019      	str	r1, [r3, #0]
 800776a:	e7d7      	b.n	800771c <_free_r+0x24>
 800776c:	d902      	bls.n	8007774 <_free_r+0x7c>
 800776e:	230c      	movs	r3, #12
 8007770:	602b      	str	r3, [r5, #0]
 8007772:	e7d3      	b.n	800771c <_free_r+0x24>
 8007774:	6820      	ldr	r0, [r4, #0]
 8007776:	1821      	adds	r1, r4, r0
 8007778:	428a      	cmp	r2, r1
 800777a:	bf04      	itt	eq
 800777c:	6811      	ldreq	r1, [r2, #0]
 800777e:	6852      	ldreq	r2, [r2, #4]
 8007780:	6062      	str	r2, [r4, #4]
 8007782:	bf04      	itt	eq
 8007784:	1809      	addeq	r1, r1, r0
 8007786:	6021      	streq	r1, [r4, #0]
 8007788:	605c      	str	r4, [r3, #4]
 800778a:	e7c7      	b.n	800771c <_free_r+0x24>
 800778c:	bd38      	pop	{r3, r4, r5, pc}
 800778e:	bf00      	nop
 8007790:	200002e0 	.word	0x200002e0

08007794 <_malloc_r>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	1ccd      	adds	r5, r1, #3
 8007798:	f025 0503 	bic.w	r5, r5, #3
 800779c:	3508      	adds	r5, #8
 800779e:	2d0c      	cmp	r5, #12
 80077a0:	bf38      	it	cc
 80077a2:	250c      	movcc	r5, #12
 80077a4:	2d00      	cmp	r5, #0
 80077a6:	4606      	mov	r6, r0
 80077a8:	db01      	blt.n	80077ae <_malloc_r+0x1a>
 80077aa:	42a9      	cmp	r1, r5
 80077ac:	d903      	bls.n	80077b6 <_malloc_r+0x22>
 80077ae:	230c      	movs	r3, #12
 80077b0:	6033      	str	r3, [r6, #0]
 80077b2:	2000      	movs	r0, #0
 80077b4:	bd70      	pop	{r4, r5, r6, pc}
 80077b6:	f000 f87d 	bl	80078b4 <__malloc_lock>
 80077ba:	4a21      	ldr	r2, [pc, #132]	; (8007840 <_malloc_r+0xac>)
 80077bc:	6814      	ldr	r4, [r2, #0]
 80077be:	4621      	mov	r1, r4
 80077c0:	b991      	cbnz	r1, 80077e8 <_malloc_r+0x54>
 80077c2:	4c20      	ldr	r4, [pc, #128]	; (8007844 <_malloc_r+0xb0>)
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	b91b      	cbnz	r3, 80077d0 <_malloc_r+0x3c>
 80077c8:	4630      	mov	r0, r6
 80077ca:	f000 f863 	bl	8007894 <_sbrk_r>
 80077ce:	6020      	str	r0, [r4, #0]
 80077d0:	4629      	mov	r1, r5
 80077d2:	4630      	mov	r0, r6
 80077d4:	f000 f85e 	bl	8007894 <_sbrk_r>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d124      	bne.n	8007826 <_malloc_r+0x92>
 80077dc:	230c      	movs	r3, #12
 80077de:	6033      	str	r3, [r6, #0]
 80077e0:	4630      	mov	r0, r6
 80077e2:	f000 f868 	bl	80078b6 <__malloc_unlock>
 80077e6:	e7e4      	b.n	80077b2 <_malloc_r+0x1e>
 80077e8:	680b      	ldr	r3, [r1, #0]
 80077ea:	1b5b      	subs	r3, r3, r5
 80077ec:	d418      	bmi.n	8007820 <_malloc_r+0x8c>
 80077ee:	2b0b      	cmp	r3, #11
 80077f0:	d90f      	bls.n	8007812 <_malloc_r+0x7e>
 80077f2:	600b      	str	r3, [r1, #0]
 80077f4:	50cd      	str	r5, [r1, r3]
 80077f6:	18cc      	adds	r4, r1, r3
 80077f8:	4630      	mov	r0, r6
 80077fa:	f000 f85c 	bl	80078b6 <__malloc_unlock>
 80077fe:	f104 000b 	add.w	r0, r4, #11
 8007802:	1d23      	adds	r3, r4, #4
 8007804:	f020 0007 	bic.w	r0, r0, #7
 8007808:	1ac3      	subs	r3, r0, r3
 800780a:	d0d3      	beq.n	80077b4 <_malloc_r+0x20>
 800780c:	425a      	negs	r2, r3
 800780e:	50e2      	str	r2, [r4, r3]
 8007810:	e7d0      	b.n	80077b4 <_malloc_r+0x20>
 8007812:	428c      	cmp	r4, r1
 8007814:	684b      	ldr	r3, [r1, #4]
 8007816:	bf16      	itet	ne
 8007818:	6063      	strne	r3, [r4, #4]
 800781a:	6013      	streq	r3, [r2, #0]
 800781c:	460c      	movne	r4, r1
 800781e:	e7eb      	b.n	80077f8 <_malloc_r+0x64>
 8007820:	460c      	mov	r4, r1
 8007822:	6849      	ldr	r1, [r1, #4]
 8007824:	e7cc      	b.n	80077c0 <_malloc_r+0x2c>
 8007826:	1cc4      	adds	r4, r0, #3
 8007828:	f024 0403 	bic.w	r4, r4, #3
 800782c:	42a0      	cmp	r0, r4
 800782e:	d005      	beq.n	800783c <_malloc_r+0xa8>
 8007830:	1a21      	subs	r1, r4, r0
 8007832:	4630      	mov	r0, r6
 8007834:	f000 f82e 	bl	8007894 <_sbrk_r>
 8007838:	3001      	adds	r0, #1
 800783a:	d0cf      	beq.n	80077dc <_malloc_r+0x48>
 800783c:	6025      	str	r5, [r4, #0]
 800783e:	e7db      	b.n	80077f8 <_malloc_r+0x64>
 8007840:	200002e0 	.word	0x200002e0
 8007844:	200002e4 	.word	0x200002e4

08007848 <_realloc_r>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	4607      	mov	r7, r0
 800784c:	4614      	mov	r4, r2
 800784e:	460e      	mov	r6, r1
 8007850:	b921      	cbnz	r1, 800785c <_realloc_r+0x14>
 8007852:	4611      	mov	r1, r2
 8007854:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007858:	f7ff bf9c 	b.w	8007794 <_malloc_r>
 800785c:	b922      	cbnz	r2, 8007868 <_realloc_r+0x20>
 800785e:	f7ff ff4b 	bl	80076f8 <_free_r>
 8007862:	4625      	mov	r5, r4
 8007864:	4628      	mov	r0, r5
 8007866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007868:	f000 f826 	bl	80078b8 <_malloc_usable_size_r>
 800786c:	42a0      	cmp	r0, r4
 800786e:	d20f      	bcs.n	8007890 <_realloc_r+0x48>
 8007870:	4621      	mov	r1, r4
 8007872:	4638      	mov	r0, r7
 8007874:	f7ff ff8e 	bl	8007794 <_malloc_r>
 8007878:	4605      	mov	r5, r0
 800787a:	2800      	cmp	r0, #0
 800787c:	d0f2      	beq.n	8007864 <_realloc_r+0x1c>
 800787e:	4631      	mov	r1, r6
 8007880:	4622      	mov	r2, r4
 8007882:	f7ff ff15 	bl	80076b0 <memcpy>
 8007886:	4631      	mov	r1, r6
 8007888:	4638      	mov	r0, r7
 800788a:	f7ff ff35 	bl	80076f8 <_free_r>
 800788e:	e7e9      	b.n	8007864 <_realloc_r+0x1c>
 8007890:	4635      	mov	r5, r6
 8007892:	e7e7      	b.n	8007864 <_realloc_r+0x1c>

08007894 <_sbrk_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	4c06      	ldr	r4, [pc, #24]	; (80078b0 <_sbrk_r+0x1c>)
 8007898:	2300      	movs	r3, #0
 800789a:	4605      	mov	r5, r0
 800789c:	4608      	mov	r0, r1
 800789e:	6023      	str	r3, [r4, #0]
 80078a0:	f7fa fa98 	bl	8001dd4 <_sbrk>
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d102      	bne.n	80078ae <_sbrk_r+0x1a>
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	b103      	cbz	r3, 80078ae <_sbrk_r+0x1a>
 80078ac:	602b      	str	r3, [r5, #0]
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
 80078b0:	2000487c 	.word	0x2000487c

080078b4 <__malloc_lock>:
 80078b4:	4770      	bx	lr

080078b6 <__malloc_unlock>:
 80078b6:	4770      	bx	lr

080078b8 <_malloc_usable_size_r>:
 80078b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078bc:	1f18      	subs	r0, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bfbc      	itt	lt
 80078c2:	580b      	ldrlt	r3, [r1, r0]
 80078c4:	18c0      	addlt	r0, r0, r3
 80078c6:	4770      	bx	lr

080078c8 <_init>:
 80078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ca:	bf00      	nop
 80078cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ce:	bc08      	pop	{r3}
 80078d0:	469e      	mov	lr, r3
 80078d2:	4770      	bx	lr

080078d4 <_fini>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr
